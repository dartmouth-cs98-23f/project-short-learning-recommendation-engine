is how you choose between web frameworks. Now, remember the framework is generally the key step that sits between your program and the internet. Now, in this class weve been using the Google App engine frame work, which is basically called Web App 2, which I found really nice. This handles, basically, basic HTTP, kind of the scheduling, like the threading issues, you know, handling multiple requests at once. Parsing basic headers, basically looking for things out of the GET request or the POST request and putting them into these, like, request objects. Turning your response object into the appropriate HTTP to send to the browser. The URL mapping and all of that stuff is really helpful. Various degrees of web framework that give you more or less control and require you to do more or less work. The level that weve been working on in webapp2 is the level where I, I really like to be. The things that I, I really like about it are that we have direct access to GET and POST. Some frameworks kind of hide this from you, and I think its really important that you are explicit about which method youre handling a GET or a POST. If youre thinking about the web in that way, your websites will generally make more sense. You wont make the mistakes of having, or you wont as easily make mistakes as having your, you know, your GETs modify the database and then getting cached weird and, you know, your forms not submitting properly. Understanding webs and web applications at the kind of method level, I think, is very, very important. Weve got direct access to the request. You know, this means things like headers. Yes, there are convenience functions for setting cookies and getting cookies, but you can also manipulate the headers directly. Sometimes youll want to do something funky with content type or content length. Then if the web framework dont let you do that, it can be really frustrating. You cant build the site the way you want to. So I find this kind of low level stuff is really helpful. But its not so low that youre dealing with, like, HTTP versions and host headers unless you really want to. There are kind of features that a lot of frameworks do that I think that are non-important. This is strictly in my opinion. Things like sessions, caching, some have automatic forums, database ORM stuff. I dont like working with these because I find every time I use something like this, its very soon after that I need a custom behavior. I want to handle sessions differently, or I want to cache things differently, or my forms dont fit the way the author thinks forms should work. Or, you know, the ORM cant express queries that I want to express, or wont let me cache the way I want to cache certain queries. So I find this sort of stuff is a little too high level for me and I always end up rewriting it anyway. To me, the important things are basic HTTP, having access to headers, and GET and POST. I almost never use pre-built session things, and caching, forms, and database stuff. In every experience Ive had, in the long run, I end up getting frustrated and I have to rewrite something that would have just been simpler to do in the first place. I generally dont like magic. When you look at some code and it just seems too magical, like it did all of this stuff for you and youre so far away from the request that you dont actually know what happened, thats a terrible way to write web software. Youre not going to be able to scale it properly. Youre not going to know why something breaks when it inevitably does. And its going to take you, I think ultimately it will cost you more work than just thinking through each of these problems on your own. Sometimes, its a good way to get started. Something I didnt discuss here are the notion of templates. Template languages come in all varieties. I am partial to one on Python called Mako. What weve been using in this class is Ginja 2, and Ginjas also been great. I think that the discipline here when youre using templates is making sure you separate code from templates. A lot of these template systems allow you to put arbitrary code in them or complicated logical structures, if and for and while. Try to keep it to the, the amount of code in templates to a minimum. Youve got this whole language you know, in our case, Python. Thats a very, very powerful langauge, you can do all sorts of things. Why would you use a broken subset of that in your templates? Any complexities should be actually in your Python code and not in your template code. Didnt come up much in this class because most of the rendering code were using was fairly simple. Its really easy to just throw complete objects and big data structures and unwind them and, and navigate them in your template code. And thats something thats just really difficult to maintain. I wouldnt recommend doing that. Templates are great, but use them with care. Use them for just generating your HTML. Or just generating your CSS. Or whatever youre using it for. And try to keep the code in the actual programming language. 