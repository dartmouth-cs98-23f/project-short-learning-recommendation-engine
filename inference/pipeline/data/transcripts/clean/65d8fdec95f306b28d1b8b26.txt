aspiring software developers or current software developers so i know youve come across a video titled a day in the life of a software engineer youtube is absolutely plastered with them eating typing eating meeting eating i dont know why they eat so much but ive made my fair share of daily life of a software engineer even day in life computer science student and plenty of others have done the same as what i tried to do and showed you the actual day and some of the actual work of a software engineer instead of just what is being done just typing is a lot different than the actual work that is getting done as a software engineer but regardless of what they showed you every single one had something in common and that is this theyre all taking place inside at a computer and that is the first realization i want you to make as a software engineer for most of your life youre going to be inside sitting at a computer now personally i dont see that being most suitable for most humans we id think we werent made to be sitting at a desk for eight hours a day so just out the gate if thats something that doesnt sound too appetizing to you then you may want to take a deeper look into the potential career path that youre currently looking at as a software engineer and thats what were doing in this video looking at the hard truths of being a software engineer what it takes and not just the highlight reel so lets get started [Music] now we have a lot to discuss in this video so sit back relax with a hot cup of coffee im making mine now in the most insane way possible and so far in my experience the best way possible commentary theyre the sponsor of todays video a coffee company of coffee nerds who have figured out a way to brew with a process thats carefully calibrated to extract as much flavor as possible from the beans which is then flash frozen into what they call an icy puck i dont know if ive ever heard a cooler name and all i do since i drink my coffee black is i drop the puck into my cup pour in my hot water that melts the puck which by the way is brewed 10 times stronger so i can do just this its not diluting by any means and i enjoy by far the best cup of coffee ive ever had and this fully recyclable as is all of their packaging and shipping materials which for someone living on the coast seeing trash wash up onto the beach left and right is incredibly important to me speaking of which ive been taking this on our beach days ive been taking this on our boat days i just put a capsule in my bag and once it melts i just pour it over my ice water and dont tell because while i almost always drink my coffee black sometimes instead of water ill pour it over iced milk to make myself a latte if you havent tried that its its really good so im going to enjoy my coffee and wanted to let you know that currently cometier isnt fully open to the public just yet but by going through my link below youre able to bypass the wait list and also receive 50 off your first purchase thats just one dollar a cup enjoy most of the experiences you see are from software engineers on youtube sharing their day but that is a biased point of view theyre entertainers they want you to watch the entire video think about it it is a lot easier to sit down and watch an hour-long movie that has been directed and filmed and has a story throughout rather than sitting down and watching an hour-long lecture can we agree on that and people who want to share their experience want you to be captivated by their day they want you to watch the video as long as they can get you to watch the video because the whole idea with a lot of these channels especially on youtube whether it be software engineer or not the whole idea is for them or for you to forget about the entire outside world and focus on their video watch their video in its entirety be consumed by being entertained by it and well that is the main goal whether it is helping you out or educating you that is the goal i only bring this up because its a highlight reel at best or misinforming you at worst so dont look at these videos and think thats exactly how it is because you cant see into the minds of these individuals they arent just typing aimlessly on a keyboard theyre deep in thought trying to figure out the solution to the task at hand and then doing research and implementing that solution in code and in their meetings theyre not just shooting the briefs with the co-workers theyre being told that the entire weeks worth of work before is completely worthless because the client decided to go another route and they dont want that feature implemented anymore or youre being told that your task was done incorrectly so now you have to redo it and those meetings are never fun but you know its not all bad sometimes you are just shooting the breeze with your co-workers and discussing what to do next and plenty of the things that i mentioned in this video may be see seen as negative or or whatever it may be or it may appear that im trying to discourage some individuals from becoming software engineers no im trying to show you the reality of what its like to be a software engineer not just the good thing so if i do focus on things that are a little bit more negative dont see that the majority of the job is negative im just trying to counteract all of the positive and all of the good things the highlight reel that people are putting out there but neglecting to do so for the bad thing because you need to understand that in any job especially this job theres a give-and-take good and bad which brings us to the everlasting question especially staying on topic when it comes to software engineering youtubers like myself im not im not im not calling anyone out in particular i am a software engineer and computer science youtuber just like everyone else and i made the same videos because the everlasting question really contradicts how a lot of these people portray their day as being always good always positive always fun but most of these youtubers who display it like that end up quitting their full-time software engineering job to do youtube full-time well if it is all butterflies and rainbows on the software engineering side of that then why do they quit that job i know why ive done it but for me it may be a little bit different than most so ive always wanted to work for myself if i never discovered youtube id probably be freelancing so for me it wasnt always about what i was doing as long as i could do something that i enjoyed and work for myself many of these individuals probably shared the same sentiment after all they did start a youtube channel for a reason that reason could be because they thought it was fun because they wanted to help people out or because they saw it leading to their financial freedom whatever it may be they saw this as being part of their future but also because if they truly enjoyed coding this was a way for them to make it living but also be able to work on their own projects which brings me to one of the biggest points of this video which i feel like people never talk about that is working as a professional software engineer is working for someone elses company working on someone elses idea you may love the idea you may love working on that app but you never have the final say on what features are implemented or even exactly how it looks or the overall growth of the company and where that app will be in five years for lack of a better term youre very much a code monkey being told what to do and how to do it with very little creative freedom some creative freedom but very little i personally cant work that way but for some people that may be their cup of tea you need that direction you need that structure so this may be perfect for you i know people who thrive on not completing the overall idea or worrying about the overall app but solving the task at hand each individual task is like a new challenge for them and that is what gets them going in the morning they know that they get to work on this task that task and that task they dont have to worry about the growth of the company or the growth of the app or the user interface they are a backend developer and all they have to worry about are these tasks today and thats basically it there really is a luxury in that if you are wired that way but if you are someone who got into development because you wanted to create your own apps you wanted to make your ideas a reality then it gets a little bit dicey there but to sum it all up many people get into coding to make their ideas a reality it starts off as a hobby but it becomes a job once you make it your job the old adage says do what you enjoy and you never work a day in your life but making something your job that you do enjoy will often times take the enjoyment out of it so what is an actual day in the life of a software engineer well this will vary from company to company team to team person to person but the overall structure is typically the same you have stand up about every day this is when you get together with your team you talk about what you did since the last stand up any roadblocks that youre facing and what you plan to do next now when you accomplish everything that you set out to do the day before your confidence is through the roof youre a genius programmer and you just want to tell everyone what you did in that stand up and you love it however theres a flip side to this coin if you spent the entire previous day working on a two-hour task and still maybe havent even figured it out well then you just feel bad bad no bad doesnt really begin to describe you begin to maybe get a little bit anxious youre very stressed out you feel incompetent because youre the developer being paid to do a particular job and complete this particular test and it says is estimated to be completed in two hours and you spent six hours doing it the day before and you still havent even completed it its like if you have to present something in front of the entire class that you know you didnt do and the whole entire class knows you failed but at work youre not only worried about what your classmates think of you or your teacher thinks of you or your grade but the stability of your job your livelihood i mean you tried but you just couldnt successfully complete the task it is an incredibly stressful feeling that i hated every second of when that would happen to me and honestly it could just be because i felt like my team were genius programmers i mean in their defense they kind of were they had 20 years experience each under their belt so yeah needless to say i was a little bit intimidated by them even though they were incredibly nice and help me out even with those traits i still felt that way with that being said i couldnt even begin to think about having a boss or a team that just like is mean or opposite of that that would suck but you know maybe youre a better programmer than me maybe that stuff never happens to you so you never have to feel that way i dont know i can tell you my experiences and mishaps all i want but at the end of the day many things cannot be learned from other peoples mistakes oftentimes you have to make the mistake or in this instance you have to experience that situation in order to understand what it actually feels like and maybe you thrive in those situations maybe you hate those situations but youll never know until youre in it it kind of reminds me of an analogy its like whenever youre at a restaurant and the waiter hands you your food and they sail it you know hot plates so they put on your table but you gotta see just how hot that plate is so you touch it sometimes you gotta figure things out for yourself on the job the amount of coding that is expected from you is typically around six hours this is how they base it on tasks so if you have a two hour task a three hour task and a one hour test you can complete that in one day but you cant complete another two hour task on top of that for the eight hours a day because you have stand up you have meetings you have breaks all of that ties in to your eight hour day so dont go in expecting that youre going to be coding for eight hours a day typically what your team should expect is around six now if youve seen my video how long i code a day you will see that im typically burned out around four hours so an extra two is a lot to handle but it also depends on the work at hand ive spent eight ten hours almost straight you know i have to eat and go to the bathroom and stuff but basically almost straight coding and when i say coding that is basically by the definition that i laid out in that video how long i code a day and that is including everything from research to actually typing out your code but thats when im working on something simple or fairly straightforward something thats already been laid out but when you have to figure out how to code something that has never been done in your language in your stack in your context well then it makes things quite a bit more difficult more brain power is needed to figure out the logic you have to figure out how to use it in your language with your stack in your context and the more brain power you use the more energy you use and the quicker you get burnt out i dont mean burnt out in how youve been hearing it a lot lately but just on that day more brain power is needed to figure out the logic and to implement it in your language using your stack and in your exact context and the more brain power you use the more drained you get and youre just tired ive said this before how individuals who work hard labor will never understand the mental drain that it takes to do our job because its not physically difficult and the best way i can describe the difference between those eight to ten hour coding days and the four hour coding days its like digging a little hole with a little shovel for eight hours a day compared to digging a giant hole with a real shovel youre still digging coding but one is much more taxing and ive found a fine balance of being able to figure out when ive when i met my wits in for that day if im working on something a little bit more difficult then maybe im in there three to four hours dont need to worry about anything else at hand that needs to be done ill save that for another day but if i want to relax and i want to do a little bit easier work and nothing too too mentally draining then i can do that too and i can work as long as i want on my own projects but when youre at work youre expected to do six hours a day give or take whatever your company wants you to do if you have to do more than the lord help you its like all coding work is treated equally when its not equal some tasks are a lot easier than others but if you have a lot of difficult tasks to do one day its hard to hit six hours of coding on difficult tasks that is one of the downfalls when it comes to working in a professional environment and thats the entire premise of what i wanted to discuss here in todays video not to to bring anyone away from being a software engineer but rather show you some of the realities that others do not on the outside you see typing you see this wonderful app that they created but you never see what goes on in the meetings you never see what goes on in their heads when theyre actually doing this work and the difficulty of it and the nuances and differences of working as a professional developer than just as a hobby developer i hope you learned something from todays video but more so i hope you give it a little bit more thought into the potential career that youre looking at based on the reality of it and not how its portrayed its a fun job at times but it feels like it can be the worst job too let me know if youve had a similar experience in the field or if youve had a different experience in the field completely opposite of how i feel because at the end of the day this is just one mans opinion one mans view and experiences that im sharing and thats mine i cant really speak from anybody elses point of view so id love to hear some of yall current software developers on yalls experience what you agree with what you disagree with down in the comment section below like subscribe hit the bell and enjoy yourself some icy puck coffee from cometier and ill see you on the next one [Music] you 