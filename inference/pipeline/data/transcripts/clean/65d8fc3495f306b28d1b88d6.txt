the last 30 years are what are called object oriented languages now this wasnt always the way my first programming job over 25 years ago was writing assembly language fortran and cobol on icl mainframes now these languages were not object oriented languages they were instead straight procedural languages where the program really is written as one long procedure even though it might contain functions and subroutines to make it more modular and maintainable its really a long piece of code combining data and logic all mixed in together now in an object oriented language this program would instead be split apart into self-contained objects almost like having several mini programs each object is representing a different part of the application and each object contains its own data and its own logic and they communicate between themselves now if that sounds like it could be a little bit confusing the idea here is that these objects represent the way you would talk and think about the actual problem its meant to make thinking about your program easier the objects dont represent mysterious abstract ideas they first represent things like employees and images bank accounts player objects and car objects whatever actually exists in your program so object orientation is an idea and its an idea that is supported in many languages and for you its a shift to thinking about the objects in your program and not just the process and while object oriented programming can bring a lot of jargon to the table there are really only a couple of terms we need to be comfortable with to move forward with it and the first two terms we need to understand is the difference between a class and an object and these two terms go hand in hand with object oriented languages a class is a blueprint its an idea its a description its a definition it describes what something is but it isnt the thing itself its a well-defined idea like say a blueprint for a house now classes will exist for different parts of your program say if you are writing a restaurant review website you might create classes that represent a restaurant and a review or a user classes could also represent visual parts of your program things like text box and button and window and they can also represent invisible things like dates and times now anything that can be a well-defined idea a lot of languages come with many classes already defined even advanced things like video player classes and you can also define your own now all classes describe and define two things attributes and behavior what are some things characteristics its attributes and what can it do whats its behavior so in this case lets say were describing a class to describe a person we might say that the person attributes our name height weight gender and age whereas the persons behavior is walk run jump speak sleep think about it this way that the attributes are really your data your variables and the behavior is what can you do your functions actually attributes and behavior in most object-oriented languages are actually described with other names which is properties and methods these are the most common ways of describing these but the class is describing these things in abstract and what i mean by that is it says that a person has a name and it has a height but it doesnt say what the name is because the class is just the description of something but just like theres no point creating a blueprint if you never intend to make a house theres no point defining a class unless youre going to make an object so thats the relationship between the two the class is the idea and the object is the thing itself we create objects based on the class like creating a house based on the blueprint not only that but you can create multiple objects based on one class in the same way you could create multiple houses based on one single blueprint now while there is a lot of jargon associated with object orientation encapsulation is the key idea this is the idea that classes are self-contained units that represent both the data and the code that works on that data that we take our properties and our methods and we box them up we encapsulate them now javascript is an object-oriented language although it is quite casual with it there are some other languages where object orientation is very formal and you can do very little without thinking deeply about classes and objects so while some languages like c are not at all object-oriented if youre working in java c-sharp ruby python vb.net objective-c you cant avoid object orientation in most modern programming languages 