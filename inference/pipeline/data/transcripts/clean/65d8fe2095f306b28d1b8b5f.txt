that we are talking about in system design but look at this design autocorrect system [Music] hi everyone this is gkcs today were going to be talking about interviews for software engineering and at the end of this video youll know what those are and how you can prepare based on what they are looking for youre not trying to game the system youre trying to understand the system so that you can perform better and articulate yourself better to give the results that they are looking for okay so lets start with the three major parts of any software engineering interview the first one is a coding interview coding is usually around algorithms and data structures the second part is a system design or architecture interview earlier this used to be a technical interview the third part is the behavioral interview its also called The Profit interview is this person fit professional to join this company the coding interview is an IQ test okay largely an IQ test plus basic skills and we want to measure how smart you are the second thing is system design or technical interviews can the candidate perform at the given position well and heres the important part now at this state in this situation can this candidate perform well at the given job role we are trying to measure here skills and the important thing is you need to demonstrate these skills in a IQ test theres also knowledge which is tested finally we come to behavioral interviews the intent is to find out will a candidate perform at the given role now and later and what is being measured motives of a candidate what is the intent of the candidate when hes sitting for this interview okay so what kind of test mechanism should we use for these three types of interviews again you probably know about this but Im just trying to break it down and see exactly whats happening in each interview if you take the coding interview as the name suggests you are asked to solve a problem do DSA do dynamic programming you know Computer Science is based on that problem solving is the mechanism to test this skill what do you have with system design given a situation design or code a solution finally you have behavioral interviews your past and maybe to some extent your current is dissected to get your future your past meaning around 18 months in the past till date tell us what situations you faced what were particularly memorable or challenging situations challenging is usually memorable give us those situations and then we dive into what happened exactly what did you do what did you think what did you feel and based on that we will not really predict your future but well assign you a bucket okay so its like hashing got up into something or looking at his past data points to predict his future in the last 18 months he was working on a startup one particularly challenging part was when he was migrating his entire database from zero code solution to a engineering solution like an in-house solution and if you want a little more details you can look at critical incident interviews CII and what did you think what did you feel sounds like a structured interview star pattern is one of the structured ways to talk about this okay now let me talk about the pros and cons coding algorithms a lot of preparation before you sit for an interview three months of preparation definitely shows that you are interested in this company what about fast helps you go through hundreds of profiles which would otherwise be waiting forever it is its scalable absolutely questions can be devised quickly put quickly tested accurately and the best part is the Judgment can be automated judgment in practice judgment in the interview can be taken care of through an online judge okay a remote code executor can tell you whether your code runs correctly or incorrectly its an amazing feature of coding interviews just coding interviews that you are able to automate this is it objective absolutely no one argues that is it easy to set the syllabus yes it is just need some basic undergrad skills to test a candidate on their binary search its its like learning ABCD for a computer engineer so you should know about it what about relevance to the job theres some criticism to this criticism but the fact is there is very little if at all any relevance to your job role and what happens in the interview for a coding interview what about false negatives I would say this is a incorrect criticism false negatives means many people who deserve to be on the job are rejected because the test is throwing them out I would say it has a lot of false positives also people who join using the coding or algorithms rounds have little to no demonstration of whether they can actually perform in the role or not in my experience around 10 to 20 percent of the candidates are not good the second thing is system design or technical interviews the pros of this especially the low level design interview is that it is job relevant lets see if there are any problems is it automated no so its missing out on this thing it is subjective so what you believe is good I might believe is bad what you believe is bad I might believe is good architecture keeps going left and right this becomes less and less true if you have the second point but the second point is a is a requirement so it may not be true an experienced interviewer needs to take this lets say experienced a skilled interviewer okay someone who is relevant or knows about system design needs to take this round so if a sd2 takes your system design interview take it with a pinch of salt I have seen as the tools taking the interview of a person whos sitting for a director role and they end up asking them things that they are never worked on none of us have worked on the questions that we are talking about in system design but look at this design autocorrect system so the experienced person then says that listen Ill probably start the queries in different places fuzzy matching and the person says the sd2 says you should have thought of tries no theyre expecting some data structures or some known Solutions two unknown problems which have been asked in 45 minutes and its going to test the candidates ability to come up with things without looking at Wikipedia or Google so you need a experienced or a skilled interview to take this kind of an interview which is always in short supply even if you have them they are busy working and the cost of getting a skilled interview out of their work and asking them to go and interview all candidates which come forward is very high one of the benefits that you can go for again is that this has a low false positive and negative rate in the sense that if you see that this person is good at what they do theres a decent chance that theyll be doing good at work also now comes behavioral interview one is it has High predictability of whether a candidate will perform well or not in a given job role when I say predictability by definition means future and it also says that is this person actually interested in the job is this person the kind of person who does the job not that whether they can do or not that whether they can learn but whether they will do it is the false positive rate high low false positive rates or false negatives are extremely low after you have taken a behavioral interview one of the drawbacks of it is a person who is skilled at behavioral interviews Point number one it is subjective as compared to a technical interviewer as compared to a DSA interview it requires a person to make a subjective call do I mean that it is totally subjective absolutely not it is actually much more objective than most of us Engineers give it credit for there are ways in which you can grade a person right but thats the thing the grade is being done by a human being where is that subjectivity to it similar to a system Design Round it was a good solution it was a great solution it was a bad solution is coming from the engineer based on their experience of what is good or bad or ugly just like that you have a behavioral interview subjective and again you need a skilled interviewer now comes the entire process dont look at it as you know DSA is bad coding is good coding is bad behavioral entries are good no look at the full process Google does not say if you clear this round youre in it says that you have to go through a googliness also and the reason they do that is because or this is my understanding of it is because you need Engineers who are smart so they can learn a vast number of topics as the topography changes of software engineering these people will perform well and they will perform probably grades better than other people you know because they can learn things quicker and incorporate them into your organization faster thats the idea so this is amazing can this person learn and is this person a good investment moving forward are they hard working yes absolutely they have worked for three months just to prepare for your interviews they are dedicated to you know excelling at the interview and these concepts are also theres a theres a measurement of knowledge also happening here you know binary search does not just come to a person while theyre walking on the street they they study these Concepts and more and more deeper Concepts than even by research let me draw a timeline of what is the value of an engineer okay as you go ahead in your career your value increases and what is the time taken to give that value okay of course this is a very subjective and you know you can never measure people in a straight line its probably 10 Dimensions but whatever so initially maybe your value zero maybe even negative because you know you need to be trained after some time you go in a straight path and you hit some time when you actually become as useful as the money youre taking your potential becomes lesser than your kinetic and then you keep scaling and now you can probably go really high some people are very relaxed people they dont want to do software engineering they leave here itself its a loss to the company and some people you know despite that continue struggling reach her and maybe taper off here saying that you know this is my potential I am not interested in engineering or I will go into some other role or I am happy with what I have Im not criticizing people Im just telling you this is roughly the space of value or the the benefit that the company can derive based on time now a person who has high learning skills is probably in this graph can be in this graph is not in this graph but can be in this graph so they have the potential to be this line a person whos tested with a system design interview you can tell roughly where they are at OK so you draw this line and you say uh you know what the system design around says they are somewhere over here whether the person at this point chooses this line or chooses this line is mainly dependent on behavioral interviews gaurav can be an entrepreneur gaurav will be an entrepreneur gaurav is an entrepreneur are three different questions three different rounds three different measurements the important part is to see whether what they can offer is what you need thats something that I think most startups forget thats the reason why for most startups the system Design Round is most relevant and for most large organizations the coding ground and the behavior round is most relevant if you see for SD ones even for SD tools large organizations like Google Microsoft they dont ask system design rounds right this is too technical for you youre right now you know pretty young but I need to know where you are going and I need to know where you can potentially be these two are pretty important as you become more and more senior the investment becomes more and more insane so it becomes a challenge to justify the cost immediately also you need a starting point you need to figure out where you are at like almost everyone starts over here some people are doing an internship role here some people who have done maybe a job beforehand or somewhere over here but as you work more and more the system design now becomes more and more reasonable so this is the rough breakdown of a software engineering interview process when I say software engineering I dont mean to say that it is just for engineers software developer and engineer is just splitting hairs in my opinion especially looking at the the kind of work that they do front-end engineering back-end engineering extremely similar everyone goes through these kind of rounds front-end engineering you have a front-end engineering round which is similar to a system design architecture around for backend Engineers so this is a technical interview okay low level design you might think about Dev operations developer operations which is the infrastructure management of a system so over there the system Design Round is more focused on how do you manage deploying systems when you see a software tester you look at how do you test a given system or how do you lets say write a small piece of code and then start testing it focus more on the testing angle of it but again a technical interview whether you can do testing or you cant do testing okay behavioral interviews are Universal IQ tests are Universal this is also Universal but caters to the given job role lets meet next time for another round of software engineering breakdown see you then soon bye just think about it if you have dynamic programming in some situation and you say I will now take this concept of dynamic programming and make everybody do dynamic programming and see whos good at it you better be sure that in engineering and software engineering dynamic programming is the only thing that is happening or that everybody needs to at least use it its not true I can take the same concept of dynamic programming and put in something called game AI okay pick up any Concept in game AI lets take something simple lets take turn based games something you have learned in college Alpha Beta pruning okay it has something to do with trees the trees there is some sort of algorithm there is some logic required some mathematical intuition has to come a genius level intellect will then solve the problem and you will be able to tell whether the persons IQ is high and youll also be able to test some knowledge and it is related to computer science sufficiently related that you can excuse yourself as an IQ test okay but it is not asked why no reason it is just a matter of fashion if this is considered dynamic programming is considered cool it will be asked if it is not considered cool it will not be asked okay security algorithms like RSA things that you learn in college again people laugh about it say that whats the point dude this is never asked that is not the fault of the college it is the fault of the industry or it is not the fault of the industry also they will do whatever they like who are you to stop them Frankly Speaking its their money they can do what they like but saying that this algorithm is not very useful because its not asked in the industry does not make any sense what Im trying to get you to think of is security algorithms artificial intelligence algorithms many algorithms which are in data mining or data processing are not asked not because they are not testable or they are not related to computer science its just that nobodys interested in them right now at this point in time so this part of the test is the most volatile it keeps changing and youll see courses on courses on DSA and data success algorithms keep coming up welcome to interview ready this platform is designed to help you upskill or prepare for your interviews as a software engineer its designed for software Engineers having an experience range of something like 0 to 10 years so if youre a college undergraduate it may be a little too early for you and if youre more than 10 years of experience this could be good revision material but its unlikely that youll see the concepts over here which you have not seen in the real world already when we are talking about upskilling the focus of this platform is to pick the most important Concepts that a software engineer needs to know so that they can improve their workplace capabilities and improve their interview preparation also we take common interview questions which are asked across software companies to evaluate your skills there are three major differentiators when it comes to our product versus what is out there already one is that this is a lifetime valid course if you purchase it once it stays with you forever you can watch the videos as many times as you like retry the quizzes as many times as you like download the PDFs its all yours once you purchase it our second feature is live classes where you can bring your doubts you can bring your suggestions you can bring some interesting system design questions which will be answering live we have a sample for you to look at our third feature is the content that we produce is highly curated and it is designed in a way that if you read one chapter you get to know the fundamental problems and solutions associated with that chapter for example once you go through the chest design you will know how connections are built in the real world on servers how that can be then extended lets say to a live Zoom class where multiple connections have to be maintained and you dont want those connections to be broken despite server restarts this is just one example each of our content pieces dives into detail on the fundamentals of Designing systems and our bonus feature is that we keep updating our content as you know the interview preparation space is very volatile what is popular today may not be popular tomorrow and interview questions change much faster than even Technologies so to stay up to date what we do is we add more and more content to the course and as youll see some of the content is reordered and restructured to reflect on what the market demands are okay since your stayed so long I am assuming that you really want to know about what exactly is inside the course the course is largely broken into three sections one would be fundamentals where you understand the Deep Design Concepts which form the Bedrock of most popular systems the second is high level design where you see a 10 000 feet view a very high level architectural view of a distributed system popular questions being lets say Gmail popular questions being designing WhatsApp a calling application and so on and finally we have machine coding which is a very popular and upcoming type of interview used to evaluate a candidates coding skills their testing skills and their system design skills when it comes to actually programming so thats the three sections we have in our course I look forward to you joining all the best see you soon 