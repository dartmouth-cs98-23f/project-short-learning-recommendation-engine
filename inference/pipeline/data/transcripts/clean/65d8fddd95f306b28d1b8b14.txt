this video is intended for those who do not know what functional programming is with an assumption in order to be aware of the fact that you dont know what functional programming is I suppose you must be familiar with some other programming Paradigm that is you should be familiar with some language similar to one of these great now one thing that youll have probably realized by now is that despite having a few things in common these languages also have lots of differences Im not talking about differences in syntax syntax doesnt matter Im talking about semantics the meaning and behavior of your programs lets take C you may know that c doesnt have classes or objects unlike C plus plus Java and python we say that c is an imperative language since its instructions are shaped like commands unless it is procedural since it is based on procedure calls usually improperly referred to as function calls [Music] you will disagree about the improperly but Im also sure that you all know that procedure means different things in different contexts sometimes its used to denote a piece of code that does not return a value as opposed to a function which does in this video by procedure I mean any sequence of instructions which may well contain a return while a function in the functional programming sense is a much more abstract idea which we will explore later in the video [Music] on the other hand are called object-oriented languages but the instructions inside their methods are still commands so these languages are still based on the same imperative paradigm one of the things that make functional languages most different from the ones youre probably used to is the fact that the instructions are not commands but expressions and a program is not a concatenation of declarations and commands but a composition of functions well call this property one theres also another big difference the biggest one probably and Ill introduce it later in the video [Music] when we refer to functions we mean it in the mathematical sense of maps between sets such that the output depends solely on the input a procedure can be a function for example this python procedure is a function that takes an integer and returns an integer in mathematical notation we would write this function as F from integers to integers such that X maps to x squared this symbol here means Maps 2 and writing F such that X maps to x squared is equivalent to writing F such that f of x equals x squared I prefer to use the map 2 notation here since it allows for a better transition later in the video lets look at another example that should bring us a little bit closer to the functional paradigm if we wanted to define a python function that Returns the sum of the squares of two numbers we could either write the following procedure or if we wanted to separate the operations write something like this now remember what we said about the functional Paradigm property one rather than using a concatenation of declarations and commands we want to use function composition so we can rewrite the function like this this is closer to satisfying the first property there is still a problem though that return thing over there is a command and one command is enough to make this computation a concatenation of commands thus violating property one we can solve this by introducing a second property of functional programming languages the presence of anonymous functions Anonymous function is a function without a name we will represent Anonymous functions at least for now by means how the maps to notation [Music] instead of writing our function like this we will stop using python for a while and represent our function in a weird mathematical to the language like this notice that we use the same equal symbol that we might have used to assign the value 3 to an integer variable X this is a hint that a most important property of all Anonymous functions can be assigned to variables the very same way that a number can be assigned to a variable numbers can be the inputs and outputs of functions so I guess the next obvious step would be using Anonymous functions as the input of other functions like so and also as the result of other functions in this case the function Foo is a function that returns a function so this Returns the function that multiplies the input by 2. hence the following computes the value 2 times 5. [Music] should we call this property three I guess this is I think the most important property of functional programming languages these may or may not surprise you but several languages you may already know like Python and JavaScript already have the possibility of writing programs that satisfy these three properties for example you can write synonyms functions and pass them to other functions in Python by using this syntax and in JavaScript by using these other syntax this is because these languages are multi-paradigm languages but what about purely function languages Python and JavaScript allow us to use functional tools while still having the possibility to concatenate commands how do you like iteration without table Z to concatenate commands in purely functional languages we dont have iteration but its not really necessary functional languages use recursion as their equivalent of iteration as you may know every while loop can be transformed into a tail recursive function by moving the variables youre checking from the god to the base case of the recursive function [Music] if youre familiar with recursion and youre using it already in your Paradigm of choice the transition to any functional language will be quite smooth another thing you may be asking yourself is what about conditionals well Im sure youve used some sort of inline condition already or a ternary operator so its basically the same and this is already most of what you need to know in order to have a vague idea of what functional programming is like but you want the good stuff Danny the Lambda juice the color the Purity the platonic world of ideas the python Syntax for anonymous functions contains the word Lambda this is derived from notation introduced by Alan turings color friend Alonso Church he wrote the functions I represented with them of stew with a different notation that features the Greek letter Lambda [Music] actually this is a bit wrong since in Lambda calculus which is what were doing right now functions have a fixed erity of 1 which means they only have one parameter functions with more than one parameter can be simulated by doing something like this If the previous function was in mathematical notation a function from the integers times the integers to the integers which means a function that takes couples of integers as its input and returns a single integer this new function is from the integers to the set of functions from the integers to the integers it is quite simple to show that these two functions call in these two different ways are in fact equivalent this property is known as currying to be even more precise Lambda calculus does not even have an explicit notion of numbers or operations or booleans or even recursion for example numbers are represented like this and this thing called the Y combinator makes recursion luckily for us we dont need to use the Lambda calculus in its original form just like we dont need to use Turing machines or general recursive functions modern functional languages are very rich of features that make them very suitable for some tasks the functional language Im most familiar with happens to be okamo the most powerful tool in the kennel is one called pattern matching the simplest way I can describe pattern meshing is its like a switch but rather than checking the value of a variable it checks whether an expression matches a pattern these used together with algebraic data types makes writing interpreters in a camel almost trivial [Music] a lot of verification tools and proof assistance are based on functional programming and some of them are written in a camel apparently there is also at least one company that uses a camo for their services but why am I saying all this why do I have to point out that there actually are areas in which functional programming is much more suitable than other paradigms well because you may have heard some people claim that her functional programming is useless I mean computation without state is so elegant but no collateral effects how can a programming language be useful if it cant even print a screen [Music] so apparently there is one thing I forgot to mention collateral effects if you cannot concatenate commands you cannot do something like this printing raising exceptions and other things like these cannot be done in a standard way there are several ways to have collateral effects in a purely function language one of which is Moana [Music] how the languages like camel simply include the possibility to have collateral Effects by breaking the first property and allowing the user to concatenate a function of return type unit which is basically a call to avoid function to your expression so basically no you do have ways to print in function languages even impure ones in general I think its a good thing that basically old modern languages have functional features apart from java introducing languages in Java was a bit of a mistake but Java as a whole was a bit of a mistake so thats not a story the more paradigms a language can support the more we can adapt it to our needs and use the most appropriate Paradigm each time I hope I gave you a decent overview of the main characteristics of function languages let me know what you think in the comments see you next time [Music] 