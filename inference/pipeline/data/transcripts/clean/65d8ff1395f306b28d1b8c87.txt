there is a picture of me(laughs) - [Man] Use that as the beginning of this episode please. (upbeat music) Welcome back to coding with Qiskit. Im your host, Jin. If youre new to the series, we cover topics in quantum algorithms each week. So be sure to like and subscribe. Today we are gonna be learning how to install a Qiskit and use a very specific Circuit Library in order to build our first quantum algorithm. In order to access this library were gonna have to install a Qiskit locally first. So lets go through really quickly how to do this. So Qiskit is an open source SDK, use for programming quantum computers using Python. And dont worry if your Python skills arent there yet. Well work through things slowly. So the first thing Im gonna do is navigate to Qiskit.org this will tell me exactly how to install Qiskit on my machine. And there is generally two options for running Qiskit, you can either run it on IBMs hosted jupyter notebooks or you can install it locally. And the first thing I wanna do is if I dont have Python installed yet is to just install Anaconda and this will install all the things I need for Python, click download I have a Mac, so Ill just do the 64 bit graphical installer and download. And like always, if you have a windows or Linux just choose the appropriate downloader. Okay, so now that Anaconda has downloaded Ill just open this up. (soft music) And Ill install. (soft music) So what Im gonna do first is set up my Python environment which just is a good way for me to organize my Python packages so that I have all the correct versions of all the packages in one place. So what Ill do is Conda create dash and name of my environment which will be coding with Qiskit or cwq. Ill set my Python version equal to three and the Anaconda distribution. Okay, and Im just gonna watch this little thing spin. Okay, now its done. Okay, so Im gonna proceed, yes. And that thing is gonna spin some more this might take a minute. So now that I have my environment set up Im gonna enter my environment by going to Conda activate the name of my environment which is coding with Qiskit and Im going to now install Qiskit into my environment. So from the Qiskit.org site just following these instructions start locally Im gonna choose the Qiskit stable installation. I have Mac so I will choose Mac but its the same if you have Linux or windows just choose the correct distribution and then Ill copy this and PIP install Qiskit into my environment. So now I have Qiskit installed and Im just gonna open up a jupyter notebook so we can get started with our algorithm. Perfect. So Im gonna open up a new Python 3 Notebook and lets get started with our algorithm. So lets build our first algorithm from the circuits library now in order to do this we need a few parts some data to input, a circuit to run the calculation and then an output. In physics we often talk about signals and signals represent the transmission of information. And generally we use basis or units such as frequency or time to represent what kind of information that were transmitting. Im gonna show you a quick example of an algorithm thats already built in Qiskit Circuit Library called the Fourier Checking Circuit. A Fourier Checking circuit is an important tool used from the signal processing domain. And as a fundamental circuit used in many other quantum algorithms, for example, Shors algorithm which well cover in a future episode these circuits can be run on a real quantum back-end or on one of the high performance simulators that are available through Qiskit. All right, so lets get started with the algorithm. So the first thing Im gonna do is do my imports. Im going to import qiskit.quantum_info as qi and this is going to be doing the calculation. Im going to import from the Circuit Library the Fourier Checking Circuit and Im going to import my visualizer, qiskit.visualization import plot histogram. Okay. Shift+ Enter to execute that. So for this, algorithm, Im gonna define two functions. Theyre just lists, f is equal to one minus one minus one minus one and g is equal to one, one minus one minus one. So now that we have our two functions f and g the Fourier Checking Circuit will tell us how correlated the Fourier transform of g is to our function f. And it turns out that a quantum computer can perform this calculation much faster than a classical computer can. So the circuit will output a probability for the zero zero state. And if the probability is greater than 0.05 then the Fourier transform our function g is correlated with our function f. Okay. So Im gonna set up my circuit equals Fourier checking and Ill put in my two functions f is equal to f and g is equal to g, circ.draw See what this looks like. Okay. This is what my quantum circuit will actually look like. So lets run this, zero equals qi.state vector from label zero zero is going to evolve this, state vector is equal to zero.evolve.circ and Im gonna get my probabilities back here. probs equals sv.probabilities Okay and then Im gonna plot what this looks like. And remember Im only interested in the zero zero probability. Okay, perfect. So I get back a histogram here am only interested in the zero zero probabilities which I get 0.25 so what this means is the Fourier transform of my g function is correlated with my f function. So you can try to circ it yourself and see how the output changed depending on your input functions. This is where well stop for today. But hopefully now you have Qiskit installed youre familiar with the Circuit Library and youre able to run your first quantum algorithm. Make sure to like and subscribe because next time were gonna be talking about what it actually means to be a slur algorithm and why certain algorithms are better for quantum computers versus classical computers. Jin out. (laughs) Can you just have a jump cut where I like tap it away (laughs) - [Man] Absolutely (upbeat music) 