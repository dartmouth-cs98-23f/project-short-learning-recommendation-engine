Another thing you guys have asked about a lot is,
is how you choose between web frameworks.
Now, remember the framework is generally the key step that sits between your
program and the internet.
Now, in this class we've been using the Google App engine frame work,
which is basically called Web App 2, which I found really nice.
This handles, basically, basic HTTP, kind of the scheduling,
like the threading issues, you know, handling multiple requests at once.
Parsing basic headers, basically looking for things out of the GET request or
the POST request and putting them into these, like, request objects.
Turning your response object into the appropriate HTTP to send to the browser.
The URL mapping and all of that stuff is really helpful.
Various degrees of web framework that give you more or
less control and require you to do more or less work.
The level that we've been working on in webapp2 is the level where I,
I really like to be.
The things that I,
I really like about it are that we have direct access to GET and POST.
Some frameworks kind of hide this from you, and I think it's really important
that you are explicit about which method you're handling a GET or a POST.
If you're thinking about the web in that way,
your websites will generally make more sense.
You won't make the mistakes of having, or you won't as easily make mistakes as
having your, you know, your GETs modify the database and
then getting cached weird and, you know, your forms not submitting properly.
Understanding webs and
web applications at the kind of method level, I think, is very, very important.
We've got direct access to the request.
You know, this means things like headers.
Yes, there are convenience functions for setting cookies and
getting cookies, but you can also manipulate the headers directly.
Sometimes you'll want to do something funky with content type or content length.
Then if the web framework don't let you do that, it can be really frustrating.
You can't build the site the way you want to.
So I find this kind of low level stuff is really helpful.
But it's not so low that you're dealing with,
like, HTTP versions and host headers unless you really want to.
There are kind of features that a lot of frameworks do that I
think that are non-important.
This is strictly in my opinion.
Things like sessions, caching, some have automatic forums, database ORM stuff.
I don't like working with these because I find every time I
use something like this, it's very soon after that I need a custom behavior.
I want to handle sessions differently, or I want to cache things differently, or
my forms don't fit the way the author thinks forms should work.
Or, you know, the ORM can't express queries that I want to express,
or won't let me cache the way I want to cache certain queries.
So I find this sort of stuff is a little too high level for me and
I always end up rewriting it anyway.
To me, the important things are basic HTTP, having access to headers, and
GET and POST.
I almost never use pre-built session things, and caching, forms, and
database stuff.
In every experience I've had, in the long run,
I end up getting frustrated and I have to rewrite something that would have just
been simpler to do in the first place.
I generally don't like magic.
When you look at some code and it just seems too magical, like it
did all of this stuff for you and you're so far away from the request that you
don't actually know what happened, that's a terrible way to write web software.
You're not going to be able to scale it properly.
You're not going to know why something breaks when it inevitably does.
And it's going to take you,
I think ultimately it will cost you more work than just thinking through each of
these problems on your own.
Sometimes, it's a good way to get started.
Something I didn't discuss here are the notion of templates.
Template languages come in all varieties.
I am partial to one on Python called Mako.
What we've been using in this class is Ginja 2, and Ginja's also been great.
I think that the discipline here when you're using templates is making sure you
separate code from templates.
A lot of these template systems allow you to put arbitrary code in them or
complicated logical structures, if and for and while.
Try to keep it to the, the amount of code in templates to a minimum.
You've got this whole language you know, in our case, Python.
That's a very, very powerful langauge, you can do all sorts of things.
Why would you use a broken subset of that in your templates?
Any complexities should be actually in your Python code and
not in your template code.
Didn't come up much in
this class because most of the rendering code we're using was fairly simple.
It's really easy to just throw complete objects and big data structures and
unwind them and, and navigate them in your template code.
And that's something that's just really difficult to maintain.
I wouldn't recommend doing that.
Templates are great, but use them with care.
Use them for just generating your HTML.
Or just generating your CSS.
Or whatever you're using it for.
And try to keep the code in the actual programming language.
