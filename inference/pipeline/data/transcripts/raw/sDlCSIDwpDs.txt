second,duration,transcript
0.08,3.44,one of the most important aspects of
1.599,3.76,software development is the architecture
3.52,4.239,of your application which is basically
5.359,4.32,the blueprint for how the web app is
7.759,3.84,structured think about the first decent
9.679,4.08,size app you ever built i'd be willing
11.599,4.481,to bet that you unknowingly implemented
13.759,4.241,the monolithic architecture or basically
16.08,3.84,where you put all of the code into a
18.0,3.6,single code base tightly coupled
19.92,3.599,together but if you want to efficiently
21.6,3.919,scale your app from a hundred users to
23.519,4.321,100 000 users then maybe you want to
25.519,3.92,take a look at microservice architecture
27.84,3.92,but that's not all there is to consider
29.439,4.161,in terms of architecture i mean how many
31.76,3.44,tiers is your application where does
33.6,3.6,each component live all on the same
35.2,3.199,server each have their own server are
37.2,2.96,you going with a server-less
38.399,3.281,architecture and if you're on web 2
40.16,3.68,you're probably doing client server but
41.68,4.48,if you're on web3 then you're doing
43.84,5.199,peer-to-peer all of this matters in the
46.16,4.559,context of what type of app that you
49.039,3.52,want to build so i've broken these down
50.719,3.52,put them into levels or buckets that are
52.559,4.16,actually comparable and created
54.239,4.881,explanations in a way for you to simply
56.719,4.561,understand the differences in the types
59.12,4.64,of web app architecture but first i'm
61.28,4.0,stoked to announce that jetbrain space
63.76,2.96,is the sponsor of today's video and i
65.28,2.879,may take a wild guess that you've
66.72,4.64,already heard of jetbrains they've
68.159,5.841,created intellij idea pycharm
71.36,4.399,team city and kotlin among many other
74.0,3.28,tools for developers and software teams
75.759,3.36,alike but today i want to talk to you
77.28,4.24,about a specific product created by
79.119,4.961,jetbrains jetbrains space space is
81.52,4.4,really a one-stop shop for all
84.08,3.679,development tools it's a unified
85.92,4.0,platform that covers the entire software
87.759,4.561,development pipeline everything you need
89.92,4.4,in a single tool set source code control
92.32,3.839,hosting using git code reviews with
94.32,3.28,merge requests and quality gates
96.159,3.361,automation jobs for building and
97.6,3.68,deploying applications project
99.52,3.52,management tools checklist for planning
101.28,3.6,and issue tracker and visual boards
103.04,3.84,packaging container registries for our
104.88,3.76,publishing artifacts the first class
106.88,4.239,integration with jetbrains intellij
108.64,4.56,based ides and cloud development
111.119,4.241,environment for remote development with
113.2,4.08,jetbrains ides but it's not only about
115.36,3.84,the development aspect it's also about
117.28,3.519,the organizational and communication
119.2,3.12,tools you have a team directory for
120.799,3.521,managing the company's organizational
122.32,4.32,structure management of vacations
124.32,4.639,absences and locations chats
126.64,4.319,collaborative documents blogs meeting
128.959,4.241,management personal calendars and to-do
130.959,4.561,lists for task management so if you work
133.2,4.8,in a team especially if you use any jet
135.52,4.4,branch products ides i would heavily
138.0,3.12,recommend checking out space because it
139.92,2.56,puts everything you need for
141.12,3.36,communicating and collaborating with
142.48,3.28,your team in one place you can try it
144.48,2.88,out for free using my link in the
145.76,4.08,description but you can also upgrade to
147.36,4.48,space team using my code which is also
149.84,4.24,in the description just below the link
151.84,4.08,so what is web app architecture to put
154.08,4.0,it simply the web app architecture of a
155.92,3.92,system describes its major components
158.08,3.519,their relationships and how they
159.84,4.479,interact with each other it essentially
161.599,4.321,serves as a blueprint the layout of it
164.319,3.2,all and there are two main ways in which
165.92,4.08,it's laid out at least in the
167.519,4.641,overarching more broad idea of
170.0,4.4,architecture with the main one being
172.16,4.0,client server architecture it would be
174.4,3.919,irresponsible for me not to start with
176.16,4.88,this as it is the fundamental building
178.319,5.361,block of the web so let's take the web
181.04,4.96,app we typically have the client side or
183.68,4.72,front-end the server side or back-end
186.0,4.239,the database and everything in between
188.4,4.32,and not all web applications are set up
190.239,4.241,just like this where you have the client
192.72,3.68,side the server side which is the
194.48,3.92,business logic in this case and then the
196.4,3.68,database all living on their own
198.4,3.68,physical machines this is where
200.08,4.079,different tiers in software architecture
202.08,4.56,comes into play a one-tier application
204.159,4.481,will have all of this on a single
206.64,3.679,machine a two-tier application can be
208.64,3.36,split one of two ways with all of the
210.319,3.761,code so the client side and then the
212.0,3.599,server side business logic living on one
214.08,3.6,machine and the database living on a
215.599,3.601,second machine or the client side living
217.68,3.36,on one machine and then the server side
219.2,3.759,business logic and database living on
221.04,3.919,the second machine that's two tier what
222.959,3.441,you're looking at now is three tier with
224.959,3.36,each individual
226.4,3.52,section being in its own machine and
228.319,3.2,finally you have interior which is
229.92,3.44,anything more than a three-tier
231.519,4.08,application this typically takes into
233.36,3.92,consideration the single responsibility
235.599,4.56,principle where each individual
237.28,4.48,component lives on its own machine so if
240.159,4.08,you have five or ten different
241.76,3.92,components in terms of business logic
244.239,3.92,you're gonna have five or ten different
245.68,4.0,machines just to cover this and for this
248.159,3.28,example we're sticking with a three tier
249.68,3.279,application so on the client side as you
251.439,4.481,interact with the web application it'll
252.959,4.8,send an http request to the server the
255.92,3.76,business logic which will then query the
257.759,4.0,database if needed which will respond
259.68,4.16,with that data which then we will
261.759,4.641,transform that data as needed to send an
263.84,4.16,http response back to the client and i
266.4,2.799,will say for all of the well actually
268.0,3.12,that'll be in the comments section
269.199,3.601,saying well actually send the http
271.12,3.359,request to a web server which then sends
272.8,3.52,an os thread to the application server
274.479,3.121,then does all of that and back through
276.32,3.84,actually you're speculating there
277.6,4.72,however by strict definition web server
280.16,3.36,is a subset of an application server so
282.32,3.2,all of that
283.52,4.0,occurs in our server tier right here now
285.52,3.6,let's take youtube as a real world
287.52,2.959,example when you're on youtube.com and
289.12,3.84,you saw this video pop up and you
290.479,4.401,clicked on this video you send an http
292.96,4.64,request from the client side which is
294.88,4.72,what you see to the server side which is
297.6,4.48,what you don't see unless something has
299.6,5.52,gone terribly wrong in order to access
302.08,4.559,the business logic the database and
305.12,3.519,everything that you need in order to
306.639,4.241,populate the webpage that you're on
308.639,4.641,right now which contains the video the
310.88,4.159,description all of the metadata the
313.28,4.72,comment section the recommendation
315.039,4.321,system on your well that side i think
318.0,3.44,everything that you see right now it
319.36,4.96,accesses all of that information and
321.44,4.64,then responds back to the client side
324.32,3.2,with that information
326.08,4.32,and serves it to you basically every
327.52,6.239,website you use youtube facebook twitter
330.4,5.28,your banking app is all client server
333.759,4.321,architecture however there is something
335.68,4.64,that opposes client server architecture
338.08,3.92,and that is known as peer-to-peer
340.32,3.68,architecture there are a small
342.0,4.24,percentage of business businesses that
344.0,3.84,use this and i'll give you some examples
346.24,3.84,but something that you can really wrap
347.84,4.799,your head around is web 3
350.08,5.28,the blockchain peer-to-peer architecture
352.639,4.641,is the base of blockchain technology it
355.36,3.679,is a network of computers also known as
357.28,4.4,nodes that are able to communicate with
359.039,5.041,each other without the need of a central
361.68,3.92,server like that of client server
364.08,3.6,architecture so it rules out the
365.6,3.76,possibility of single point failure
367.68,4.16,which i think i don't know if it was
369.36,4.16,earlier this year or in 2021 when
371.84,4.0,facebook and everything that facebook
373.52,4.08,owned whatsapp instagram went down for a
375.84,4.16,day because their servers failed that is
377.6,3.599,one of the negatives of client server in
380.0,3.36,one of the
381.199,4.56,avoidances or solutions that
383.36,5.119,peer-to-peer provides peer-to-peer
385.759,5.201,technology however is not only used in
388.479,4.641,web 3 and blockchain technology it is
390.96,4.48,that it actually exists currently with
393.12,4.639,some online gaming platforms for example
395.44,4.479,blizzard uses peer-to-peer to download
397.759,5.521,games between users they use this for
399.919,5.521,diablo 3 starcraft 2 and wow but for the
403.28,5.52,vast majority of what the internet is
405.44,5.599,today it is client server architecture
408.8,4.239,so now we have the next level of
411.039,3.6,architecture again these are these are
413.039,3.28,levels created by myself i just wanted
414.639,3.68,to be able to give you architecture that
416.319,4.32,is actually comparable to each other and
418.319,5.041,not just a bunch thrown in your face
420.639,6.081,so this is where monolithic
423.36,5.52,microservices and serverless come into
426.72,4.24,play in a monolithic architecture all
428.88,4.48,the modules will be coded in a single
430.96,4.72,codebase tightly coupled together this
433.36,4.16,is unlike the microservices architecture
435.68,3.44,where every distinct feature of an
437.52,4.0,application may have one or more
439.12,4.479,dedicated microservices powering this is
441.52,4.16,how basically everything used to be
443.599,4.961,built because it's i mean it's simple
445.68,4.56,it's fast you can easily deploy it
448.56,4.16,however there are a lot more negatives
450.24,4.959,than there are positives because
452.72,4.0,it's not scalable it's not reliable
455.199,3.521,there are single points of failure to
456.72,4.16,put in perspective every single time you
458.72,4.879,add a single line of code you would have
460.88,4.319,to redeploy the entire application and
463.599,3.28,not only do you have to redeploy it but
465.199,4.081,if something breaks
466.879,4.961,it breaks the entire application however
469.28,5.44,the answer to all of those problems is
471.84,4.96,solved with microservice architecture
474.72,4.8,this is where you have a collection of
476.8,4.959,services that each serve a unique
479.52,4.88,responsibility every single service is
481.759,4.321,deployed and lives separately from one
484.4,4.16,another and to complete the business
486.08,4.559,logic they can connect to each other as
488.56,4.639,needed or to put it simply
490.639,4.56,it's modular so where you have all of
493.199,3.921,these different aspects of youtube that
495.199,4.4,you can see on your page right now you
497.12,4.96,have a software development team that
499.599,3.681,works on one service the recommendation
502.08,3.28,system and then you have another team
503.28,3.12,that works another service the search
505.36,2.72,function they have another team that
506.4,4.079,works on the comment system so on and so
508.08,5.199,forth if they change one line of code
510.479,4.8,they're only redeploying their service
513.279,4.401,not the entire app and if they break
515.279,3.44,something they are breaking only their
517.68,2.719,service
518.719,4.24,not the entire app and then of course
520.399,5.521,with it being modular you can see just
522.959,5.681,how scalable it is because each service
525.92,4.479,can be scaled independently based on
528.64,3.52,traffic and where there is monolithic
530.399,3.681,architecture and microservice
532.16,4.32,architecture there's also something
534.08,4.0,called serverless architecture also
536.48,4.56,known as serverless service list
538.08,4.72,serverless computing or function as a
541.04,3.12,service it's a software design pattern
542.8,3.44,where our function which is a part of
544.16,4.56,the microservices responsibility is
546.24,5.2,hosted by a third party this is your aws
548.72,4.4,lambda functions your zur functions that
551.44,4.399,never know how to pronounce that in your
553.12,5.279,firebase cloud functions did i explain
555.839,3.921,oh no sure that's weird did i explain
558.399,3.201,that well enough let me give you one
559.76,3.44,more example as if you were online
561.6,3.12,shopping you have a product catalog you
563.2,3.68,have a checkout system and you have a
564.72,4.799,shipping process in a monolithic
566.88,4.72,application all of those are built and
569.519,4.641,deployed as one holistic unit in a
571.6,5.2,microservice application each individual
574.16,4.88,component is broken down into its own
576.8,4.8,service a benefit here is that each
579.04,4.4,individual microservice can have its own
581.6,3.84,language its own libraries and typically
583.44,3.839,have its own database and a serverless
585.44,3.28,application in this instance we're going
587.279,4.56,to be talking about serverless
588.72,5.52,microservices break the microservices
591.839,5.12,down even smaller into their own
594.24,4.88,individual event-driven functions for
596.959,4.481,example the shipping microservice will
599.12,4.8,have multiple functions within and once
601.44,4.079,an order is marked as ready to ship that
603.92,3.599,event could trigger a function that
605.519,4.0,validates the customer a successful
607.519,4.081,validation could trigger another
609.519,4.481,function that generates a shipping label
611.6,4.64,and finally creation of that shipping
614.0,4.64,label could trigger a final function
616.24,4.08,that sends a shipping confirmation email
618.64,4.16,to the customer see they're built with
620.32,4.72,serverless functions which execute small
622.8,5.52,blocks of code with one bucket code
625.04,3.28,triggering the next goodbye
