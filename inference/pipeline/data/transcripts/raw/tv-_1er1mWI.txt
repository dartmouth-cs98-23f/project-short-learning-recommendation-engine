second,duration,transcript
0.08,3.839,when you first become a junior developer
1.92,3.919,your code will look like play-doh snakes
3.919,3.761,but as you progress to senior developer
5.839,3.441,and learn about software design patterns
7.68,3.68,your code will look like the sistine
9.28,3.76,chapel but when you then progress to
11.36,3.279,principal engineer you'll realize that
13.04,3.44,nobody wants to maintain the sistine
14.639,3.521,chapel for a silly website and go back
16.48,3.28,to making play-doh snakes in today's
18.16,3.279,video you'll learn about 10 different
19.76,3.519,software design patterns along with the
21.439,3.84,pros and cons of using them which can be
23.279,3.361,very subjective and controversial one of
25.279,2.961,the most influential books in the
26.64,3.92,history of programming is design
28.24,4.08,patterns by four c plus plus engineers
30.56,3.6,called the gang of four it breaks down
32.32,3.759,23 different approaches to address
34.16,3.6,recurring problems that programmers face
36.079,3.441,which are categorized as creational
37.76,3.52,patterns how objects are created
39.52,3.6,structural patterns how objects relate
41.28,3.759,to each other and behavioral patterns
43.12,3.84,how objects communicate with each other
45.039,3.84,becoming a proficient software engineer
46.96,3.68,is not about memorizing the syntax of a
48.879,4.0,programming language but rather the
50.64,4.0,ability to solve problems with it by the
52.879,3.281,end of this video you'll understand a
54.64,3.2,variety of different patterns for
56.16,3.36,solving problems as they relate to
57.84,3.28,modern app developers before we get
59.52,3.6,started i want to give a big shout out
61.12,3.84,to refactoring.guru they gave me
63.12,3.679,permission to use some of their graphics
64.96,3.28,that explain design patterns better than
66.799,2.961,anything else out there they're based in
68.24,2.96,ukraine and it's seriously one of the
69.76,2.96,coolest programming websites on the
71.2,2.8,internet design patterns are really
72.72,3.12,interesting because they're not just
74.0,3.439,like algorithms that you can copy and
75.84,3.2,paste from stack overflow you actually
77.439,3.281,need to use your brain to implement them
79.04,3.6,it can be tempting to implement them all
80.72,3.68,over the place but when used improperly
82.64,3.6,they can add additional complexity and
84.4,3.12,boilerplate to a codebase the book is
86.24,3.28,not the bible and there are many
87.52,3.84,criticisms of it regardless knowing how
89.52,3.68,to recognize design patterns will help
91.36,3.6,you level up as a programmer the first
93.2,3.599,pattern we'll look at is singleton which
94.96,4.08,is very easy to understand it's a type
96.799,4.241,of object that can only be instantiated
99.04,3.759,once in typescript we might implement a
101.04,3.92,singleton class called settings to
102.799,4.081,represent the global app settings data
104.96,3.6,we'll give it a static instance property
106.88,3.199,and then make its constructor private so
108.56,3.68,that it cannot be instantiated with a
110.079,3.921,new keyword we then create a static git
112.24,3.44,instance method that will check to see
114.0,3.52,if the instance has already been created
115.68,3.84,and if not it will create a new one and
117.52,3.599,that ensures that only one object can be
119.52,2.72,created that's great and all but here's
121.119,3.121,where things become a little more
122.24,4.159,nuanced in javascript we have object
124.24,4.079,literals and also the concept of global
126.399,3.521,data and objects are passed around by
128.319,3.361,reference we get all the same basic
129.92,3.679,characteristics as this pattern by
131.68,3.76,simply creating a global object the
133.599,3.441,pattern itself is really just extra
135.44,3.6,boilerplate that we don't need it's an
137.04,3.52,entirely different story in c plus plus
139.04,3.279,but the moral is to lean on your
140.56,3.6,language's built-in features before
142.319,3.441,implementing a fancy design pattern now
144.16,3.84,let's take a look at the prototype
145.76,4.0,pattern which is just a fancy word for
148.0,3.44,clone if you've done object-oriented
149.76,3.52,programming you should be familiar with
151.44,3.92,inheritance where a class can be
153.28,3.84,extended with a subclass one problem
155.36,3.76,with inheritance is that it can lead to
157.12,3.92,a complex hierarchy of code the
159.12,3.839,prototype pattern is an alternative way
161.04,3.919,to implement inheritance but instead of
162.959,3.681,inheriting functionality from a class it
164.959,3.681,comes from an object that's already been
166.64,3.92,created this creates a flat prototype
168.64,3.92,chain that makes it much easier to share
170.56,3.92,functionality between objects especially
172.56,3.759,in a dynamic language like javascript
174.48,3.839,which supports prototypal inheritance
176.319,4.0,out of the box imagine we have an object
178.319,4.0,named zombie this is our prototype but
180.319,3.84,now we want to create a new object based
182.319,4.241,on it that also has a name we can do
184.159,4.401,that with object create by passing the
186.56,3.92,zombie as the prototype then specify
188.56,3.759,additional properties like name for the
190.48,3.679,new object the interesting thing is that
192.319,4.0,if you log this object you'll only see
194.159,4.08,the name and not the eat brains method
196.319,3.441,however if you try to call that method
198.239,3.36,it will still work that's because
199.76,3.759,javascript will go up the prototype
201.599,3.521,chain until it reaches the root looking
203.519,3.28,for any methods or properties on the
205.12,3.52,parent objects you can always get the
206.799,3.761,prototype from an object by using this
208.64,3.679,proto property however that's not a
210.56,4.16,modern best practice and instead you
212.319,4.321,should use object get prototype of now
214.72,4.159,when it comes to classes in javascript
216.64,4.159,prototype refers to its constructor and
218.879,3.681,that means that we can extend a class
220.799,3.52,with additional functions if we want to
222.56,3.84,however that's also generally considered
224.319,3.361,a bad practice now let's switch gears to
226.4,2.8,the builder pattern imagine you're
227.68,2.96,running a hot dog stand and when a
229.2,2.48,customer places an order they need to
230.64,3.12,tell you everything they want in the
231.68,3.44,sandwich in the constructor that works
233.76,2.88,but it's kind of hard to keep track of
235.12,3.36,all these options and we might want to
236.64,3.679,defer each step to a later point with
238.48,3.759,the builder pattern we create the object
240.319,3.28,step by step using methods rather than
242.239,2.881,the constructor and we could even
243.599,3.521,delegate the building logic to an
245.12,3.839,entirely different class in javascript
247.12,3.839,we'll have each method return this which
248.959,3.521,is a reference to the object instance
250.959,3.441,that allows us to implement method
252.48,3.68,chaining where we instantiate an object
254.4,3.679,then chain methods to it but always get
256.16,3.359,the object as the return value you'll
258.079,3.361,come across this pattern frequently with
259.519,3.841,libraries like jquery but it's gone a
261.44,4.0,bit out of style in recent years another
263.36,3.6,pattern you may come across is factory
265.44,3.92,instead of using the new keyword to
266.96,4.08,instantiate an object you use a function
269.36,3.44,or method to do it for you that may
271.04,3.439,sound trivial but here's a practical
272.8,4.0,example let's imagine we're building a
274.479,3.921,cross-platform app that runs on both ios
276.8,3.6,and android they both have the same
278.4,3.359,interface but in our code we're doing a
280.4,3.12,bunch of conditional checking to
281.759,3.601,determine which button to show that's
283.52,4.0,not very maintainable instead we can
285.36,4.08,create a subclass or function that will
287.52,3.52,determine which object to instantiate
289.44,3.36,now instead of repeating the same logic
291.04,3.2,we use the factory to determine which
292.8,2.88,button should be rendered now we're
294.24,4.16,ready to look at the first structural
295.68,4.4,pattern facade a facade is the face of a
298.4,3.76,building inside that building there's
300.08,3.92,all kinds of shenanigans corruption and
302.16,4.08,complexity that the end user doesn't
304.0,4.479,need to know about a facade is basically
306.24,4.16,just a simplified api to hide other
308.479,3.601,low-level details in your code base
310.4,3.84,let's imagine we have classes for the
312.08,3.839,plumbing system and electrical system
314.24,3.679,and inside of them we have all kinds of
315.919,3.921,complex stuff going on like pressure and
317.919,3.441,voltage the people living in the house
319.84,4.0,don't need access to these low-level
321.36,4.08,details so we create a facade class that
323.84,3.76,contains the low-level systems as
325.44,4.319,dependencies but then simplifies their
327.6,4.159,operation like we might combine all the
329.759,4.241,electrical and plumbing details into a
331.759,4.561,single method so the end user can simply
334.0,3.84,turn them on or off with a single method
336.32,3.28,almost every package that you install
337.84,3.919,with javascript could be considered a
339.6,4.24,facade in some way like jquery is a
341.759,4.081,great example of a facade for the more
343.84,3.52,annoying low-level javascript features
345.84,4.0,the next structural pattern we'll look
347.36,4.16,at is proxy which is just a fancy word
349.84,3.359,for a substitute like in school you
351.52,3.6,might have a substitute teacher to
353.199,3.921,replace the real thing in programming
355.12,3.919,you can replace a target object with a
357.12,3.84,proxy but why would you ever want to do
359.039,4.801,that well a great case study is the
360.96,4.56,reactivity system in vue.js in vue you
363.84,3.76,create data but the framework itself
365.52,4.48,needs a way to intercept that data and
367.6,3.92,update the ui whenever that data changes
370.0,3.36,the way view handles that is by
371.52,4.16,replacing the original object with a
373.36,4.24,proxy a proxy takes the original object
375.68,3.76,as the first argument then a handler as
377.6,4.0,the second argument inside of which we
379.44,4.08,can override methods like get and set
381.6,3.92,which allows us to run code whenever a
383.52,4.08,property is accessed on the object or
385.52,3.84,changed for example inside of set we
387.6,3.76,might tell the framework to re-render
389.36,4.08,then use reflect to update the data on
391.36,4.0,the original object the end user can now
393.44,3.599,work with a proxy just like the original
395.36,3.52,object but it can trigger these side
397.039,3.6,effects behind the scenes proxies are
398.88,3.68,also commonly used when you have a very
400.639,3.68,large object that would be expensive to
402.56,3.6,duplicate in memory and now we're ready
404.319,3.761,to look at some behavioral patterns
406.16,4.0,starting with iterator the iterator
408.08,4.16,pattern allows you to traverse through a
410.16,3.68,collection of objects modern languages
412.24,3.679,already provide abstractions for the
413.84,3.84,iterator pattern like the for loop when
415.919,3.84,you loop over an array of items you're
417.68,3.359,using the iterator pattern but one thing
419.759,3.28,that really chaps my ass about
421.039,3.921,javascript is that there's no built-in
423.039,4.16,range function what i wish i could do is
424.96,3.92,easily iterate 10 times at a certain
427.199,3.921,interval we can actually do that fairly
428.88,4.24,easily by implementing our own iterator
431.12,4.32,pattern in javascript you can do that by
433.12,4.079,defining an object that has a next
435.44,4.24,method on it that function needs to
437.199,4.161,return an object that has a value which
439.68,3.84,would be the current value in the loop
441.36,4.0,and a done property so it knows when to
443.52,3.84,finish iterating in this case we will
445.36,4.64,keep moving on to the next step if the
447.36,4.72,start value is less than the n value but
450.0,4.319,for each iteration we will increment the
452.08,3.679,start value with a step eventually the
454.319,3.361,start will be greater than the end at
455.759,4.241,which point we can return an object with
457.68,4.72,the done property as true and that tells
460.0,4.4,javascript to stop iterating now a cool
462.4,4.079,technique here is that we can add symbol
464.4,4.56,iterator to this object which allows us
466.479,4.241,to use it in a regular for of loop at
468.96,3.359,the end of the day with iteration you
470.72,3.36,start with a collection and then write
472.319,3.681,some code that determines how to get
474.08,3.519,from the beginning to the end it's a
476.0,3.759,pull based system unlike the next
477.599,4.401,pattern we'll look at observer which is
479.759,4.241,a push-based system the observer pattern
482.0,4.08,allows many objects to subscribe to
484.0,4.319,events that are broadcast by another
486.08,4.0,object it's a one-to-many relationship
488.319,3.761,in the real world you might have a radio
490.08,3.839,tower that sends out a signal then a
492.08,3.6,bunch of receivers who listen in at the
493.919,3.441,same time this pattern is used all over
495.68,3.359,the place in app development like in
497.36,3.279,firebase when your data changes on the
499.039,3.361,server all your client apps are
500.639,3.601,subscribed to it and automatically
502.4,3.76,updated with the latest data in our code
504.24,3.92,here i'm going to bring in the rxjs
506.16,4.24,library to simplify the demonstration of
508.16,3.999,this pattern it provides a subject class
510.4,3.759,which is the data that we want to listen
512.159,4.161,to now once we have a subject we can add
514.159,3.12,multiple subscriptions to it the subject
516.32,3.04,will keep track of all these
517.279,4.24,subscriptions and call their callback
519.36,3.679,functions whenever the data changes
521.519,3.281,experiment with this pattern right now
523.039,3.601,by clicking like and subscribe on this
524.8,4.24,video now at some later points we can
526.64,4.24,call the next method to push a new value
529.04,3.44,to the subject whenever that happens
530.88,3.519,every subscription will be notified
532.48,3.76,personally i like to think of this as a
534.399,4.081,loop that unfolds over the dimension of
536.24,4.56,time but now let's move on to the
538.48,4.24,mediator pattern a mediator is like a
540.8,4.24,middleman or broker imagine we have a
542.72,4.0,class for airplane and runway we might
545.04,3.6,have multiple runways and multiple
546.72,4.08,airplanes and somehow we need to figure
548.64,4.24,out if an airplane is clear to land on a
550.8,3.76,given runway currently to do that all
552.88,3.68,these objects would have to communicate
554.56,3.92,with each other we have a many-to-many
556.56,3.76,relationship that's very dangerous both
558.48,4.24,in real life and in programming a
560.32,4.4,solution is to create a mediator like an
562.72,4.08,air traffic controller that sits between
564.72,4.16,the runways and the airplanes to provide
566.8,4.24,coordination and communication here's a
568.88,3.92,more practical example in the express.js
571.04,3.76,web framework there is a middleware
572.8,4.08,system you have incoming requests and
574.8,4.24,outgoing responses middleware sits in
576.88,4.16,the middle by intercepting every request
579.04,4.0,like an airplane and transforms it into
581.04,3.919,the proper format for the response the
583.04,4.16,runway it provides a separation of
584.959,3.841,concerns and eliminates code duplication
587.2,3.52,and that brings us to our tenth and
588.8,3.68,final design pattern state where an
590.72,3.84,object behaves differently based on a
592.48,4.0,finite number of states in your code
594.56,4.0,you've likely used conditional logic or
596.48,3.84,switch statements to handle a bunch of
598.56,4.08,different possibilities based on the
600.32,3.92,state or data in your application code
602.64,3.6,like this generally doesn't scale very
604.24,4.159,well the state pattern allows you to
606.24,4.08,start with one base class then provide
608.399,4.081,it with different functionality based on
610.32,4.16,its internal state the idea is related
612.48,4.0,to finite state machines and libraries
614.48,3.919,like xstate where the goal is to make an
616.48,4.0,object's behavior predictable based on
618.399,3.761,its underlying state in this example we
620.48,3.68,have a human class that will think
622.16,3.76,something different based on its mood
624.16,3.44,currently we're doing that with a switch
625.92,3.84,statement but another way to go about it
627.6,4.56,would be to create a separate class for
629.76,4.24,each possible state inside each class we
632.16,3.679,will have an identical method that
634.0,4.16,behaves differently now in the human
635.839,3.841,class we set the state as a property and
638.16,3.44,whenever that method is called we
639.68,3.52,delegate it to its current state that
641.6,3.28,means whenever the state changes the
643.2,3.6,object will behave in a completely
644.88,3.92,different way but at the same time we
646.8,3.599,don't have to change the api or use a
648.8,3.52,bunch of conditional logic i'm going to
650.399,3.68,keep things simple and wrap it up there
652.32,3.36,but remember there are a bunch of other
654.079,3.921,design patterns out there to learn
655.68,4.159,become a pro member at fireship io to
658.0,3.839,learn how to apply patterns like this in
659.839,5.68,real applications thanks for watching
661.839,3.68,and i will see you in the next one
