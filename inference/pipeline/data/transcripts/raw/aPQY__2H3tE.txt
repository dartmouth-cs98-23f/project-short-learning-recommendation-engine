second,duration,transcript
0.08,3.76,dynamic programming is one of the most
2.08,2.96,powerful algorithmic techniques in
3.84,3.2,computer science
5.04,3.76,the basic premise centers around the
7.04,3.92,idea of solving a problem
8.8,3.04,by first identifying and solving
10.96,2.559,subproblems
11.84,3.36,and then bringing these sub-problems
13.519,3.121,together in some manner to solve the
15.2,3.68,larger problem
16.64,3.52,not surprisingly this process is easier
18.88,3.68,said than done
20.16,4.24,in fact dynamic programming problems can
22.56,2.879,be notoriously challenging to wrap your
24.4,3.44,head around
25.439,4.401,in this video i'll walk you through 5
27.84,3.439,steps that you can use to help tackle
29.84,3.2,dynamic programming problems
31.279,4.241,and show you how they work in the
33.04,4.0,context of two specific problems
35.52,3.68,the first problem is a pretty
37.04,4.56,fundamental one while the second one is
39.2,4.8,a more challenging extension
41.6,4.4,and at the end of this video we'll have
44.0,4.16,a discussion of general approaches to
46.0,3.2,dynamic programming beyond the examples
48.16,11.68,in this video
49.2,10.64,let's get started
61.359,4.641,the first example we'll look at is the
63.28,4.879,longest increasing subsequence problem
66.0,4.32,let's say you're given a sequence of n
68.159,5.201,elements and you want to find the length
70.32,4.72,of the longest increasing subsequence an
73.36,2.88,increasing subsequence is just a
75.04,3.52,sequence of elements
76.24,3.44,where each subsequent element has both a
78.56,3.12,larger value and
79.68,3.68,index than the previous element here are
81.68,2.079,some examples to clarify what i mean
83.36,2.64,here
83.759,4.161,given the following sequence the longest
86.0,4.72,increasing subsequence is 1
87.92,3.36,followed by 2 followed by 5 with a total
90.72,3.759,length
91.28,5.44,of 3. now that the problem is more clear
94.479,4.241,take a second to see if you can find the
96.72,4.0,longest increasing subsequence and its
98.72,4.32,respective length for the following
100.72,4.48,sequence
103.04,3.119,the correct subsequence starts at 2
105.2,4.32,followed by 3
106.159,5.041,6 and 9 with a total length of 4.
109.52,3.68,now one important note for this problem
111.2,4.0,is that to keep things simple for now
113.2,3.599,we will focus on finding the length of
115.2,2.879,the sequence rather than finding the
116.799,3.041,sequence itself
118.079,4.0,the first step in solving dynamic
119.84,3.84,programming problems is to find a way to
122.079,3.36,visualize examples
123.68,3.68,visualization is a great way to see
125.439,3.68,connections and underlying patterns in
127.36,3.2,the problem that can later be relevant
129.119,3.361,to the solution
130.56,4.08,when solving this particular problem we
132.48,3.119,clearly have some restrictions on valid
134.64,2.72,sequences
135.599,3.601,so it makes sense to find a way to
137.36,4.32,diagram out what makes
139.2,4.72,a valid sequence a nice model that shows
141.68,5.68,up all the time in dynamic programming
143.92,5.6,is the directed acyclic graph imagine
147.36,2.959,each element of the sequence is a node
149.52,2.96,in a graph
150.319,3.761,and we construct a directed edge from
152.48,3.759,one node to another
154.08,3.28,if the node on the right contains a
156.239,3.121,larger value
157.36,3.84,here's what the directed acyclic graph
159.36,3.599,representation looks like for this
161.2,4.08,particular input sequence
162.959,4.481,what's nice about this representation is
165.28,4.8,that an increasing subsequence is just
167.44,5.76,another path in the graph
170.08,4.08,in fact going one step deeper the length
173.2,3.6,of the longest
174.16,3.12,increasing subsequence corresponds to a
176.8,2.56,length
177.28,3.12,of the longest path in this directed
179.36,3.28,acyclic graph
180.4,3.28,plus one since we are technically
182.64,2.879,counting nodes
183.68,3.199,solving this particular problem might be
185.519,3.841,a little bit more clear
186.879,4.161,and sometimes this shift in perspective
189.36,3.28,is the key to making challenging
191.04,3.44,problems more approachable
192.64,3.519,the next step for solving a dynamic
194.48,4.399,programming problem is to find an
196.159,4.641,appropriate sub problem a sub problem is
198.879,3.28,basically a simpler version of our
200.8,3.359,overall problem
202.159,4.08,finding subproblems can be tricky but
204.159,2.8,let's focus on what we know about this
206.239,2.72,problem
206.959,4.56,we know the longest increasing
208.959,3.441,subsequence is going to be a particular
211.519,3.681,subset
212.4,4.559,of our initial sequence one way to
215.2,2.64,specify this subset is through the
216.959,3.681,starting point
217.84,4.56,and the ending point every increasing
220.64,3.2,subsequence no matter how long
222.4,3.199,will have a starting and ending point
223.84,3.679,within the original sequence
225.599,3.441,so let's modify one of these variables
227.519,2.8,to create a sub-problem
229.04,3.04,turns out that you can solve this
230.319,4.081,particular problem with either choice
232.08,4.079,but i personally find focusing on the
234.4,4.64,ending point of a subsequence
236.159,5.121,as a little bit more intuitive let's
239.04,5.44,define a sub problem for the sequence as
241.28,5.28,lis at index k which would mean
244.48,4.0,the longest increasing subsequence
246.56,5.12,ending at index k
248.48,4.8,for example the lis ending at 3 would be
251.68,4.559,the sequence starting at 1
253.28,5.28,followed by 2 which has a length of 2.
256.239,4.081,remember that when i am referring to lis
258.56,3.359,in this particular problem it is
260.32,4.24,specifically with respect
261.919,4.801,to the length of the sequence okay so
264.56,3.68,now that we've identified one possible
266.72,3.68,subproblem the third step
268.24,3.519,requires finding relationships among
270.4,3.44,sub-problems
271.759,3.921,it often helps to ask yourself questions
273.84,3.6,in this phase for example suppose you
275.68,3.76,want to solve the sub-problem of finding
277.44,3.84,the longest increasing subsequence
279.44,3.759,ending at index 4.
281.28,3.919,what subproblems are necessary to solve
283.199,3.521,this well the nice thing about this
285.199,3.361,graphical visualization
286.72,4.0,is that it makes it quite clear what sub
288.56,3.919,problems we need one path through index
290.72,3.44,4 must go through index 0
292.479,3.601,so we will need to know the length of
294.16,5.68,the longest increasing subsequence
296.08,6.08,ending at index 0 which happens to be 1.
299.84,3.919,another path comes through index 1 so
302.16,4.0,we'll need that subproblem as well
303.759,3.601,which also has length 1. the final
306.16,3.68,possible path and the
307.36,4.559,index 4 goes to index three and the
309.84,3.04,longest increasing subsequence ending at
311.919,3.28,index three has
312.88,4.48,length two now the nice relationship
315.199,4.081,here is that the length of the longest
317.36,3.119,increasing subsequence is just going to
319.28,3.359,be one plus
320.479,3.681,the max over all the necessary sub
322.639,4.321,problems which ends up
324.16,4.24,being 3. and this should intuitively
326.96,3.76,make sense right
328.4,4.639,if i want to find the longest increasing
330.72,4.56,subsequence ending at index 4
333.039,4.481,it does make sense that i would just add
335.28,4.0,1 to the longest increasing subsequence
337.52,4.72,over all subsequences
339.28,4.24,that eventually arrive at index four so
342.24,3.04,once you've found a reasonable
343.52,3.36,relationship among subproblems
345.28,3.52,we want to then generalize this
346.88,2.48,relationship let's look at our other
348.8,2.48,example
349.36,3.76,and see if we can come up with a similar
351.28,4.88,process to solve the longest increasing
353.12,5.12,subsequence ending at index 5.
356.16,4.64,the key idea here is that we're going to
358.24,5.84,choose subproblems ending at index k
360.8,4.72,if and only if k is less than 5 and the
364.08,4.16,value at index k
365.52,4.56,is less than the value at index five
368.24,3.92,seeing this relationship in action
370.08,4.16,we start at k equals zero and since the
372.16,3.52,value at index zero is less than six
374.24,3.84,we need to know the answers to this
375.68,3.6,sub-problem and we continue to go
378.08,3.52,through all possible k
379.28,4.4,values less than 5 and include sub
381.6,4.48,problems that satisfy the constraints
383.68,4.0,laid out by the problem
386.08,3.119,and in reality there's nothing special
387.68,4.0,about index 5.
389.199,4.321,this applies for any n so the general
391.68,2.32,relationship for finding the solution to
393.52,2.239,a sub
394.0,3.6,problem of the longest increasing
395.759,5.44,subsequence ending at index
397.6,6.08,n is just one plus the max over all k
401.199,3.12,that is less than n with values at index
403.68,4.0,k
404.319,4.88,less than values at the index n
407.68,3.68,now we are ready for implementation
409.199,3.681,which is the final step
411.36,3.6,implementing a dynamic programming
412.88,4.56,solution is just a matter of solving
414.96,4.48,subproblems in the appropriate order
417.44,3.84,what's most important is that before
419.44,3.52,solving a particular subproblem
421.28,3.359,all the necessary prerequisite
422.96,3.28,subproblems have been solved
424.639,3.441,in this problem the order is actually
426.24,3.28,fairly straightforward we have to solve
428.08,3.36,the sub problems from left
429.52,3.44,to right so let's now implement a
431.44,3.199,function
432.96,4.239,let's keep track of the lengths with the
434.639,4.801,list we can initialize all the lengths
437.199,3.84,as one since every increasing
439.44,4.64,subsequence will have at least
441.039,5.041,one element then for every index from
444.08,3.92,one to the length of the input list
446.08,3.92,we will first find the necessary
448.0,3.199,sub-problems and then we update
450.0,4.24,the length according to the
451.199,4.72,generalization that we have specified
454.24,3.679,and then at the end we return the
455.919,4.081,maximum length over the entire list of
457.919,3.761,lengths that we have just updated
460.0,3.44,there are many ways to implement this
461.68,2.72,function so don't get too bogged down in
463.44,2.879,the details
464.4,4.079,the important thing to remember here is
466.319,3.761,the thought process we use to identify
468.479,3.28,and solve the sub problems in the right
470.08,3.36,order
471.759,3.921,there's one last important question we
473.44,4.08,should address everything we have done
475.68,4.0,so far has been specifically with
477.52,4.079,respect to finding the length of the
479.68,3.519,longest increasing subsequence
481.599,3.201,but how do we actually find the
483.199,3.44,underlying sequence
484.8,4.0,the key idea here is actually fairly
486.639,3.521,simple all we have to do is keep track
488.8,3.839,of the previous indices
490.16,4.56,for a particular sub problem more
492.639,4.641,specifically if i solve the longest
494.72,4.479,increasing subsequence ending at index i
497.28,3.759,sub problem using the value of the
499.199,4.641,longest increasing subsequence at
501.039,3.521,index j i can say that the previous
503.84,3.759,index of
504.56,4.0,index i is index j let's look at a
507.599,3.28,specific example
508.56,4.64,for some clarification in this sequence
510.879,4.241,the previous index of index 0 can be
513.2,3.279,labeled as negative 1 since there is no
515.12,4.0,previous sequence value
516.479,3.92,that leads to index 0. same can be said
519.12,3.919,about the previous index
520.399,4.241,of index 1. for index 2 the previous
523.039,3.681,index is either index 0
524.64,3.92,or index 1 and it doesn't really matter
526.72,3.36,which one we choose since they both have
528.56,3.6,the same length values
530.08,3.439,for the previous index at index 3
532.16,4.08,there's only one choice
533.519,3.361,index one finally index four actually
536.24,2.24,only has
536.88,3.68,one choice because the sub problem
538.48,3.12,that's used to calculate the length at
540.56,3.279,index four
541.6,3.76,is the longest increasing subsequence
543.839,4.0,ending at index three
545.36,3.44,so the previous index is subsequently
547.839,2.481,also three
548.8,3.36,this type of pattern with tracking
550.32,3.44,previous sub problems is a common trick
552.16,3.2,used to solve dynamic programming
553.76,3.12,problems
555.36,3.76,let's now take a look at a more
556.88,4.16,challenging problem here's the problem
559.12,3.68,you're given n boxes each with the
561.04,3.28,length width and height
562.8,3.44,your goal is to find the height of the
564.32,4.16,tallest possible stack of boxes
566.24,4.0,with the constraint that a box can only
568.48,4.56,be stacked on top of another
570.24,4.48,if its length and width are both smaller
573.04,2.64,another assumption that we will make to
574.72,3.52,simplify things
575.68,5.599,is that boxes cannot be rotated at any
578.24,4.8,point during the process of stacking
581.279,3.361,so to make this more clear let's take a
583.04,3.28,look at a couple examples
584.64,4.08,given the following set of three boxes
586.32,4.48,the answer to this problem is six
588.72,4.239,the tallest possible stack is the green
590.8,4.159,box on top of the blue box
592.959,4.081,notice that we can stack the red and
594.959,4.081,green boxes on top of one another since
597.04,3.359,it does not satisfy the constraint given
599.04,3.68,in the problem
600.399,3.601,now as an exercise given the following
602.72,2.88,set of six boxes
604.0,3.6,see if you can figure out the solution
605.6,3.44,for this input i recommend pausing the
607.6,2.88,video here and seeing if you can figure
609.04,3.2,out the solution
610.48,3.44,okay so the solution in this case
612.24,2.4,actually ends up being the following
613.92,3.12,stack
614.64,3.36,with the red box at the bottom orange
617.04,3.6,box in the middle
618.0,3.76,and purple box on top we can get a total
620.64,2.96,height of seven
621.76,3.68,which is the best we can do make sure
623.6,3.679,you take a second to verify that this
625.44,4.88,is indeed the only solution to this
627.279,4.481,problem for the given input
630.32,3.36,all right let's get started on trying to
631.76,4.48,solve this problem the first step
633.68,4.159,as before is to visualize examples a lot
636.24,2.24,of times in dynamic programming type
637.839,2.481,problems
638.48,3.359,there can be a lot of information thrown
640.32,3.68,at you and it's sometimes helpful to
641.839,2.721,focus on one aspect of the problem at a
644.0,2.32,time
644.56,3.279,when solving a problem like this it
646.32,3.6,might help to first visualize the
647.839,3.201,particular constraint given for stacking
649.92,2.8,boxes
651.04,3.52,after all before we even figure out
652.72,3.92,what's the tallest possible stack
654.56,4.08,it makes sense to first identify which
656.64,3.12,boxes are able to be stacked on top of
658.64,2.96,one another
659.76,3.04,once again the concept of directed
661.6,3.2,acyclic graphs
662.8,4.479,is really helpful here for visualization
664.8,4.96,purposes let's connect a directed edge
667.279,4.881,between two boxes if the box on the left
669.76,3.199,can be stacked on top of the box on the
672.16,2.4,right
672.959,3.521,here's what the graph ends up looking
674.56,3.92,like if we apply the constraints between
676.48,3.28,all pairs of boxes
678.48,3.44,now the nice thing about this
679.76,4.0,representation is paths in this directed
681.92,2.56,acyclic graph have a nice intuitive
683.76,2.88,meaning
684.48,3.84,every path in the graph corresponds to a
686.64,3.6,stack of boxes
688.32,4.72,now the goal is just to find the path
690.24,4.159,that gives the greatest height
693.04,3.28,so now that we have a good way of
694.399,4.241,visualizing the problem our next step is
696.32,4.24,to figure out an appropriate sub-problem
698.64,3.759,this is another reason i love looking at
700.56,3.92,directed acyclic representations of
702.399,4.481,dynamic programming problems
704.48,3.76,if our final goal is to find the path
706.88,3.84,with the tallest stack
708.24,3.52,it makes sense that partial paths should
710.72,3.2,be a reasonable sub
711.76,3.759,problem what does a partial path
713.92,4.08,represent
715.519,3.281,a path ending at a particular box or
718.0,2.88,partial path
718.8,4.8,essentially means a stack where we force
720.88,4.959,that box to be the base of the stack
723.6,3.919,therefore our sub-problem that naturally
725.839,3.761,arises from this idea
727.519,4.56,is to find the best possible height of a
729.6,4.16,stack of boxes with a given box forced
732.079,3.521,to be at the bottom
733.76,3.68,this will allow us to find optimal
735.6,3.84,partial paths in this graph which will
737.44,2.8,then build into the eventual optimal
739.44,2.48,path
740.24,3.76,here are some examples of instances of
741.92,4.159,these subproblems the subproblem in
744.0,4.24,which the orange box is the base
746.079,3.041,has a stack with a maximum height of
748.24,3.599,four
749.12,4.399,another example is a sub problem ending
751.839,2.8,at the yellow box in which the best
753.519,4.0,possible height
754.639,5.041,is six there are actually two different
757.519,4.401,sets of stacks with heights of six
759.68,5.279,the easiest one to see is the green box
761.92,4.64,on top of the yellow box
764.959,3.521,and if we look at the sub problem that
766.56,2.8,ends with the red box at the bottom the
768.48,3.12,optimal height
769.36,3.279,is seven which is also the tallest
771.6,3.44,possible stack
772.639,4.0,for the set of boxes we've seen take a
775.04,2.479,second to make sure the formulation of
776.639,4.241,the sub problem
777.519,3.361,and how it works makes sense
781.04,3.52,the next step from here is to find
782.639,3.521,relationships among subproblems
784.56,3.279,as we have done before let's take a
786.16,4.799,particular sub problem and ask
787.839,4.8,what sub problems are needed to solve it
790.959,3.521,for example if we want to find the
792.639,3.601,optimal height of a stack of boxes
794.48,4.479,ending at the red box we have three
796.24,4.399,boxes that directly lead to the red box
798.959,3.68,so the sub problems that are necessary
800.639,3.121,are the optimal stack height ending at
802.639,3.44,the orange box
803.76,4.879,which we already saw was for the optimal
806.079,5.2,height of stacks ending at the blue box
808.639,4.161,which ended up being three and lastly
811.279,3.761,the optimal stack
812.8,3.92,ending at the purple box which happens
815.04,4.64,to only be 2 since no
816.72,4.4,other box can be stacked on top of it
819.68,3.2,the next question is then
821.12,4.24,if we know the answers to these
822.88,4.639,subproblems how do we get the solution
825.36,4.56,to the optimal height of stacks with the
827.519,3.76,red box as the bottom
829.92,3.039,and the answer to this is actually
831.279,4.0,fairly intuitive we
832.959,3.841,simply add the height of the red box to
835.279,4.481,the maximum height
836.8,4.719,of all the necessary sub problems what's
839.76,3.04,going on here is that we are taking our
841.519,3.521,current sub problem
842.8,3.039,finding all the necessary prerequisite
845.04,2.799,subproblems
845.839,3.921,picking the best one out of those and
847.839,3.521,adding the height of the current box to
849.76,4.4,the best height so far
851.36,5.2,let's generalize this relationship given
854.16,4.64,a new set of boxes let's ask ourselves
856.56,4.0,how do we solve the optimal height of a
858.8,4.56,stack with the blue box
860.56,3.12,as the base there are two steps involved
863.36,2.24,here
863.68,3.68,we first have to find the set of boxes
865.6,2.72,that can actually be stacked above the
867.36,3.44,blue box
868.32,4.0,and then the second step involves adding
870.8,3.839,the height of the blue box
872.32,3.6,to the tallest stack among all sub
874.639,3.041,problems
875.92,4.32,we can use this relationship to now
877.68,4.32,solve the sub problems one by one
880.24,3.68,the last piece of the puzzle involves
882.0,3.199,the order to solve the sub problems
883.92,3.039,order does matter
885.199,3.601,for example if you want to solve the sub
886.959,3.761,problem ending at the red box
888.8,4.64,we must first have the solution to the
890.72,4.72,sub problem ending at the orange box
893.44,4.0,so the next question is then how do we
895.44,4.48,ensure a correct ordering
897.44,3.68,if boxes are given to us in a completely
899.92,2.96,random order
901.12,3.519,well we know that the boxes that can be
902.88,3.84,stacked on top of each other are
904.639,3.281,entirely dependent on the length and
906.72,3.119,width of the boxes
907.92,4.32,with larger lengths and widths generally
909.839,3.601,being able to have more boxes stacked on
912.24,3.12,top of them
913.44,3.759,therefore a natural way to ensure we
915.36,2.64,solve sub problems in the correct order
917.199,4.88,is to first
918.0,5.839,sort boxes by length or width
922.079,4.0,with this final piece in place we are
923.839,4.481,now ready to implement the solution
926.079,3.68,given a list of boxes we will first sort
928.32,3.04,the boxes by their length
929.759,3.44,just so we are clear it doesn't matter
931.36,3.039,if we sort them by length or width
933.199,2.961,either one works
934.399,3.44,then to organize a mapping between
936.16,3.76,subproblems and their respective heights
937.839,4.0,we will construct a dictionary that maps
939.92,2.719,each box to the tallest stack height
941.839,3.281,possible
942.639,4.241,with that box as the base of the stack
945.12,4.0,we can initialize this dictionary with
946.88,4.8,each box mapped to its own height
949.12,4.399,then we iterate through indices from 1
951.68,4.079,to the number of boxes
953.519,4.24,select a specific box and then find the
955.759,3.601,set of boxes that can be stacked above
957.759,3.361,the current box
959.36,3.599,we can define a helper function can be
961.12,3.279,stacked which will essentially do a
962.959,2.56,quick check based on the given
964.399,2.8,constraint
965.519,3.76,now following the general relationship
967.199,3.921,that we have defined the tallest stack
969.279,2.721,with the current box as the base will be
971.12,3.12,the sum
972.0,3.44,of the current box height with the
974.24,3.92,maximum height
975.44,4.399,over the set of identified sub-problems
978.16,3.44,after iterating through and solving all
979.839,4.0,the sub-problems the tallest stack
981.6,4.56,is simply the maximum height found
983.839,4.081,amongst all sub-problems
986.16,3.28,again this is just one of the many ways
987.92,3.279,to solve the problem
989.44,3.6,the code for this problem has a lot of
991.199,3.601,parts so it's worth breaking it down to
993.04,3.76,see how it really works
994.8,3.039,given the example of boxes we've already
996.8,3.76,seen many times
997.839,4.641,we first sort the boxes by the length
1000.56,4.0,giving us the following order
1002.48,3.2,we then define the dictionary mapping
1004.56,3.199,boxes to heights
1005.68,3.599,which are currently set to each box's
1007.759,4.08,own height
1009.279,3.521,now starting from index 1 we start with
1011.839,2.721,the sub problem
1012.8,4.08,with the purple box as the base of the
1014.56,4.48,stack it's pretty clear to us that there
1016.88,3.84,are no valid boxes that can be stacked
1019.04,4.96,on top of the purple box
1020.72,5.68,so the set of sub problems s is empty
1024.0,3.839,and therefore the best height of the sub
1026.4,3.6,problem stays at 2
1027.839,3.2,containing only the height of the purple
1030.0,4.4,box
1031.039,6.64,we now move index i to equal 2
1034.4,5.519,which corresponds to the orange box
1037.679,3.28,now we go through all the boxes before
1039.919,3.76,the orange box
1040.959,4.88,in our sorted list and find only one box
1043.679,3.041,that can be stacked on top of the orange
1045.839,2.801,box
1046.72,3.12,therefore the answer to this sub problem
1048.64,3.2,for the tallest stack
1049.84,4.24,that can be created with the orange box
1051.84,2.959,as the base is the height of the orange
1054.08,3.12,box
1054.799,4.161,plus the height of the purple box which
1057.2,4.64,ends up being four
1058.96,5.52,moving to i equals three we now look at
1061.84,5.28,the sub problem ending at the blue box
1064.48,4.8,once again the only valid box that can
1067.12,4.08,be stacked on top of the blue box
1069.28,3.92,is the purple box so the height of the
1071.2,2.56,tallest stack with the blue box as the
1073.2,2.88,base
1073.76,3.919,is three things get a little more
1076.08,3.52,interesting when we move to the sub
1077.679,3.521,problem with the yellow box forced to be
1079.6,3.28,the base
1081.2,3.44,now the possible boxes that can be
1082.88,2.48,stacked on top of the yellow box are the
1084.64,2.96,green box
1085.36,3.12,the purple box the orange box and the
1087.6,2.8,blue box
1088.48,3.04,the best height of all these sub
1090.4,3.44,problems is four
1091.52,4.64,so the height of the tallest possible
1093.84,5.52,stack with the yellow box as the base
1096.16,5.84,is six and finally moving to the last
1099.36,3.76,index of i equals five which corresponds
1102.0,4.0,to the red box
1103.12,3.84,the set of valid subproblems consists of
1106.0,4.08,the purple box
1106.96,5.36,orange box and the blue box the best
1110.08,4.24,possible height from these sub problems
1112.32,3.68,comes from the stack ending at the
1114.32,3.76,orange box with the height
1116.0,4.0,of four so the answer to the sub problem
1118.08,3.12,involving the red box ends up being the
1120.0,4.24,height of the red box
1121.2,4.8,plus 4 which is 7. at this point we have
1124.24,2.799,finished iterating so we return the
1126.0,3.44,maximum height
1127.039,3.201,over all of subproblems and that ends up
1129.44,2.8,being 7
1130.24,4.559,so that is the final solution for this
1132.24,4.16,input this problem at first looks pretty
1134.799,3.601,challenging but following the steps
1136.4,3.2,greatly helped us narrow our focus and
1138.4,2.8,simplify the problem
1139.6,3.6,and that's what ends up happening in a
1141.2,4.0,lot of dynamic programming problems
1143.2,3.12,in many ways the hardest part of dynamic
1145.2,3.04,programming problems is
1146.32,3.68,organizing the given information in the
1148.24,4.4,right way to identify the
1150.0,4.08,correct subproblem that's the part that
1152.64,3.68,requires a lot of practice and
1154.08,4.4,creativity and problem solving
1156.32,4.08,there is no doubt that finding the right
1158.48,3.76,subproblem can be the most challenging
1160.4,3.6,aspect of dynamic programming
1162.24,3.52,i want to take a second to look at some
1164.0,2.4,of the most common subproblems you will
1165.76,2.88,encounter
1166.4,4.48,while solving these types of problems
1168.64,4.32,the most common type is as follows
1170.88,3.52,you're given an input sequence of length
1172.96,3.44,n and the subproblem
1174.4,3.12,involves an ordered subsequence of
1176.4,3.519,length i
1177.52,3.92,as shown here this is exactly what was
1179.919,3.201,the case in the longest increasing
1181.44,3.28,subsequence problem
1183.12,3.28,another similar version of a problem
1184.72,5.36,like this that you might encounter
1186.4,5.92,is a sequence of length n but given in a
1190.08,3.92,random order where we first have to sort
1192.32,3.68,the sequence in the right order
1194.0,3.52,and then the sub problem is an eye
1196.0,3.2,length subsequence
1197.52,3.519,this is exactly the type of sub problem
1199.2,2.959,we encountered in the box stacking
1201.039,2.401,problem
1202.159,3.201,some other examples of common
1203.44,2.56,subproblems may involve the case where
1205.36,3.36,you're given
1206.0,4.799,two sequences and the subprompt involves
1208.72,3.6,the appropriate subsequences of each of
1210.799,2.961,these sequences
1212.32,2.96,this is essentially a slightly more
1213.76,2.399,complex version of what we've seen
1215.28,2.639,already
1216.159,3.52,a more unique type of subproblem may
1217.919,2.081,involve a sequence of inputs where the
1219.679,2.721,right
1220.0,3.679,sub-problem is actually to expand from
1222.4,3.519,the middle of the sequence
1223.679,4.081,outwards these types of sub-problems are
1225.919,3.841,not as common as the other examples but
1227.76,3.76,they are worth noting
1229.76,3.919,another important subproblem structure
1231.52,4.0,to be aware of is when you're given a
1233.679,2.48,two-dimensional array or matrix as an
1235.52,2.48,input
1236.159,3.281,and the most common sub-problem for this
1238.0,4.64,type of input is
1239.44,5.84,basically a sub-matrix of some dimension
1242.64,4.399,less than the input dimensions these are
1245.28,3.44,the most common sub-problems i've seen
1247.039,3.12,in my experience and hopefully that will
1248.72,1.92,give you some direction when you're
1250.159,2.321,stuck
1250.64,3.44,in a particularly challenging dynamic
1252.48,2.16,programming problem at the end of the
1254.08,2.64,day though
1254.64,4.08,nothing beats practicing experience the
1256.72,3.04,best way to improve your dynamic
1258.72,3.04,programming skills
1259.76,5.2,is through a lot of diligent work with
1261.76,3.2,problems and examples
1265.36,3.679,that's all for this video and thanks for
1267.039,3.76,watching if you enjoyed the content
1269.039,3.601,please hit the like button so that this
1270.799,2.721,content will be recommended to more
1272.64,2.48,people
1273.52,3.039,if you want to see more content like
1275.12,2.64,this please don't forget to hit the
1276.559,2.961,subscribe button
1277.76,3.52,and if you want to more directly support
1279.52,3.519,the work of this channel please check
1281.28,2.8,out the patreon page linked in the
1283.039,5.201,description below
1284.08,4.16,i'll see you on the next video
