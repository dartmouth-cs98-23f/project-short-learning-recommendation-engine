second,duration,transcript
0.79,2.4,"The following content is
provided under a Creative"
3.19,1.54,Commons license.
4.73,2.3,"Your support will help
MIT OpenCourseWare"
7.03,4.36,"continue to offer high quality
educational resources for free."
11.39,2.6,"To make a donation or
view additional materials"
13.99,3.89,"from hundreds of MIT courses,
visit MIT OpenCourseWare"
17.88,0.96,at ocw.mit.edu.
30.42,1.25,PROFESSOR: All right everyone.
31.67,2.28,Let's get started.
33.95,3.99,"So today's lecture and
Wednesday's lecture,"
37.94,2.01,"we're going to talk
about this thing called"
39.95,1.48,object oriented programming.
41.43,1.79,"And if you haven't
programmed before,"
43.22,3.33,"I think this is a fairly
tough concept to grasp."
46.55,3.18,"But hopefully with
many, many examples"
49.73,5.79,"and just by looking at the
code available from lectures,"
55.52,2.69,"you'll hopefully get
the hang of it quickly."
58.21,4.56,"So let's talk a little
bit about objects."
62.77,3.18,"And we've seen objects
in Python so far."
65.95,3.21,"Objects are basically
data in Python."
69.16,3.11,"So every object that we've
seen has a certain type."
72.27,1.915,"OK, that we know."
74.185,1.965,"Behind the scenes,
though, every object"
76.15,2.38,has these two additional things.
78.53,1.75,One is some data representation.
80.28,5.77,"So how Python represents the
object just behind the scenes"
86.05,1.53,"and what are different
ways that you"
87.58,3.42,can interact with the object.
91.0,4.37,"So for example, every one of
these is a different object."
95.37,3.6,"For example, this
is the number 1,234."
98.97,3.15,"It's a specific object
that is of type integer."
102.12,3.82,"The number 5 is a different
object that's of type integer"
105.94,0.98,and so on.
106.92,0.96,We've seen floats.
107.88,1.11,We've seen strings.
108.99,1.74,We've seen lists.
110.73,3.85,"Lists and dictionaries are
more complicated objects."
114.58,0.7,Object types.
115.28,1.31,Sorry.
116.59,2.67,"But every object has a
type, some sort of way"
119.26,3.909,"that it's represented
in Python and some ways"
123.169,1.291,that we can interact with them.
127.02,0.5,OK.
127.52,2.67,"So the idea behind object
oriented programming"
130.19,2.91,"is, first of all, everything
in Python is an object."
133.1,2.56,"We've said that before
and in this lecture"
135.66,2.03,"I think we'll really
get at what that means."
137.69,3.63,"So we've seen strings,
integers, dictionaries, lists."
141.32,1.38,Those are all objects.
142.7,1.8,"When we did functions,
we saw that we"
144.5,3.12,"could pass as a parameter
another function."
147.62,2.12,"So functions were also
objects in Python."
149.74,3.779,"So literally everything
in Python is an object."
153.519,2.291,"So what are the kinds of
things we can do with objects?"
155.81,3.42,"Well, once you have a type,
you can create a new object"
159.23,1.314,that is of some type.
160.544,1.416,"And you can create
as many objects"
161.96,2.91,"as you'd like of that
particular type, right?"
164.87,2.07,An integer 5 and integer 7.
166.94,3.21,Those all work in a program.
170.15,2.49,"Once you've created
these new objects,"
172.64,1.65,you can manipulate them.
174.29,2.28,"So for a list, for example,
you can append an item"
176.57,2.85,"to the end of the list,
you can delete an item,"
179.42,4.56,"remove it, concatenate
two lists together."
183.98,3.041,"So that's ways that you
can interact with objects."
187.021,2.249,"And the last thing you can
do is you can destroy them."
189.27,1.73,"So and with lists,
we saw explicitly"
191.0,2.976,"that you can delete
elements from a list,"
193.976,1.374,"or you can just
forget about them"
195.35,4.03,"by reassigning a variable
to another value,"
199.38,2.54,"and then at some
point, Python will"
201.92,2.77,"collect all of these dead
objects and reclaim the memory."
207.81,3.98,"So let's continue
exploring what objects are."
211.79,2.53,"So let's say I have these
two separate objects."
214.32,1.13,One is a blue car.
215.45,1.5,One is a pink car.
216.95,2.79,"So objects are really
data abstractions."
219.74,3.31,"So these two cars can be
created by the same blueprint."
223.05,0.62,OK?
223.67,3.73,"This is a blueprint for a car
and if an object is a data"
227.4,2.24,"abstraction, there's two
things that this abstraction"
229.64,1.3,is going to capture.
230.94,3.26,"The first is some sort
of representation."
234.2,3.11,"What is going to represent the
car, what data represents a car"
237.31,1.23,object?
238.54,1.86,"And the second is
what are ways that we"
240.4,2.68,can interact with the object?
243.08,2.93,"So if we think about
a car blueprint,"
246.01,2.37,"some general
representation for a car"
248.38,2.52,"could be the number of wheels
it has, the number of doors"
250.9,2.55,"it has, maybe its
length, maybe its height,"
253.45,6.129,"so this is all part of what
data represents the car."
259.579,1.57,OK?
261.149,1.681,"The interface for
the car is what"
262.83,1.75,"are ways that you
can interact with it."
264.58,3.535,"So for example, you
could paint a car, right?"
268.115,2.605,So you could change its color.
270.72,3.29,"You could have the
car make a noise"
274.01,2.33,"and different cars might
make different noises."
276.34,1.72,"Or you can drive the car, right?"
278.06,2.55,"So these are all ways that
you can interact with the car."
280.61,2.52,"Whereas the representation
are what makes up the car."
283.13,5.46,"What data abstractions
make up the car."
288.59,5.04,"Let's bring it a little closer
to home by looking at a list."
293.63,3.36,"So we have this data
type of list, right?"
296.99,3.78,We've worked with lists before.
300.77,4.26,"The list with elements 1, 2, 3,
and 4 is a very specific object"
305.03,2.7,that is of type list.
307.73,2.2,"Again, we think about it
in terms of two things."
309.93,3.57,"One is what is the data
representation of the list?"
313.5,2.837,"So behind the scenes how
does Python see lists?"
316.337,2.083,"And the second is, how do
you interact with lists?"
318.42,1.958,"So what are ways that
you can manipulate a list"
320.378,2.882,object once it's created?
323.26,3.1,"So behind the scenes
you have a list, L,"
326.36,2.67,"which is going to be made up
of essentially two things."
329.03,5.25,"One is going to be the
value at specific index."
334.28,0.69,OK?
334.97,2.28,"So at index 0, it has
the value 1, right,"
337.25,2.52,"because it's the first
element in the list."
339.77,3.24,"And the second thing
that represents a list"
343.01,4.98,"is going to be this second
part, which is a pointer."
347.99,1.7,"And internally this
pointer is going"
349.69,2.73,"to tell Python
where is the memory"
352.42,5.19,"location in the computer where
you can access the element"
357.61,1.32,index 1.
358.93,3.39,"So it's just essentially
going to be a chain,"
362.32,2.02,"going from one
index to the other."
364.34,4.165,"And at the next memory location
you have the value at index 1,"
368.505,1.375,"and then you have
another pointer"
369.88,1.74,"that takes you to the
location in memory"
371.62,2.82,where the index 2 is located.
374.44,1.89,"And in index 2 you
have the value and then"
376.33,3.16,"the next pointer,
and so on and so on."
379.49,4.26,"So this is how Python
internally represents a list."
383.75,1.81,OK?
385.56,2.78,"How you manipulate lists,
we've done this a lot, right?"
388.34,6.07,"You can index into a list, you
can add two lists together,"
394.41,2.75,"you can get the length, you can
append to the end of a list,"
397.16,2.7,"you can sort a list, reverse a
list, and so many other things,"
399.86,0.84,right?
400.7,1.416,"So these are all
ways that you can"
402.116,3.114,"interact with the list object
as soon as you've created it."
405.23,3.36,"So notice both of these,
the internal representation"
408.59,1.68,"and how you
manipulate lists, you"
410.27,3.33,"don't actually
know internally how"
413.6,1.47,"these are represented, right?"
415.07,2.64,"How did whoever
wrote the list class"
417.71,1.41,decide to implement a sort.
419.12,1.32,We don't know.
420.44,2.94,"You also weren't aware of how
these lists were represented"
423.38,0.51,internally.
423.89,1.38,"And you didn't
need to know that."
425.27,3.03,"That's the beauty of
object oriented programming"
428.3,2.84,"and having these
data abstractions."
431.14,2.73,"The representations are
private of these objects"
433.87,4.08,"and they are only known by what
you can find out how it's done,"
437.95,3.49,"but they only should be known
by whoever implemented them."
441.44,1.7,"You, as someone who
uses this class,"
443.14,2.4,"doesn't really need to know
how a list is represented"
445.54,2.35,"internally in order
to be able to use it"
447.89,3.09,"and to write cool
programs with them."
450.98,1.45,OK?
452.43,3.5,"So just find a
motivation here before we"
455.93,2.67,"start writing our
own types of objects"
458.6,2.73,"is the advantages of
object oriented programming"
461.33,2.94,"is really that
you're able to bundle"
464.27,3.35,"this data, bundle some
internal representation,"
467.62,4.14,"and some ways to interact with
a program into these packages."
471.76,3.544,"And with these packages,
you can create objects"
475.304,1.416,"and all of these
objects are going"
476.72,1.208,to behave the exact same way.
477.928,2.262,"They're going to have the
same internal representation"
480.19,3.07,"and the same way that you
can interact with them."
483.26,4.89,"And ultimately, this is going to
contribute to the decomposition"
488.15,3.69,"and abstraction ideas
that we talked about when"
491.84,1.387,we talked about functions.
493.227,1.583,"And that means that
you're going to be"
494.81,4.47,"able to write code that's a lot
more reusable and a lot easier"
499.28,1.53,to read in the future.
500.81,2.49,OK.
503.3,2.85,"So just like when we
talked about functions,"
506.15,2.1,"we're going to sort
of separate the code"
508.25,6.21,"that we talk about today into
code where you implement a data"
514.46,5.849,"type and code where you use
an object that you create."
520.309,0.541,OK?
520.85,1.791,"So remember when we
talked about functions,"
522.641,2.986,"you were thinking about it in
terms of writing a function,"
525.627,1.833,"so you had to worry
about the details of how"
527.46,1.64,you implement a function.
529.1,1.65,"And then you had
to worry about just"
530.75,1.39,"how to use a function, right?"
532.14,3.49,"So it's sort of the
same idea today."
535.63,5.18,"So when you're thinking about
implementing your own data"
540.81,3.94,"type, you do that with
this thing called a class."
548.5,1.95,"And when you create
a class, you're"
550.45,1.82,"basically going to
figure out what name you"
552.27,1.63,"want to give your
class and you're"
553.9,2.156,going to find some attributes.
556.056,1.624,"And attributes are
going to be the data"
557.68,4.184,"representation and ways that you
can interact with your object."
561.864,1.666,"So you, as the
programmer of this class,"
563.53,2.07,"are going to decide
how you want people"
565.6,4.18,"to interact with the object
and what data this object"
569.78,3.08,is going to have.
572.86,2.42,"So for example,
someone wrote code"
575.28,2.1,"that implements a
list class, right,"
577.38,2.49,"and we don't actually
know how that was done."
579.87,3.31,But we can find out.
583.18,4.53,"So creating the class is
implementing the class"
587.71,1.98,"and figuring out data
representation and ways"
589.69,2.58,to interact with the class.
592.27,3.3,"Once that's done, you
can then use your class."
595.57,2.34,"And you use the
class by creating"
597.91,4.254,new instances of the class.
602.164,1.416,"So when you create
a new instance,"
603.58,2.13,"you essentially
create a new object"
605.71,3.72,"that has the type, the
name of your class."
609.43,2.13,"And you can create as many
objects as you'd like."
611.56,2.82,"You can do all the
operations that you've"
614.38,2.28,defined on the class.
616.66,1.995,"So for example,
someone wrote the code"
618.655,1.875,"to implement list class
and then you can just"
620.53,1.39,use the list class like this.
621.92,3.41,"You can create a new list, you
can get the length pf the list,"
625.33,2.99,"you can append to the end of
the list, and so on and so on."
633.55,4.29,"So let's start defining
our own types, OK?"
637.84,1.962,"So now you're going
to define classes,"
639.802,1.458,"you're going to
write classes which"
641.26,4.4,"are going to define your
own types of objects."
645.66,2.09,"So for today's
lecture we're going"
647.75,2.49,"to look at code
that's going to be"
650.24,2.97,"in the context of a
coordinate object."
653.21,1.65,"And a coordinate
object is essentially"
654.86,8.12,"going to be an object
that's going to define"
662.98,4.42,a point in an xy plane.
667.4,4.652,"So x, y is going to be a
coordinate in a 2D plane."
672.052,1.458,"So we're going to
write code that's"
673.51,2.375,"going to allow us to
define that kind of object."
678.83,3.974,"So the way we do that is
we have to define a class."
682.804,2.416,"So we have to tell Python,
hey, I'm defining my own object"
685.22,1.05,type.
686.27,1.8,"So you do that with
this class key word."
688.07,3.81,"So you say class, then you
say the name of your type."
691.88,2.58,"In this case, we're creating
a type called coordinate."
694.46,2.71,"Just like we had type list,
type string, and so on."
697.17,3.45,"This is going to be a
type called coordinate."
700.62,1.5,"And then in
parentheses here, you"
702.12,2.37,"put what the parents
of the class are."
704.49,4.1,"For today's lecture, the
parent of the classes"
708.59,1.89,"are going to be this
thing called object,"
710.48,5.7,"and object is the very
basic type in Python."
716.18,2.07,"It is the most basic
type in Python."
718.25,3.96,"And it implements things like
being able to assign variables."
722.21,1.77,"So really, really
basic operations"
723.98,2.76,that you can do with objects.
726.74,1.59,"So your coordinate
is therefore going"
728.33,1.615,to be an object in Python.
732.63,0.5,All right.
733.13,3.45,"So we've told Python we
wanted to define an object."
736.58,2.89,"So inside the class definition
we're going to put attributes."
739.47,2.35,So what are attributes?
741.82,2.79,"Attributes are going to be
data and procedures that"
744.61,2.39,"belong to the class, OK?"
747.0,2.95,"Data are going to be the data
representations and procedures"
749.95,3.68,"are going to be ways that we
can interact with the object."
753.63,2.28,"The fact that they
belong to the class"
755.91,2.76,"means that the data and the
procedures that we write"
758.67,2.82,"are only going to work with
an object of this type."
761.49,0.78,OK.
762.27,2.832,"If you try to use any of
the data or the procedures"
765.102,1.458,"with an object of
a different type,"
766.56,4.47,"you're going to get an
error because these data"
771.03,5.85,"and these attributes will
belong to this particular class."
779.41,5.4,"So the data attributes is,
what is the object, right?"
784.81,2.68,"What is the data that
makes up the object?"
787.49,1.73,"So for our coordinate
example, it's"
789.22,3.204,"going to be the x and y
values for coordinate."
792.424,1.416,"We can decide that
can be ints, we"
793.84,2.07,"can decide that we can
let them be floats,"
795.91,3.09,"but it's going to have one
value for the x-coordinate"
799.0,1.757,"and one value for
the y-coordinate."
803.96,1.72,So those are data attributes.
805.68,3.93,"And procedure attributes
are better known as methods."
809.61,2.479,"And you can think of a
method as a function."
812.089,1.541,"Except that it's a
function that only"
813.63,3.7,"works with this
particular type of object."
817.33,3.58,"So with a coordinate
object, in this case."
820.91,1.75,"So the methods are
going to define how you"
822.66,1.44,can interact with the object.
824.1,1.775,"So in a list, for
example, we've said"
825.875,2.125,"that you can append an item
to the end of the list,"
828.0,2.52,"we can sort a list,
things like that."
830.52,2.07,"So when you're defining
methods, you're"
832.59,2.53,"defining ways that people can
interact with your object."
835.12,1.68,"So for example, for
a coordinate object,"
836.8,2.39,"we can say that we can take
the distance between two"
839.19,1.46,coordinate points.
840.65,0.73,OK?
841.38,2.083,"And that's going to be a
way that you can interact"
843.463,2.897,with two coordinate points.
846.36,3.27,"And just to be clear,
these are going"
849.63,1.5,"to belong to this
class, which means"
851.13,3.18,"that if you try to use this
distance method on two lists,"
854.31,1.83,"for example, you're
going to get an error."
856.14,3.12,"Because this distance method was
only defined to work with two"
859.26,1.271,coordinate type objects.
863.12,3.56,"All right, so let's
carry on and continue"
866.68,2.07,implementing our class.
868.75,2.55,"So we've written this
first line so far,"
871.3,1.34,class coordinate object.
872.64,3.1,So now let's define attributes.
875.74,3.9,"First thing we're going to
define are data attributes."
879.64,5.08,"Generally you define data
attributes inside this init,"
884.72,2.48,"and this is underscore,
underscore, init, underscore,"
887.2,5.31,"underscore, and it's a special
method or function in a class."
892.51,3.487,"And the special
method tells Python,"
895.997,1.583,"when you implement
the special method,"
897.58,3.36,"it tells Python when you first
create an object of this type,"
900.94,2.07,"call this method or
call this function."
906.47,1.61,So how do we do that?
908.08,1.68,So let's implement it.
909.76,4.53,"So we say df because
it's just a function."
914.29,3.3,"The name is the
special name, init."
917.59,1.8,"And we give it some
parameters, right,"
919.39,3.29,just like any other function.
922.68,3.57,"These last two
parameters are x and y,"
926.25,5.09,"which are going to represent how
you create a coordinate object."
931.34,1.96,"So you give it a value
for the x-coordinate"
933.3,3.02,"and you give it a value
for the y-coordinate."
936.32,3.23,"The self, however, is
a little bit trickier."
939.55,2.54,"So the self is going
to be a parameter when"
942.09,2.79,"you define this
class that represents"
944.88,4.95,"a particular instance
of the class."
949.83,2.67,"So we're defining
this coordinate object"
952.5,2.04,"in sort of a general way, right?"
954.54,2.13,"We don't have a
specific instance"
956.67,3.18,"yet because we haven't
created an object yet."
959.85,2.16,"But this self is
going to be sort"
962.01,2.82,"of a placeholder for
any sort of instance"
964.83,2.98,when you create the object.
967.81,2.51,"So in the definition
of the class,"
970.32,1.95,"whenever you want to
refer to attributes"
972.27,5.26,"that belong to an instance,
you have to use self dot."
977.53,1.8,So this dot notation.
979.33,6.9,"And the dot is going to say
look for a data attribute"
986.23,2.19,x that belongs to this class.
991.24,2.81,"So for methods that
belong to the class,"
994.05,3.264,"the first parameter is
always going to be self."
997.314,1.416,"It can be named
anything you want,"
998.73,3.06,"but really by convention
it's always named self."
1001.79,2.49,So try to stick to that.
1004.28,1.89,"And then any other
parameters beyond it"
1006.17,1.74,"are going to be just
parameters as you"
1007.91,3.28,would put in a normal function.
1011.19,0.681,OK.
1011.871,1.499,"In this particular
case, we're going"
1013.37,2.97,"to choose to initialize
a coordinate object"
1016.34,4.47,"by two values, one for
the x and one for the y."
1020.81,2.88,"And inside this
init method, we're"
1023.69,4.149,going to have two assignments.
1027.839,3.74,"The first one says,
the x data attribute"
1031.579,1.411,of a coordinate object.
1032.99,4.599,"I'm going to assign it to
whatever was passed in."
1037.589,3.02,"And the y data attribute
for a particular object"
1040.609,2.911,"is going to be assigned
whatever y was passed in."
1050.42,3.73,"Questions so far about
how to write this init?"
1054.15,0.85,"Yeah, question."
1055.0,0.97,AUDIENCE: [INAUDIBLE]
1060.597,1.833,"PROFESSOR: How do you
make sure that x and y"
1062.43,1.58,are inits or floats?
1064.01,1.69,"So this is something
that you could"
1065.7,2.67,"write in the specifications,
so the docstring"
1068.37,1.2,with the triple quotes.
1069.57,3.33,"So whoever uses the
class would then"
1072.9,3.03,"know that if they do something
outside the specification,"
1075.93,2.13,"the code might not
work as expected."
1078.06,2.28,"Or you could put
in a cert statement"
1080.34,3.54,"inside the definition
of the init just"
1083.88,2.65,to sort of force that.
1086.53,1.94,Force that to be true.
1088.47,0.725,Great question.
1089.195,0.625,"Yeah, question."
1089.82,0.94,AUDIENCE: [INAUDIBLE]
1094.52,2.319,"PROFESSOR: Does the x,
does this self x and this x"
1096.839,1.041,have to be the same name.
1097.88,1.83,The answer is no.
1099.71,2.55,"And we're going to
see in class exercise"
1102.26,1.9,"that you can have
it be different."
1107.03,1.02,OK.
1108.05,0.69,Great.
1108.74,5.52,"So this defines the way
that we create an object."
1114.26,4.86,"So now we have sort
of a nice class."
1119.12,2.37,"It's very simple, but
we can start actually"
1121.49,2.407,creating coordinate objects.
1123.897,1.583,"So when you create
coordinate objects,"
1125.48,3.45,"you're creating
instances of the class."
1128.93,3.51,"So this line here, C is
equal to coordinate 3,4,"
1132.44,2.8,"is going to call
the init method."
1135.24,2.94,"It's going to call the init
method with x is equal to 3"
1138.18,1.2,and y is equal to 4.
1141.94,5.25,"I'm just going to go over here
and I wrote this previously,"
1147.19,6.79,"because notice when we're
creating an object here,"
1153.98,2.91,"we're only giving
it two parameters."
1156.89,3.3,"But in the init method, we
have actually three parameters,"
1160.19,0.87,right?
1161.06,1.834,"We have these three
parameters here,"
1162.894,1.416,"but when we're
creating an object,"
1164.31,1.64,we only give it two parameters.
1165.95,2.65,"And that's OK because
implicitly, Python"
1168.6,3.23,"is going to say self is going
to be this object C, so just"
1171.83,1.487,"by default, OK?"
1173.317,1.833,"So when you're creating
a coordinate object,"
1175.15,5.11,"you're passing it all the
variables except for self."
1184.93,2.42,"So this line here is
going to call the init"
1187.35,2.39,"and it's going to do every
line inside the init."
1189.74,4.91,"So it's going to create
an x data attribute for C,"
1194.65,2.28,"a y data attribute
for C, and it's"
1196.93,4.87,"going to assign 3 and 4
to those respectively."
1201.8,3.5,"This next line here is
origin equals coordinate 0,"
1205.3,3.51,0 creates another object.
1208.81,1.36,OK?
1210.17,3.6,"It's another coordinate
object whose value for x is 0"
1213.77,2.43,and whose value for y is 0.
1216.2,3.01,"So now we have two
coordinate objects."
1219.21,2.33,"We can access the
data attributes"
1221.54,3.312,"using this dot notation and
we've seen that before, right?"
1224.852,2.208,"When we've worked with lists
we'd say something like,"
1227.06,3.07,"L dot append, right,
when we create a list."
1230.13,4.7,"So the same dot notation can
be used with your own objects"
1234.83,2.52,"in order to access
data attributes."
1237.35,2.37,"So here, this is
going to print 3"
1239.72,7.46,"because the x value
for object C is 3,"
1247.18,1.92,"and the next line,
print origin x"
1249.1,4.05,"is going to print 0 because the
x value for the object origin"
1253.15,1.68,is 0.
1254.83,0.95,OK.
1255.78,3.67,"So we've created a
coordinate object."
1259.45,1.61,"We have to find the
init method so we"
1261.06,4.15,"have a way to create objects
when we use the class."
1265.21,3.05,"And then we can access
the data attributes."
1268.26,3.27,"But that's kind of lame, right,
because there isn't anything"
1271.53,1.03,cool we can do with it.
1272.56,3.23,"There isn't ways to
interact with this object."
1275.79,1.98,So let's add some methods.
1277.77,3.9,"Remember methods are going to
be procedural attributes that"
1281.67,3.36,"allow us to interact
with our object."
1285.03,2.85,"Methods are like functions
except that there's"
1287.88,2.91,"a couple of differences
which you'll see in a moment."
1290.79,3.0,"And when you're
calling methods, you're"
1293.79,4.59,"using the dot operator, like
L dot append, for example,"
1298.38,0.54,for lists.
1301.81,3.84,"So let's go back to defining
our coordinate class"
1305.65,2.59,"and let's define
a method for it."
1308.24,2.67,"So so far we've defined
that part there,"
1310.91,1.53,class coordinate and an init.
1312.44,1.35,So we have that.
1313.79,4.37,"So in this slide we're going
to add this method here."
1318.16,1.77,"So this method here
is going to say"
1319.93,4.35,"I'm going to define a
method called distance"
1324.28,1.89,"and I'm going to pass
in two parameters."
1326.17,2.55,"Remember self, the
first parameter,"
1328.72,2.61,"is always going to be
the instance of an object"
1331.33,3.41,"that you're going to
perform the operation on."
1334.74,4.89,"So pretty much by convention
it's always named self."
1342.7,2.31,"And then for this
particular method,"
1345.01,1.98,"I'm going to give it
another parameter,"
1346.99,2.42,"and I can name this
whatever I want."
1349.41,1.7,I'm naming it other.
1351.11,3.08,"And this is going to represent
the other coordinate object"
1354.19,3.952,"for which I want to find
the distance from my self."
1358.142,1.458,"So here I'm going
to just implement"
1359.6,6.72,"the Euclidean distance formula,
which is x1 minus x2 squared,"
1366.32,4.43,"plus Y1 minus Y2 squared,
and square root of all that."
1370.75,3.62,"So that's what I'm
doing inside here."
1374.37,1.885,"Self and other are
coordinate objects."
1379.15,5.79,"Inside this method, I have
to refer to the x data"
1384.94,1.95,"attributes of each
object if I want"
1386.89,4.33,"to find the difference between
the 2x values from them."
1391.22,3.05,"So that's why I'm doing
self dot x here, right."
1394.27,2.97,"If I just did x, I would be
accessing just some variable"
1397.24,5.01,"named x in a program which
actually isn't even defined."
1402.25,4.734,"So you always have to
refer when as we're"
1406.984,1.416,"thinking about
classes, you always"
1408.4,2.37,"have to refer to
whose data attribute"
1410.77,2.1,do you want to access?
1412.87,2.13,"In this case, I want
to access the x data"
1415.0,3.84,"attribute of my self, and I
want to subtract the x data"
1418.84,2.43,"attribute of this
other coordinate,"
1421.27,4.47,"square that, same for y,
square that, and then add those"
1425.74,2.58,"and take the square
root of that."
1428.32,2.79,"So notice this method is pretty
much like a function, right?"
1431.11,3.72,"You have DF, some name,
it takes in parameters."
1434.83,3.09,"It does some stuff and
then it returns a value."
1437.92,3.35,"The only difference is the
fact that you have a self here"
1441.27,3.58,"as the first thing and
the fact that you always"
1444.85,2.91,"have to be conscious about
whose data attributes"
1447.76,0.75,you're accessing.
1452.14,1.94,"So you have to use the
dot notation in order"
1454.08,3.76,"to decide whose data
attributes you want access."
1457.84,3.382,"So we've defined the
method here, distance."
1461.222,1.458,"So this is in the
class definition."
1462.68,2.49,Now how do we use it?
1465.17,2.95,"So let's assume that the
definition of distance"
1468.12,0.88,is up here.
1469.0,3.32,I didn't include the code.
1472.32,2.24,"But really all you need
to know is what it takes."
1474.56,2.5,It takes a self and an other.
1477.06,2.43,"So when you want
to use this method"
1479.49,2.64,"to figure out a distance
between two coordinate objects,"
1482.13,1.36,this is how you do it.
1483.49,3.62,"So the first line, I create
one coordinate object."
1487.11,3.21,"Second line, I create
another coordinate object."
1490.32,2.31,"First one is named C, the
second one is named 0."
1492.63,3.26,These are two separate objects.
1495.89,4.52,"And I'm going to
find the distance."
1500.41,2.99,"And I want to first
call it on one object,"
1503.4,3.94,"so I'm going to say C dot,
so I'm using the dot notation"
1507.34,7.4,"to call the method
distance on object C."
1514.74,3.384,"So Python says this object
C is of type coordinate."
1518.124,1.416,"It's going to look
up at the class"
1519.54,1.23,coordinate that you defined.
1520.77,2.58,"It's going to find this
method called distance"
1523.35,2.94,"and then it's going to say
what parameters does it take?"
1526.29,3.33,"So it takes another parameter,
right, for the other"
1529.62,2.07,"and then, in the
parentheses, I just"
1531.69,3.9,"have to give it this
other perimeter."
1535.59,2.28,"An easier way to
see what happens"
1537.87,5.04,"is by looking at what this
line here is equivalent to."
1546.0,2.56,"So the third line
here prints C dot"
1548.56,3.099,"distance 0 is equivalent
to this one on the right."
1551.659,1.541,"And this one on the
right essentially"
1553.2,4.42,"says, what's the
name of the class,"
1557.62,4.06,"dot, dot notation, what's
the method you want to call,"
1561.68,2.22,"and then in
parentheses you give it"
1563.9,2.43,"all of the variables
including self."
1566.33,0.6,OK.
1566.93,2.82,"So in this case you're
explicitly telling Python"
1569.75,6.28,that self is C and other is 0.
1576.03,6.05,"So this is a little bit easier
to understand, like that."
1582.08,3.24,"But it's a little cumbersome
because you always"
1585.32,2.58,"have to write coordinate dot,
coordinate dot, coordinate dot,"
1587.9,1.625,"for every data
attribute you might want"
1589.525,2.105,"to access, for every
procedural attribute you"
1591.63,2.48,might want to access.
1594.11,2.85,"So by convention,
it's a lot easier"
1596.96,3.05,to do the one on the left.
1600.01,2.85,"And as I mentioned,
Python implicitly says,"
1602.86,2.63,"if you're doing the
one on the left,"
1605.49,2.41,"you can call this method
on a particular object"
1607.9,2.0,"and it's going to look
up the type of the object"
1609.9,3.0,"and it's going to essentially
convert this on the left"
1612.9,1.941,to the one on the right.
1614.841,1.749,"And this is what you've
been using so far."
1616.59,3.03,"So when you create a list,
you say L is equal to 1, 2,"
1619.62,5.54,"and then you say L.append,
you know, 3 or whatever."
1625.16,4.52,"So we've been using this
notation on the left"
1629.68,4.56,"pretty much from the
beginning of class."
1634.24,3.04,"So we have a
coordinate class, we"
1637.28,1.83,"can create a
coordinate object, we"
1639.11,3.006,"can get the distance
between two objects."
1642.116,1.374,"As you're using
the class, if you"
1643.49,2.37,"wanted to use this
coordinate class,"
1645.86,3.72,"and you were maybe debugging
at some point, a lot of you"
1649.58,2.58,"probably use print as a
debug statement, right?"
1652.16,5.639,"And maybe you want to print the
value of a coordinate object."
1657.799,1.541,"So if you create a
coordinate object,"
1659.34,2.28,"C is equal to
coordinate 3, 4, right?"
1661.62,1.78,That's what we've done so far.
1663.4,4.7,"If you print C, you
get this funny message."
1668.1,1.47,"Very uninformative, right?"
1669.57,4.23,"It basically says, well,
C is an object of type"
1673.8,6.489,"coordinate at this memory
location in the computer."
1680.289,1.791,"Which is not what you
wanted at all, right?"
1682.08,2.91,"Maybe you wanted to know what
the values for x and y were."
1684.99,3.2,"That would be a lot
more informative."
1688.19,6.07,"So by default, when you
create your own type, when"
1694.26,1.56,"you print the
object of that type,"
1695.82,1.8,"Python tells you this
sort of information"
1697.62,2.05,which is not what you want.
1699.67,1.52,"So what you need
to do is you need"
1701.19,3.0,"to define your own
method that tells"
1704.19,3.27,"Python what to do
when you call print"
1707.46,3.54,on an object of this type.
1711.0,3.21,"So this is going to be
a special method, just"
1714.21,2.55,"like init is, because
it starts and ends"
1716.76,2.89,with double underscores.
1719.65,3.05,"And the name of the method is
underscore, underscore, str,"
1722.7,1.68,"underscore, underscore."
1724.38,4.17,"And if you define this method in
your class, that tells Python,"
1728.55,2.46,"hey, when you see a
print statement that's"
1731.01,3.24,"on an object of type
coordinate, call this method,"
1734.25,4.5,"look what it does, and do
everything that's inside it."
1738.75,3.69,"And you can choose to make
it do whatever you want"
1742.44,3.48,inside your definition of str.
1745.92,2.7,"In this case, let's say when
we print a coordinate object,"
1748.62,2.67,"we're going to print its
x and y values surrounded"
1751.29,1.83,by angle brackets.
1753.12,1.83,"That seems reasonable, right?"
1754.95,5.29,"So then from now on when you
print coordinate objects,"
1760.24,1.85,"you're going to see
things like this, which"
1762.09,3.57,is a lot more informative.
1765.66,1.97,So how do we define this?
1767.63,4.98,"So so far we've defined
all that and the last part"
1772.61,2.42,is going to be new.
1775.03,2.12,"So we define the init
and the distance,"
1777.15,1.185,and let's define this str.
1782.17,3.66,"So underscore, underscore,
str, underscore, underscore, is"
1785.83,1.94,a method.
1787.77,3.29,"It's only going to take self
because you're just calling"
1791.06,2.97,print on the object itself.
1794.03,3.52,"There's no other
parameters to it."
1797.55,5.55,"Str has to return a string,
and in this particular case,"
1803.1,2.28,"we're going to return
the string that's"
1805.38,4.66,"the angle brackets concatenated
with the x value of the object,"
1810.04,3.32,"self.x, concatenated
with a comma,"
1813.36,3.72,"concatenated with the y value
of this particular instance"
1817.08,2.885,"of an object, self.y,
and then concatenated"
1819.965,1.0,with the angle brackets.
1823.72,2.79,"So now any time you have
print on an object of type"
1826.51,3.15,"coordinate, you're going to
call this special method str,"
1829.66,2.82,"if it's implemented
in your code."
1832.48,0.75,Any questions?
1837.57,0.5,OK.
1841.46,4.775,"So let's try to wrap our
head around types and classes"
1846.235,1.291,because we've seen a lot today.
1850.78,3.46,"Let's create a
coordinate object,"
1854.24,6.05,"assign it 3, 4, as we have been,
and assign it to variable C."
1860.29,4.47,"We've implemented the str
method, so when we print C,"
1864.76,2.67,"it's going to print out this
nice three comma for our angle"
1867.43,0.5,brackets.
1871.14,1.98,"If we print the type
of C, this is actually"
1873.12,4.43,"going to give us class main
coordinate, which tells us"
1877.55,10.22,"that C is going to
be an object that"
1887.77,2.794,is of type class coordinate.
1893.37,4.13,"If we look at
coordinate as a class,"
1897.5,2.82,"if we print what coordinate is,
coordinate is a class, right?"
1900.32,2.52,"So this is what Python tells
us, if we print coordinate,"
1902.84,3.89,it's a class named coordinate.
1906.73,1.75,"And if we print the
type of a coordinate,"
1908.48,1.92,"well that's just
going to be a type."
1910.4,1.32,So class is going to be a type.
1911.72,1.708,"So you're defining
the type of an object."
1916.77,5.18,"If you'd like to figure out
whether a particular object is"
1921.95,1.85,"an instance of a
particular class,"
1923.8,3.28,"you use this special
function called is instance."
1927.08,3.24,"So if you print is instance
C comma coordinate,"
1930.32,3.39,"this is going to print true
because C is an object that"
1933.71,1.861,is of type coordinate.
1943.43,2.68,"Couple more words on
these special operators."
1946.11,1.61,"So these special
operators allow you"
1947.72,4.05,"to customize your classes which
can add some cool functionality"
1951.77,1.64,to them.
1953.41,3.39,"So these special
operators are going"
1956.8,2.91,"to be things like
addition, subtraction,"
1959.71,2.43,"using the equal equal sign,
greater than, less than,"
1962.14,2.55,length and so on and so on.
1964.69,3.45,"So just like str,
if you implement"
1968.14,4.26,"any of these in your classes,
this is going to tell Python."
1972.4,3.91,"So for example, if we've
implemented this underscore,"
1976.31,4.28,"underscore, add, underscore,
underscore in our class,"
1980.59,1.38,"this is going to
tell Python when"
1981.97,2.73,"you use this plus operator
between two objects of type"
1984.7,4.29,coordinate to call this method.
1988.99,1.86,"If you have not
implemented this method"
1990.85,2.22,"and you try to add two
objects of type coordinate,"
1993.07,2.04,"you're going to get an error
because Python doesn't actually"
1995.11,1.5,"know right off
the bat how to add"
1996.61,1.65,"two coordinate objects, right?"
1998.26,2.194,"You have to tell
it how to do that."
2000.454,1.916,"And you tell it how to
do that by implementing"
2002.37,3.99,this special method.
2006.36,0.99,Same with subtract.
2007.35,1.2,Same with equals.
2008.55,3.19,"So if you want to figure out
whether two objects are equal."
2011.74,3.44,"And when you implement these
methods in your own class,"
2015.18,4.024,"you can decide exactly
what you want to do."
2019.204,2.166,"So what happens when you
add two coordinate objects?"
2021.37,2.479,"Do you just add the x values,
do you just add the y values,"
2023.849,1.541,"do you get them both
together, do you"
2025.39,2.82,do whatever you'd like to do.
2028.21,3.19,"And then you document
what you've decided."
2031.4,2.856,"So let's create a
fraction object."
2034.256,1.374,"So we've looked
at coordinate, we"
2035.63,2.77,"saw sort of a higher
level car object."
2038.4,3.4,Let's look at a fraction object.
2041.8,3.0,"Fraction object
is going to be, is"
2044.8,4.359,"going represent a number that's
going to be a numerator slash"
2049.159,2.241,denominator.
2051.4,0.5,OK.
2051.9,2.23,"So that's going to
be a fraction object."
2054.13,3.68,"So the way I've decided to
internally represent a fraction"
2057.81,3.0,object is with two numbers.
2060.81,3.21,"And I've decided that I
will not let them be floats."
2064.02,5.69,"They have to be integers,
hence the assert over here."
2069.71,2.04,"So inside the init,
I've decided I'm"
2071.75,5.969,"going to represent my
fracture with two numbers, one"
2077.719,4.161,"for the numerator and
one for the denominator."
2081.88,1.58,"So when I create
a fraction object,"
2083.46,4.59,"I'm going to pass in a
numerator and a denominator."
2088.05,3.0,"And a particular
instance is going"
2091.05,2.46,"to have self dot
numerator and self dot"
2093.51,2.27,"denominator as its
data attributes"
2095.78,4.215,"and I'm assigning those to be
whatever's passed into my init."
2103.25,4.17,"Since I plan on debugging this
code maybe possibly sometime"
2107.42,3.48,"in the future, I'm also
including an str method"
2110.9,9.45,"and the str method is going
to print a nice looking string"
2120.35,2.4,"that's going to represent
the numerator, and then"
2122.75,3.816,"a slash, and then
the denominator."
2130.3,3.35,"And then I've also implemented
some other special methods."
2133.65,1.92,How do I add two fractions?
2135.57,2.61,How do I subtract two fractions?
2138.18,4.23,"And how do I convert
a fraction to a float?"
2142.41,1.71,"The add and subtract
are almost the same,"
2144.12,4.07,"so let's look at the
add for the moment."
2148.19,1.26,How do we add two fractions?
2152.52,6.89,"We're going to take self, which
is the instance of an object"
2159.41,2.8,"that I want to do
the add operation on,"
2162.21,1.5,"and we're going to
take other, which"
2163.71,2.15,"is the other
instance of an object"
2165.86,3.27,"that I want to do the
operation on, so the addition,"
2169.13,2.22,"and I'm going to
figure out the new top."
2171.35,3.81,"So the new top of the
resulting fraction."
2175.16,4.95,"So it's my numerator multiplied
by the other denominator"
2180.11,3.9,"plus my denominator multiplied
by the other numerator"
2184.01,2.4,"and then divided by the
multiplication of the two"
2186.41,2.4,denominators.
2188.81,3.44,"So the top is going to be that,
the bottom is going to be that."
2192.25,2.7,"Notice that we're
using self dot, right?"
2194.95,1.53,"Once again, we're
trying to access"
2196.48,2.95,"the data attributes of
each different instance,"
2199.43,3.33,"right, of myself and the other
object that I'm working with."
2202.76,3.9,"So that's why I have
to use self dot here."
2206.66,4.79,"Once I figure out the top and
the bottom of the addition,"
2211.45,3.68,"I'm going to return,
and here notice I'm"
2215.13,3.06,returning a fraction object.
2218.19,2.49,"It's not a number, it's not
a float, it's not an integer."
2220.68,3.21,"It's a new object that is of
the exact same type as the class"
2223.89,3.25,that I'm implementing.
2227.14,3.27,"So as it's the same
type of object,"
2230.41,1.894,"then on the return
value I can do"
2232.304,1.916,"all of the exact same
operations that I can do"
2234.22,3.74,on a regular fraction object.
2237.96,1.627,Sub is going to be the same.
2239.587,1.333,I'm returning a fraction object.
2244.25,6.08,"Float is just going to
do the division for me,"
2250.33,1.53,"so it's going to
take the numerator"
2251.86,2.49,"and then divide it
by the denominator,"
2254.35,2.78,just divide the numbers.
2257.13,5.66,"And then I'm defining here
my own method called inverse."
2262.79,2.79,"And this is just going to take
the inverse of the instance I'm"
2265.58,1.68,calling this method on.
2267.26,4.56,"And so it's going to also return
a new fraction object that just"
2271.82,2.01,"has the denominator
as the top part"
2273.83,1.701,"and the numerator
as the bottom part."
2278.9,1.38,So then we have some code here.
2280.28,4.69,"So that's how I implement
my fraction object."
2284.97,3.07,"So now let's use it and
see what it gives us."
2288.04,1.25,"A is equal to a fraction 1, 4."
2300.94,7.93,"This is going to
be 1 over 4 for a."
2308.87,2.73,"And b is going to
be 3 over four."
2315.24,6.16,"When I do C, notice I'm using
the plus operator between two"
2321.4,1.53,"fraction objects, right?"
2322.93,2.25,"A and b are fraction
objects so Python's"
2325.18,3.579,"going to say, OK, is there an
underscore, underscore, add,"
2328.759,1.791,"underscore, underscore,
method implemented?"
2330.55,4.18,"It is and it's just going to
do whatever's inside here."
2334.73,2.25,"So it's going to say self
dot numerator plus other dot"
2336.98,0.982,denominator.
2337.962,1.958,"It's going to calculate
the top and the bottom."
2339.92,1.736,"It's going to turn a
new fraction object."
2345.47,21.63,"So this is going to be 4 plus 12
divided by 16, and 16 over 16."
2367.1,2.7,"So C as a fraction
object is going"
2369.8,5.46,"to be 16 for the numerator
and 16 for the denominator"
2375.26,2.798,because it's a fraction object.
2383.89,2.4,"If I print C, it should
print 16 over 16,"
2386.29,4.47,"so we can even run it,
so print 16 over 16."
2390.76,3.81,"If I print floats C, so this
special method float here"
2394.57,4.35,"is going to say, is there a
method that converts a fraction"
2398.92,1.17,to a float and there is.
2400.09,2.139,"It's this one
implemented right here."
2402.229,2.541,"So it's just going to divide
the two numbers, top and bottom,"
2404.77,2.25,which gives me 1.
2407.02,3.7,So it's this one here and here.
2410.72,2.66,"Notice I'm doing the
exact same method call,"
2413.38,1.89,"except I'm doing it
the other way where"
2415.27,5.34,"you type in the name of the
class, name of the method,"
2420.61,1.74,"and then what you're
calling it on,"
2422.35,5.08,"and this gives the exact
same value here, 1.0."
2427.43,3.21,"And then here I'm calling
the method inverse"
2430.64,6.21,"on object B which is going to
invert 3 over 4 to be 4 over 3."
2436.85,2.19,"And then I'm converting
it to a float"
2439.04,1.38,and then I'm printing the value.
2440.42,2.93,So it gives me 1.33.
2443.35,7.47,"So take a look at this
code in more detail"
2450.82,3.24,"and see if you can trace through
all of those different things"
2454.06,3.5,"and see if you can also write
your own new fraction objects."
2457.56,0.7,OK.
2458.26,2.1,So last slide.
2460.36,2.37,"Power of object
oriented programming"
2462.73,2.01,"is that you can bundle
together objects that"
2464.74,1.5,are of the exact same type.
2466.24,1.44,"And all of these
objects are going"
2467.68,2.04,"to have the same
data representation"
2469.72,3.31,"and the same methods
that you can do on them."
2473.03,2.7,"And ultimately, you're
going to be building"
2475.73,1.51,these layers of abstraction.
2477.24,2.93,"So you're going to be building
on a basic object type"
2480.17,6.99,"in Python, you're going to have
integer objects, float objects."
2487.16,2.946,"On top of those, you can
create lists, dictionaries."
2490.106,1.374,"And on top of
those, you can even"
2491.48,5.6,"create your own object types as
we saw in this lecture today."
