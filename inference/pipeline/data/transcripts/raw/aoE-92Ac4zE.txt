second,duration,transcript
6.0,4.88,so what are programming paradigms that's
8.639,4.641,of course important to understand
10.88,4.799,in the end you could say it's just a way
13.28,5.759,of writing code it's about how you write
15.679,5.281,and organize your code it's not a syntax
19.039,4.16,feature it's not a special feature
20.96,4.88,exposed by the browser or anything like
23.199,5.761,this it's really just how you structure
25.84,5.759,your code and how you reason about your
28.96,4.4,program you're writing so how your code
31.599,3.521,is organized
33.36,4.0,and in the end there are three paradigms
35.12,5.2,you could follow you have object
37.36,4.879,oriented programming you have procedural
40.32,4.239,programming and you have functional
42.239,4.721,programming now what does this mean
44.559,4.801,if you're writing your code in an object
46.96,5.919,oriented style it means that you
49.36,6.56,organize your data and logic in objects
52.879,5.84,or in classes and then in objects based
55.92,6.319,on those classes which means you store
58.719,6.641,your data in properties of objects you
62.239,5.281,store your logic in methods of objects
65.36,4.799,that's how you typically think about
67.52,4.959,your code here everything in your
70.159,5.121,application in your project gets
72.479,5.68,represented as a class and then in the
75.28,5.28,end as an object so you organize your
78.159,5.521,code in logical entities you could say
80.56,5.44,you kind of try to translate the
83.68,4.56,application you're writing into the real
86.0,4.159,world and you think about your
88.24,5.44,application and the things that make up
90.159,5.441,your application in real world terms if
93.68,5.119,you're building a shop application you
95.6,4.879,think about products and a shopping cart
98.799,3.28,and so on that's how you
100.479,3.92,think about your code and how you
102.079,5.36,organize it now when you're following a
104.399,5.281,procedural style and that's probably the
107.439,4.96,style with which you got started when
109.68,5.92,working with javascript you simply write
112.399,6.161,a sequential series of execution steps
115.6,5.28,and tasks so you have a top to bottom
118.56,4.8,code execution you could say now you
120.88,5.279,always have that in every style but here
123.36,5.44,you simply list these different steps
126.159,4.88,the engine in the end should execute and
128.8,3.84,should perform you don't organize your
131.039,4.961,code in logical
132.64,5.52,groups or in logical pieces of data you
136.0,4.4,don't use objects and entities to
138.16,4.799,structure your code in the end you just
140.4,4.72,execute step after step
142.959,5.201,and then we have functional programming
145.12,6.08,and there we organize our code in if
148.16,5.92,possible pure functions with clearly
151.2,5.759,defined tasks you get all the data a
154.08,4.799,function needs as parameters and then
156.959,4.241,this function often also returns
158.879,4.881,something new so you pass data around
161.2,5.44,with parameters and your functions are
163.76,5.28,your way of organizing your code you
166.64,4.4,have many functions probably more than
169.04,4.24,you have in the other styles and your
171.04,5.04,functions hold your logic every function
173.28,4.72,if possible works on its own and this is
176.08,4.159,how you structure your code now that's
178.0,7.44,the theory it of course becomes way
180.239,7.761,clearer if we see that on a real example
185.44,4.719,so let's work on a very simple example
188.0,4.56,application and this indeed will be a
190.159,4.16,very trivial application here it's an
192.56,4.48,application where i in the end have a
194.319,5.28,html file which renders a form a form
197.04,4.24,with two inputs and then with a button
199.599,3.841,and i got some styling so that this
201.28,4.879,doesn't look super ugly now we can
203.44,5.28,simply open this by in the end double
206.159,4.961,clicking that index.html file in the
208.72,5.04,finder or windows explorer
211.12,5.759,and what we get is something that looks
213.76,4.72,like this now here nothing happens if
216.879,4.321,you enter something here and click the
218.48,4.88,button you'll just submit the form and
221.2,3.599,therefore reload the page besides that
223.36,3.92,nothing will happen
224.799,4.8,we will now write code that changes this
227.28,4.64,and we will write this application code
229.599,4.881,three times in the three different
231.92,5.44,programming styles and we'll start with
234.48,5.039,procedural because as i mentioned this
237.36,4.159,might be the style you used when you
239.519,4.321,started with javascript because i would
241.519,4.8,argue it is the style that's
243.84,4.72,the most obvious to use if you're
246.319,3.92,getting started with programming so
248.56,4.56,let's add a new script here
250.239,4.321,procedural.javascript
253.12,3.76,you can of course name it however you
254.56,5.12,want and in the index.html file below
256.88,4.12,that link here i'll add a script import
259.68,3.44,and point at
261.0,4.199,procedural.javascript add the defer
263.12,4.24,attribute to make sure that this script
265.199,4.241,only runs after the entire file has been
267.36,3.279,parsed and of course close the script
269.44,2.88,tag as well
270.639,3.521,and now we are importing this and we're
272.32,3.84,ready to write some code
274.16,3.68,and now we can really think about the
276.16,3.2,different steps you want to execute
277.84,3.359,because that's what procedural
279.36,4.0,programming is all about
281.199,3.841,so if we have a look at our html file
283.36,3.6,what do we want to do
285.04,4.32,well we want to listen to a click on
286.96,4.08,this button of course or to be precise
289.36,2.96,we want to listen for the submission of
291.04,3.04,the forum
292.32,3.52,we want to get the values the user
294.08,2.96,entered for the username and for the
295.84,3.84,password
297.04,5.52,and we might want to validate those
299.68,4.239,values so at least make sure both fields
302.56,3.84,are not empty
303.919,4.401,show an error message if they are empty
306.4,4.4,and then in the end if everything has
308.32,6.48,been valid do something with the data
310.8,7.04,let's say create a new object a new user
314.8,5.2,object and then log that to the console
317.84,4.079,or something like this so something
320.0,2.96,fairly trivial that is what we could do
321.919,3.041,here
322.96,3.76,so for that back to the procedural js
324.96,3.519,file what do we need to do here well we
326.72,3.919,need to get access to the form and to
328.479,4.16,the two inputs so that we can work with
330.639,4.721,the data there and then we can add a
332.639,4.641,listener to the form and so on so
335.36,4.559,getting access to those things is easy
337.28,5.28,we have ids with the user input id on
339.919,4.801,the forum with the user name id on this
342.56,4.32,input and the password id on this input
344.72,3.52,so we can use these three inputs to gain
346.88,3.2,access
348.24,4.0,so i'll store the form in a form
350.08,4.32,constant or i'll store a reference to
352.24,4.48,the forum in the form constant and we
354.4,5.2,can get access with getelementbyid and
356.72,4.88,then here it was user dash input
359.6,4.24,and then second
361.6,5.28,console i want to create here is the
363.84,5.199,username input we can get access with
366.88,3.439,document getelementbyid
369.039,3.121,username
370.319,5.361,and last but not least the password so
372.16,6.159,the password input that can be fetched
375.68,5.84,with document getelementbyid
378.319,5.521,password like this okay
381.52,4.48,so we get this axis let's now add an
383.84,4.079,event listener so on the forum i'll add
386.0,3.44,an event listener to the submit event
387.919,3.201,because that is the event we want to
389.44,3.199,listen to right
391.12,3.68,and then we want to trigger a function
392.639,3.68,when that executes we could use an
394.8,4.0,anonymous function here but i will
396.319,4.16,create a named function the sign up
398.8,3.44,handler let's say
400.479,4.0,it will get an event object
402.24,3.36,automatically and i will point at this
404.479,2.401,function
405.6,3.12,when this
406.88,4.4,event is triggered when this event is
408.72,4.24,fired now this is vanilla javascript and
411.28,4.56,of course even though we're using the
412.96,4.799,procedural style we are allowed to work
415.84,4.479,with functions as well this is not
417.759,4.72,forbidden we just don't organize our
420.319,3.44,code around the idea of using functions
422.479,3.361,all the time
423.759,4.241,so we pointed this function here when
425.84,5.04,this event is triggered and now in this
428.0,5.68,function we write all the logic again
430.88,5.68,step by step which we want to execute so
433.68,5.6,thus far our logic is get access to the
436.56,4.72,different elements step by step and then
439.28,3.919,define this function and then set up
441.28,5.199,this listener now when this function
443.199,4.961,runs we need to get the inputs here the
446.479,3.601,values the user entered we need to
448.16,4.24,validate them and then create a dummy
450.08,4.16,user object with that data
452.4,4.72,and actually first of all i want to call
454.24,5.76,event prevent default to prevent that
457.12,5.68,browser default of sending the form to a
460.0,5.039,backend server which yet leads to a page
462.8,4.399,refresh which i don't want here so let's
465.039,4.321,call this as well
467.199,4.881,and now we can get started let's get the
469.36,3.679,concrete values the user entered so we
472.08,3.6,got the
473.039,6.641,entered username and we can get this out
475.68,6.16,of username input dot value
479.68,3.6,we can access dot value here because we
481.84,3.199,know that the element we're selecting
483.28,3.359,here is an input element which will have
485.039,3.921,a value property
486.639,4.56,side note you could actually also only
488.96,4.079,get access to the username input in here
491.199,4.321,if you wanted to because we really only
493.039,4.401,need the two inputs here inside of this
495.52,3.84,function so you don't have to do it
497.44,4.24,globally here in this function it would
499.36,4.32,also suffice so maybe let's reorganize
501.68,3.6,our code to do that inside of this
503.68,4.079,function
505.28,4.319,maybe even after preventing the default
507.759,3.44,really right before we need a value
509.599,2.961,that's not required but it is a
511.199,2.881,possibility
512.56,3.68,so we get the
514.08,3.28,enter the username we can also get the
516.24,2.479,entered
517.36,3.52,password and we get that from the
518.719,3.68,password passwordinput.value of course
520.88,3.68,just like this
522.399,4.481,now with the two values we can validate
524.56,4.64,them we could do this with a if check
526.88,4.88,where we check if the entered username
529.2,4.639,if we trim it to remove axis white space
531.76,4.56,at the beginning and end if the length
533.839,5.521,is equal to zero which means this is an
536.32,3.84,invalid input it's empty in this case we
539.36,2.56,could
540.16,4.32,show an alert to the user and say
541.92,4.32,invalid input
544.48,4.16,username
546.24,4.08,must not be empty that's something we
548.64,3.92,could do here
550.32,4.32,and we also return here which means we
552.56,4.32,cancel this function execution so that
554.64,4.0,we don't continue in the code
556.88,3.76,if we make it past this if check we
558.64,5.12,might still have an invalid input
560.64,4.72,because our password our entered
563.76,3.68,password
565.36,4.159,whoops with a double s here entered
567.44,4.0,password that might also be wrong so we
569.519,3.841,trim this and check if the length is
571.44,4.32,zero or maybe if it's
573.36,4.0,smaller or equal than five because let's
575.76,3.44,say we want the password which has at
577.36,4.0,least five characters
579.2,3.199,if it is too short we can say invalid
581.36,3.36,input
582.399,6.081,password must be
584.72,5.679,six characters or longer and again we
588.48,4.24,thereafter return so that we don't
590.399,4.721,continue with the function execution if
592.72,4.559,we do continue we made it past both if
595.12,4.0,checks and we now know we have a valid
597.279,4.56,input and that's where we now could
599.12,5.279,create a new user object
601.839,4.881,simply with an object literal again just
604.399,4.88,like functions are not forbidden here
606.72,4.96,objects are not forbidden here it's not
609.279,4.961,like you're only allowed to use objects
611.68,4.32,when you're writing object-oriented code
614.24,3.68,it's more about how you organize your
616.0,4.48,code and here it's really a step-by-step
617.92,4.24,execution and we're using a very simple
620.48,4.4,literal object here
622.16,4.799,to store some data to group some data so
624.88,4.399,here we then have let's say the username
626.959,4.241,which is our entered username we have
629.279,5.201,the password which is our entered
631.2,6.16,password oops entered password and with
634.48,5.68,that we're we're good and now we can
637.36,5.28,console lock the user and maybe also
640.16,3.52,send a greeting with hi
642.64,3.199,i am
643.68,4.08,plus
645.839,5.521,name like this
647.76,4.88,with that we had a very basic procedural
651.36,3.76,program
652.64,4.639,if we now save this
655.12,3.68,and we go back to the browser and reload
657.279,3.841,this page
658.8,4.0,if i enter maximilian here and then any
661.12,5.44,password of my choice
662.8,6.08,which is let's say too short actually
666.56,4.56,i get this error invalid input password
668.88,4.16,must be six characters or longer
671.12,4.08,if i don't enter maximally in here but
673.04,4.799,i'll leave this empty i get this error
675.2,6.24,regarding my username and if i do have
677.839,5.761,valid inputs in both fields here
681.44,4.959,you see we're logging the user we're
683.6,5.28,logging hi i am maximillian now as i
686.399,4.56,mentioned this code here should look
688.88,4.079,fairly straightforward to you there also
690.959,2.961,is nothing wrong with it but this would
692.959,3.841,be the
693.92,5.12,the simple procedural way of writing
696.8,4.88,your code you think about the different
699.04,4.799,steps you need to execute and you then
701.68,4.64,just write them down and don't get me
703.839,4.721,wrong code will always be executed from
706.32,4.319,top to bottom but you could also
708.56,4.959,organize this differently so let's have
710.639,6.481,a look at the object oriented
713.519,5.76,programming style next
717.12,4.64,so we wrote this code here in the
719.279,6.081,procedural style you could say now let's
721.76,5.519,create a new javascript file oop dot js
725.36,4.64,where we will write basically the same
727.279,3.761,logic but now using an object-oriented
730.0,3.6,style
731.04,5.84,so for that in index.html i'll swap the
733.6,5.6,import for the oop.js file here
736.88,4.8,now how would this look like if we think
739.2,4.24,about this in an object-oriented way now
741.68,3.839,there are certainly different ways of
743.44,4.24,approaching this but i would like to
745.519,4.721,think about the different entities the
747.68,5.36,different types of objects we could work
750.24,5.44,with here we could say our
753.04,4.88,forum for example is one object it's one
755.68,4.24,object which in the end will have two
757.92,3.68,inputs which has this button and which
759.92,3.52,will have a method which is triggered
761.6,4.32,when the button is fired
763.44,5.12,the validation could be organized in its
765.92,4.479,own object as well in a helper object
768.56,4.0,which holds a validation logic that we
770.399,4.88,could reuse in different parts of the
772.56,5.279,application if we had multiple forms
775.279,4.321,and the user we create in the end
777.839,4.081,well we could create a blueprint for
779.6,4.4,this user as well a class or a
781.92,4.32,constructor function which allows us to
784.0,4.0,create user objects which has a built-in
786.24,3.2,greet method to show this greeting for
788.0,2.16,example
789.44,3.199,so
790.16,5.2,here in the object oriented javascript
792.639,4.401,file i will work with classes if you
795.36,3.76,were working with an older version of
797.04,4.16,javascript you could of course also work
799.12,4.24,with constructor functions instead
801.2,4.96,classes in the end are just syntactic
803.36,4.4,sugar with some extras and you learn all
806.16,4.0,about that of course in my complete
807.76,3.92,guide in the object oriented and classes
810.16,3.84,course section
811.68,5.12,so which classes do we need here well we
814.0,5.519,have our form right so add a user input
816.8,5.44,form class here and this should hold
819.519,4.481,everything that is related to my form
822.24,3.92,i also want to have another class and
824.0,4.56,the order does not really matter here
826.16,4.56,i'll just have the form at the bottom
828.56,4.719,because it is the thing i will actually
830.72,4.64,uh start with and it will use all the
833.279,3.761,other classes which i'm about to define
835.36,3.839,so i want to define them first so
837.04,4.239,technically as i said you could also
839.199,3.921,organize this differently but here
841.279,4.321,another class we'll need later is the
843.12,4.32,user itself so not the input form but
845.6,2.64,for the concrete user object we work
847.44,3.28,with
848.24,4.8,and then maybe also our
850.72,4.32,validator clause here which holds our
853.04,4.0,validation logic
855.04,3.84,now let's start with the user input form
857.04,3.919,though what could be in there
858.88,4.92,well i want to define my constructor
860.959,5.841,function which allows us to do some
863.8,5.479,initialization work whenever we create
866.8,4.24,uh instance based on this class
869.279,3.92,now my goal is to create an instance
871.04,3.2,based on this class when the app starts
873.199,3.521,in the end
874.24,5.76,so therefore here i want to get access
876.72,5.2,to the different inputs in the html file
880.0,3.44,and to the form itself so that we can
881.92,4.08,add a listener
883.44,4.88,so here i will add some properties to
886.0,5.519,the instance created based on the class
888.32,5.199,with this keyword for example a form
891.519,4.081,property and the name is up to you
893.519,4.961,and here i get access to get element by
895.6,5.359,id user dash input so here i store
898.48,4.32,access to this user input form
900.959,4.481,i also want to get access to the
902.8,5.599,different input fields in the form so i
905.44,6.959,have my username input field
908.399,6.481,document getelementbyid username
912.399,4.081,and of course one for the password so
914.88,4.0,password input
916.48,4.56,with document getelementbyid
918.88,5.199,password so basically
921.04,6.32,what we stored in constants before
924.079,5.841,here this constant this constant and
927.36,4.399,this constant is now getting stored in
929.92,4.96,properties of this
931.759,5.44,class or to be precise in properties of
934.88,4.24,the concrete objects created based on
937.199,3.841,this class
939.12,4.399,i also of course will reach out to my
941.04,5.039,form and add an event listener here
943.519,5.12,for the submit event and when this is
946.079,3.601,triggered i of course want to trigger a
948.639,2.961,function
949.68,3.92,now we could work with an anonymous
951.6,3.919,function here but since we're in a class
953.6,4.88,and we want to write object oriented
955.519,5.201,code it makes much more sense to create
958.48,4.4,a method so a function inside of an
960.72,5.28,object inside of a class here
962.88,5.759,so for that i'll add the sign up handler
966.0,5.199,method here which gets the event object
968.639,4.481,and now i can point at it here this
971.199,4.08,signup handler
973.12,3.839,this ensures that this function which is
975.279,4.401,registered on this class and which
976.959,5.521,therefore is called a method is fired
979.68,5.68,whenever the submit event occurs
982.48,5.599,and in here we can now do stuff we can
985.36,5.279,call event prevent default but we can
988.079,4.88,also get the concrete entered values and
990.639,4.081,validate them and so on
992.959,4.081,now one important word
994.72,4.08,if i want to get the let's say entered
997.04,3.68,user name here
998.8,4.959,then i of course can reach out to this
1000.72,5.44,username input so to this pointer at
1003.759,5.601,this input element in the html code we
1006.16,5.039,stored here and access dot value
1009.36,5.039,but this won't work
1011.199,5.841,why won't it work because this keyword
1014.399,5.521,inside of this method will not refer to
1017.04,4.96,this class in this case here why because
1019.92,4.72,this method gets fired upon this event
1022.0,3.679,and when you point at a function or a
1024.64,3.12,method
1025.679,4.321,based on an event that gets triggered so
1027.76,4.079,here on such a event listener that this
1030.0,4.24,keyword will be bound to the event
1031.839,5.2,target that's a default behavior to
1034.24,5.439,overwrite this we have to call bind this
1037.039,5.76,here this ensures that this keyword
1039.679,6.561,inside of sign up handler will point to
1042.799,5.921,the exact same thing this would point to
1046.24,4.4,in the constructor and that will be the
1048.72,4.24,instance created based on the class so
1050.64,4.64,now this will work correctly we can
1052.96,3.839,therefore also get the entered password
1055.28,3.759,here with this
1056.799,4.481,password input dot value
1059.039,4.161,so now we get the two values now it
1061.28,3.44,would make sense to validate them and
1063.2,3.92,here again thinking in an
1064.72,4.72,object-oriented way we could outsource
1067.12,4.64,this validation logic into a validator
1069.44,4.64,class we don't have to do that we could
1071.76,5.76,write it in line here we could just copy
1074.08,5.52,over this logic here from procedural but
1077.52,4.24,that means that whenever we have some
1079.6,5.28,other form in our application
1081.76,5.279,we can only reuse our code by copying it
1084.88,3.919,again and copy and pasting is not
1087.039,4.401,something you want to do too often
1088.799,4.481,because that is a bad programming style
1091.44,3.52,you're repeating yourself and you
1093.28,3.44,shouldn't do that
1094.96,4.4,so instead i'll add something here in
1096.72,3.6,the validator class i'll add a static
1099.36,2.88,method
1100.32,4.239,validate this means we can call it
1102.24,4.799,without instantiating this class
1104.559,4.401,and there i expect to get a value
1107.039,4.721,and then let's say a flag
1108.96,4.0,and a validator value if you want to so
1111.76,3.84,i'm writing a little bit of a more
1112.96,3.36,complex validator here what does this
1115.6,2.88,mean
1116.32,4.719,well value should be the
1118.48,4.16,value i want to check so the entered
1121.039,4.401,name and enter password
1122.64,4.399,flag should then allow us to identify
1125.44,3.76,which kind of validation we want to
1127.039,4.161,perform and then validator value is
1129.2,4.32,basically optional allowing us to
1131.2,4.4,configure the validation
1133.52,4.64,now for this to work i'll add two new
1135.6,5.12,static properties here
1138.16,4.639,required and i'm writing at all caps to
1140.72,5.52,make it clear that this is basically a
1142.799,5.681,globally unique value you could say
1146.24,4.08,and min length here
1148.48,4.88,and these are just identifiers which we
1150.32,5.52,can then use because my idea now is that
1153.36,4.96,i can check if in here in the validate
1155.84,4.959,function if the flag argument i'm
1158.32,3.84,getting if this is equal to this
1160.799,3.681,required
1162.16,5.12,so if we're running some required
1164.48,5.04,validation and if it is i want to return
1167.28,4.56,true or false i want to return true if
1169.52,4.8,the entered value is not empty and false
1171.84,2.81,if it is empty so i will return value
1174.32,1.52,trim
1174.65,4.31,[Music]
1175.84,4.959,length greater zero if it's not an empty
1178.96,3.68,input this will return true otherwise
1180.799,5.12,this will return false
1182.64,4.64,if the flag is let's say this
1185.919,4.721,min length
1187.28,6.56,then i will return value trim
1190.64,4.88,length greater validator value so this
1193.84,3.52,extra argument with which we can
1195.52,4.24,configure validation
1197.36,4.319,why am i doing it like this well simply
1199.76,4.799,just to show that now we would have a
1201.679,5.281,reusable validate function because in
1204.559,4.561,the user input form here in the sign up
1206.96,5.36,handler we can now use this
1209.12,6.16,we can now simply check if
1212.32,5.2,validator so this class i just worked in
1215.28,4.32,dot validate which we can call like this
1217.52,4.48,because it's a static method hence we
1219.6,5.439,don't need to instantiate the class
1222.0,5.799,if this yields true for the entered
1225.039,5.441,username which is the value and
1227.799,4.76,validator.required as a flag so i want
1230.48,4.72,to validate this here with the required
1232.559,5.12,validator and check if it's not empty if
1235.2,4.959,this returns true i'm fine if it does
1237.679,4.88,not return true indicated by this
1240.159,3.441,exclamation mark here i want to show an
1242.559,2.881,error
1243.6,4.16,but this is not the only validation of
1245.44,4.08,course i also want to check whenever
1247.76,2.96,validation logic here one hour
1249.52,2.72,expression
1250.72,5.04,if not
1252.24,6.08,validator validate for the entered
1255.76,4.24,password
1258.32,5.04,for the
1260.0,4.799,min length flag and a value of 5 as a
1263.36,4.4,minimum length
1264.799,5.281,if this returns not true
1267.76,4.0,or this first one returns not true in
1270.08,3.68,any of these cases i want to make it
1271.76,4.799,into this if block and here we can now
1273.76,5.49,show an alert and say invalid input
1276.559,4.0,username or password is wrong
1279.25,2.51,[Music]
1280.559,3.441,password
1281.76,3.2,should be at least
1284.0,3.36,6
1284.96,4.56,characters
1287.36,3.92,this is the alert we could show here and
1289.52,4.399,then we want to return here to not
1291.28,4.879,continue with this method execution so
1293.919,4.64,the error message the error handling
1296.159,4.481,still happens in this class here which
1298.559,4.961,makes sense because this is the place
1300.64,5.6,where i do work with my concrete values
1303.52,6.0,but the logic for checking the input is
1306.24,5.439,outsourced in a separate class now this
1309.52,4.8,is not a must do but it ensures that we
1311.679,4.88,could now reuse this validator in other
1314.32,3.92,forms of this application as well and we
1316.559,3.441,might of course have more complex
1318.24,4.08,validation logic in there than we
1320.0,4.799,currently do
1322.32,4.96,so now with this we know that after the
1324.799,5.76,safe check we have valid inputs and
1327.28,5.92,hence we could now create our new user
1330.559,4.961,so for this let's go to this user class
1333.2,4.88,and work on this here i want to define
1335.52,4.8,how a user should look like and attach
1338.08,5.2,any logic to it which it should have so
1340.32,4.64,for example here let's add a constructor
1343.28,4.96,to define some
1344.96,4.56,values with which we create a user
1348.24,4.4,specifically
1349.52,5.6,the user name and the user password
1352.64,5.68,let's say and then in here we have this
1355.12,6.24,user name set it equal to you name
1358.32,4.96,and this password set it equal to you
1361.36,4.0,password here this would allow us to
1363.28,3.92,create a new object with these two
1365.36,4.4,properties but i also want to add some
1367.2,4.64,logic i'll add a great method here to
1369.76,3.52,this user object where i just say
1371.84,3.52,console.log
1373.28,5.68,hi
1375.36,6.24,i am plus this username
1378.96,5.599,and with that we can create a new user
1381.6,6.4,based on this class down there our new
1384.559,5.201,user with new user here we need a new
1388.0,4.559,keyword to construct a new instance of
1389.76,5.44,the user class and we forward our
1392.559,5.681,entered username and our entered
1395.2,4.8,password here and thereafter we can not
1398.24,5.28,only log the
1400.0,7.2,new user but also call new user
1403.52,5.68,dot greet to execute that greet logic
1407.2,4.4,and with all that done there's just one
1409.2,4.64,remaining thing now thus far all the
1411.6,4.319,logic lives in the user input form but
1413.84,4.16,this is just a class right we need to
1415.919,3.281,instantiate it to bring this code to
1418.0,4.64,life
1419.2,4.56,so below this here we can call
1422.64,3.519,new
1423.76,4.08,user input form like this to create a
1426.159,3.201,new instance we could store it in a
1427.84,3.199,constant
1429.36,3.84,but if we don't work with this constant
1431.039,3.841,we also don't have to do that so here
1433.2,4.0,i'm just creating a new instance and
1434.88,4.24,with that this class here now comes to
1437.2,4.24,life we run this constructor we set up
1439.12,3.52,this event listener and we're there for
1441.44,3.359,good to go
1442.64,5.039,so now if we go back and we reload this
1444.799,5.76,page if we submit an empty form
1447.679,5.681,we should get an error and indeed we do
1450.559,4.801,if i enter a valid password here but i
1453.36,4.08,have an empty username it still gets
1455.36,4.559,this error and if i enter a valid
1457.44,4.0,username here but my password is too
1459.919,3.521,short
1461.44,4.0,we still get an error here if i enter a
1463.44,4.64,different password which is long enough
1465.44,4.8,we do log our user object here and this
1468.08,4.32,greeting so this now works and it's
1470.24,4.48,essentially the same logic as before in
1472.4,5.12,the procedural style the difference is
1474.72,5.28,now that we think about our code as
1477.52,4.88,different objects working together and
1480.0,4.72,we split our code logically into
1482.4,4.72,entities which can make it easier to
1484.72,5.04,reason about your code it can also help
1487.12,4.559,with reusing code as i mentioned at the
1489.76,4.159,example of the validator because we can
1491.679,4.24,use this anywhere in the application in
1493.919,3.921,the procedural style in the way we're
1495.919,4.0,doing it at the moment here we would
1497.84,4.24,have to copy this around to share it and
1499.919,4.081,again copy and pasting is bad because if
1502.08,3.599,you need to change your logic in one
1504.0,4.24,place you then need to change it in 10
1505.679,4.88,places or how often you're using it
1508.24,4.24,so that's the object oriented style so
1510.559,4.0,last but not least let's explore the
1512.48,3.439,functional programming style for this
1514.559,2.961,i'll create a new file here
1515.919,3.36,functional.js
1517.52,3.519,and of course import this here in the
1519.279,3.041,index.html file
1521.039,3.52,functional
1522.32,4.959,the idea behind functional programming
1524.559,5.6,now is that we organize our code around
1527.279,6.4,well functions so we can still then
1530.159,6.0,reuse and share logic by simply sharing
1533.679,4.88,a function by exporting it and importing
1536.159,5.12,it in another file and so on
1538.559,6.0,so how could we split this application
1541.279,5.121,here into a functionally written
1544.559,4.24,application
1546.4,5.04,it can be hard to think about this if
1548.799,4.401,you're relatively new in programming my
1551.44,3.44,personal experience shows that
1553.2,3.839,object-oriented programming is
1554.88,4.799,relatively easy to pick up because it's
1557.039,4.64,close to the real world so to say we
1559.679,4.401,think in objects and that's how we think
1561.679,4.561,about the real world as well
1564.08,4.079,the procedural style also is not too
1566.24,4.16,hard because we execute code step by
1568.159,4.161,steps and therefore all we have to do is
1570.4,4.32,that we have to think about what we want
1572.32,4.64,to do in our application step by step so
1574.72,4.88,what should happen when and then this
1576.96,5.12,code is basically writing itself
1579.6,4.48,now in the functional world
1582.08,4.959,it's a bit like in the object-oriented
1584.08,5.199,world we think about the different
1587.039,4.801,things that make up our application but
1589.279,4.321,the things are now not objects but
1591.84,4.719,instead different
1593.6,5.36,logical blocks something like a validate
1596.559,4.881,function a function to get access to a
1598.96,5.44,dom element a function to extract user
1601.44,6.239,input a function to create a new user a
1604.4,6.0,function to greet a user so basically we
1607.679,6.081,try to split our code into the different
1610.4,4.08,logical blocks we have here
1613.76,2.399,so
1614.48,3.6,in functional.js how could we get
1616.159,4.081,started because maybe that helps us
1618.08,4.8,understand how it works
1620.24,4.559,it still starts with us getting access
1622.88,4.0,to the form right we need access to the
1624.799,3.601,forms so that we can listen to the form
1626.88,3.36,submission
1628.4,4.24,to get access here
1630.24,5.439,we could write a new function
1632.64,4.8,connect form name is up to you and by
1635.679,3.681,the way you can write this function in
1637.44,4.32,any way you want in this function
1639.36,5.6,declaration style here you could also
1641.76,5.519,write it as a function expression or of
1644.96,4.48,course you could use an arrow function
1647.279,4.721,here if you wanted to that all works
1649.44,4.8,here i'll just write it like this
1652.0,4.799,so connect form just like this without
1654.24,4.48,any parameters for now and in there i
1656.799,3.521,want to get access to my form
1658.72,3.8,and i do so by calling document
1660.32,3.76,getelementbyid
1662.52,3.72,user-input
1664.08,4.4,and thereafter i will reach out to my
1666.24,3.12,form and add a submit event listener
1668.48,3.919,here
1669.36,5.039,and then then what then i want to point
1672.399,3.681,at a function that should execute when
1674.399,4.64,the form is submitted
1676.08,5.68,so maybe let's add a new function here
1679.039,5.041,the sign up handler which gets this
1681.76,4.399,event object which calls event prevent
1684.08,3.839,default it will also do more than that
1686.159,4.561,but this is something we definitely need
1687.919,5.041,to do and then i pointed it here this is
1690.72,4.88,something we could do but it's not the
1692.96,6.4,perfect way of setting this up instead
1695.6,5.679,the idea or the the core philosophy you
1699.36,4.4,really should embrace when writing
1701.279,5.12,functional code is that your functions
1703.76,5.76,should be pure and all the data they
1706.399,6.0,work with is received as parameters so
1709.52,5.2,that your functions are as predictable
1712.399,4.241,and reusable as possible
1714.72,4.16,so for this connect form function this
1716.64,6.48,means that we would probably get the
1718.88,7.76,form id as a parameter and also the form
1723.12,5.84,submit handler function as a
1726.64,4.56,parameter and then here instead of
1728.96,4.16,pointing at user input here we would
1731.2,3.28,point at form id
1733.12,3.919,and here
1734.48,5.12,we would just say forum submit handler
1737.039,4.801,and now this function has code
1739.6,4.559,which is totally reusable which makes no
1741.84,4.16,assumptions about what's in your html
1744.159,2.721,file it makes no assumption about this
1746.0,2.72,id
1746.88,3.6,and about the name of the function that
1748.72,4.0,should handle the submission
1750.48,4.48,instead we would call connect form here
1752.72,4.959,when our app is initialized so when this
1754.96,5.36,javascript file is parsed and executed
1757.679,5.921,for the first time and here i would feed
1760.32,5.839,in the concrete values so user input and
1763.6,4.24,a pointer at signup handler now of
1766.159,4.24,course in this simple app we don't gain
1767.84,5.12,much by this but now we really have a
1770.399,4.481,function which is pretty focused pretty
1772.96,4.64,straightforward pretty easy to
1774.88,5.6,understand and which is also pretty
1777.6,5.28,reusable because it's not tied to a
1780.48,4.319,specific forum in the html code if we
1782.88,3.919,had multiple forums which we wanted to
1784.799,3.921,connect with submit handlers we could
1786.799,4.48,reuse this function and we could just
1788.72,4.64,call it with different arguments that
1791.279,4.721,already is how you should think about
1793.36,5.199,code when thinking in a functional
1796.0,4.32,programming style
1798.559,3.761,so now we connect this form we point at
1800.32,3.2,the signup handler when the form gets
1802.32,4.079,submitted
1803.52,6.159,in the signup handler we now want to get
1806.399,5.601,our user input and we now also of course
1809.679,3.841,then want to validate it and create a
1812.0,3.679,new user
1813.52,4.56,now again we could copy our logic from
1815.679,3.761,procedural right we could copy this
1818.08,2.88,logic here
1819.44,3.44,for getting the user input for the
1820.96,3.28,moment and paste it in here and this
1822.88,3.44,would work
1824.24,4.72,but we're not really thinking in a
1826.32,3.76,functional way what did i just say about
1828.96,2.88,functions
1830.08,5.52,well they should be pure and should
1831.84,6.0,receive all the input they need as
1835.6,5.199,parameters and here again i'm hard
1837.84,5.36,coding ids which are ids from my html
1840.799,5.36,document into the function now we could
1843.2,4.959,do this but is this good well it's
1846.159,4.081,certainly not bad now you might argue
1848.159,3.76,that hard coding these ids into the
1850.24,3.919,function is not something you want to do
1851.919,4.081,because we got rid of it here but i
1854.159,3.76,would argue that the sign up handler is
1856.0,4.559,of course a very specific function which
1857.919,4.88,indeed can be tied to the html file
1860.559,5.201,because it really is about this sign up
1862.799,4.88,form it's not a general function here
1865.76,3.84,like connect forum was which should work
1867.679,4.48,with any form this really should only
1869.6,4.079,work with the signing up logic so that
1872.159,3.441,is fine
1873.679,3.6,but we're basically having some code
1875.6,4.24,repetition here
1877.279,3.921,why don't we create a new function here
1879.84,2.4,which we name
1881.2,3.359,get
1882.24,4.48,user input
1884.559,5.761,and here i expect to get
1886.72,4.64,my input element
1890.32,2.959,id
1891.36,4.559,and in this function we then return
1893.279,6.24,document get element by id to which i
1895.919,6.161,forward the input element id parameter
1899.519,4.241,and then i access dot value here
1902.08,3.439,now of course this only works with input
1903.76,4.24,elements but that's the idea behind this
1905.519,5.201,function so we could add an extra check
1908.0,4.72,which checks if this is an html input
1910.72,3.76,element but here i just assume that it
1912.72,4.319,always will be one and now we can
1914.48,3.36,rewrite this we can get rid of this line
1917.039,3.041,here
1917.84,3.6,and entered user name now simply is get
1920.08,2.4,user input
1921.44,2.4,for
1922.48,2.88,the username
1923.84,3.76,id
1925.36,5.12,and we can get rid of this line and the
1927.6,4.0,entered password now just is get user
1930.48,2.16,input
1931.6,3.6,for
1932.64,5.039,password and again we have a reusable
1935.2,4.319,function here and this is now leaner and
1937.679,3.681,more focused
1939.519,3.441,so now we got the input of course we
1941.36,3.84,want to validate it
1942.96,5.92,so unsurprisingly we create a new
1945.2,6.0,function for this the validate function
1948.88,4.88,and here we could again follow the logic
1951.2,5.359,we set up in the object oriented part we
1953.76,4.32,can expect a value a flag and a
1956.559,2.881,validator
1958.08,4.079,value here
1959.44,4.88,and then basically copy over the logic
1962.159,3.921,from oop because
1964.32,5.52,object-oriented programming and
1966.08,6.16,functional program is not that far apart
1969.84,5.199,it's a bit more than just translating
1972.24,5.12,classes to functions but the idea of
1975.039,4.721,organizing logic in methods and in
1977.36,5.039,classes is not that far away from the
1979.76,4.88,idea of organizing logic and functions
1982.399,4.801,so unsurprisingly we can copy the logic
1984.64,5.36,from the validate method here and add it
1987.2,4.56,in the validate function here
1990.0,3.919,now we just need to replace this
1991.76,4.159,required and this min length with just
1993.919,4.48,required admin length and add some
1995.919,4.88,global constants here and yes this is
1998.399,5.841,also possible not everything has to be
2000.799,6.961,inside of a function here we want some
2004.24,5.84,global flags some global identifiers and
2007.76,4.96,therefore we can define them just like
2010.08,5.04,this in our script here so now we have
2012.72,4.88,that we have our validate function we
2015.12,4.24,can now use this validate function here
2017.6,4.799,in the signup handler
2019.36,5.36,so here we could now call validate and
2022.399,4.88,forward the entered username and so on
2024.72,4.4,and that again would not be wrong
2027.279,2.961,but i want to create yet another new
2029.12,4.399,function
2030.24,6.24,maybe here which i'll name
2033.519,5.28,create user
2036.48,4.64,and this is a function that takes the
2038.799,3.441,username and the user
2041.12,3.2,password
2042.24,3.679,and this should now run the validation
2044.32,3.52,and that's just of course one way of
2045.919,3.76,doing it not the only correct one just
2047.84,4.239,one way of doing it so i want to run
2049.679,4.881,validation here and then if it succeeds
2052.079,4.161,also create my user
2054.56,4.4,so in here
2056.24,4.639,i will now check if
2058.96,4.48,not validate
2060.879,4.401,for user name and the required flag so
2063.44,2.8,if this yields false
2065.28,2.24,or
2066.24,5.28,if
2067.52,6.24,validate for the user password and the
2071.52,4.559,min length flag at a min length for five
2073.76,4.48,if either of the two yields falls we
2076.079,5.04,could throw an alert but this would be a
2078.24,5.52,side effect now what's a side effect a
2081.119,4.8,side effect basically is some logic you
2083.76,3.119,execute inside of a function
2085.919,2.641,which
2086.879,3.52,does something
2088.56,4.559,outside of the function which sends an
2090.399,5.44,http request which changes something in
2093.119,4.48,the dom or like in this case which shows
2095.839,4.801,an alert so these are typical side
2097.599,5.121,effects a pure function just receives
2100.64,4.08,parameters and then maybe returns
2102.72,4.8,something and for the same parameters it
2104.72,5.04,always returns the same thing a impure
2107.52,4.64,function which has a side effect
2109.76,5.359,might also do that it might also return
2112.16,4.72,always the same thing but it also might
2115.119,3.921,manipulate something outside of the
2116.88,4.16,function so like i said in the dom or a
2119.04,4.72,sender http request
2121.04,4.48,now sometimes you can't avoid this but
2123.76,3.839,here i want to have create user as a
2125.52,4.4,pure function so i will not throw my
2127.599,4.641,alert here instead i will throw a new
2129.92,4.0,error here with an error message of
2132.24,4.48,invalid input
2133.92,5.36,and i'll just copy the error message
2136.72,4.96,from the oop file here
2139.28,4.96,so copy that string
2141.68,4.88,and throw this here as an error message
2144.24,3.839,on this javascript error so here we're
2146.56,3.2,not showing an alert we're really
2148.079,4.241,throwing an error and that will
2149.76,4.16,automatically cancel the execution of
2152.32,4.08,the remaining function
2153.92,4.56,if this error gets not thrown so if we
2156.4,3.439,make it past this if check if we do have
2158.48,4.32,valid inputs
2159.839,5.76,then i will return a new object
2162.8,4.88,and that is my user with a username
2165.599,4.081,which holds the username value and with
2167.68,3.84,a password which holds this user
2169.68,3.919,password value
2171.52,4.48,so now create user is something we could
2173.599,5.441,call here in the sign up handler
2176.0,5.599,we got our new user by calling create
2179.04,5.68,user and we forward the entered
2181.599,6.081,username and the entered
2184.72,5.2,password now this could fail however
2187.68,5.04,this would throw an error if we have
2189.92,5.28,invalid inputs so here we can use try
2192.72,4.56,catch and again we could use try catch
2195.2,4.399,in the object oriented style and the
2197.28,4.64,procedural style as well don't get me
2199.599,5.041,wrong but now i think here it's really
2201.92,4.96,clean to do it like this we use try
2204.64,4.16,catch and we try to create a new user
2206.88,4.64,but if this fails i will now show my
2208.8,4.88,alert here and yes this will now produce
2211.52,5.04,a side effect but we could even
2213.68,5.6,outsource this into a separate function
2216.56,4.32,show alert but since i would do nothing
2219.28,3.76,else in there but call the alert
2220.88,4.16,function i'll do it just in here and as
2223.04,4.4,i said sometimes you can't avoid it it's
2225.04,4.48,okay to have functions that produce side
2227.44,5.12,effects you just want to keep most
2229.52,5.28,functions pure and side effect free
2232.56,4.48,here however i will output the error
2234.8,4.64,message in an alert
2237.04,5.12,if this succeeds however i want to
2239.44,5.2,console log the new user and of course
2242.16,4.959,also greet the new user
2244.64,3.76,for that we could create a number a new
2247.119,5.201,function here
2248.4,6.8,the greet user function
2252.32,4.32,which gets a user object and just calls
2255.2,2.639,console.log
2256.64,3.68,hi
2257.839,4.081,i am
2260.32,3.759,plus user
2261.92,3.679,username
2264.079,3.52,and again this here would also
2265.599,3.681,technically be a side effect by the way
2267.599,4.641,because we do something outside of the
2269.28,6.0,function so here i can then call greet
2272.24,4.879,user and forward the new user and there
2275.28,4.559,are different ways of writing this these
2277.119,5.281,are just examples of course
2279.839,5.041,if we now save this and we reload this
2282.4,4.64,page if the form is empty and i click
2284.88,3.84,submit i get this error
2287.04,5.52,if i have a valid username but my
2288.72,5.44,password is too short i get an error
2292.56,4.16,if my
2294.16,4.88,password is long enough but the username
2296.72,5.119,is empty i get an error
2299.04,4.64,and if both is valid
2301.839,4.801,and we click create user
2303.68,4.56,we're showing hi i am maximilian
2306.64,3.28,the log is missing because i didn't
2308.24,5.119,enter it here so here of course i want
2309.92,6.24,to log my new user and then retry this
2313.359,2.801,so reload
2317.68,5.04,enter the values here again
2319.839,5.441,and now we get the same output as before
2322.72,4.879,so this now really is working and now
2325.28,4.799,this is an example of functional
2327.599,5.121,programming the core idea of course
2330.079,5.441,being that we organize our code into
2332.72,4.8,functions where most functions are pure
2335.52,4.72,and side effect free and therefore
2337.52,5.2,highly reusable so we saw three
2340.24,4.48,different styles and of course you can
2342.72,4.08,also mix these styles you could have a
2344.72,4.16,procedural style where you also work
2346.8,3.279,with classes and where you have multiple
2348.88,3.04,functions
2350.079,4.0,you can have a functional style where
2351.92,4.24,you somehow all the sneak in some
2354.079,3.921,classes though it then technically
2356.16,2.8,wouldn't be a pure functional style
2358.0,3.44,anymore
2358.96,4.8,which style is the best though well the
2361.44,4.8,best style is the style which best works
2363.76,4.16,for you that really is the truth now
2366.24,3.92,there will be people who strongly
2367.92,4.56,disagree because like a couple of other
2370.16,4.24,things in programming this really is
2372.48,4.96,something where you can have religious
2374.4,5.12,debates you can really discuss this and
2377.44,4.32,for a lot of people it seems to be the
2379.52,5.44,most important thing in life
2381.76,6.0,not to me though you can write code you
2384.96,4.72,can write apps with either style and you
2387.76,3.04,should find the style that best suits
2389.68,3.12,your needs
2390.8,4.319,now the more experience you get as a
2392.8,4.799,developer the more you will see that for
2395.119,5.041,a certain application types
2397.599,4.721,some styles tend to work better than
2400.16,4.159,other styles and again you can find
2402.32,5.12,discussions about this on the internet
2404.319,6.081,some of them are even kind of friendly
2407.44,5.44,which will show different applications
2410.4,4.16,and different examples for when to use
2412.88,4.4,which style
2414.56,5.519,you also sometimes have programming
2417.28,5.2,languages which strongly favor one style
2420.079,4.801,over another for example c sharp is a
2422.48,4.8,programming language which is heavily
2424.88,4.719,object oriented javascript on the other
2427.28,4.079,hand is pretty versatile there you can
2429.599,3.681,follow any style
2431.359,3.361,and therefore sometimes you also are
2433.28,3.76,forced into a certain style and
2434.72,4.32,sometimes you are not it's important to
2437.04,4.48,be aware of all these styles and
2439.04,4.4,nowadays at this point of time the
2441.52,5.2,functional style is really having a
2443.44,5.84,strong comeback and is super popular and
2446.72,4.639,it does have great advantages it's quite
2449.28,3.28,readable your code is really nicely
2451.359,3.841,organized
2452.56,5.279,it's very straightforward functions tend
2455.2,4.56,to be relatively small if you're using
2457.839,4.961,this style correctly
2459.76,4.24,and it also produces highly reusable
2462.8,3.2,code
2464.0,4.16,object-oriented programming was
2466.0,4.56,extremely popular a couple of years ago
2468.16,4.4,and it's still far from being not
2470.56,4.08,popular don't get me wrong
2472.56,4.32,and it does have advantages it's also
2474.64,5.199,producing reusable code and it splits
2476.88,4.64,your code into logical pieces now with
2479.839,3.841,the classes you sometimes have a little
2481.52,4.559,bit of overhead which you don't really
2483.68,4.399,want though and sometimes it's easier to
2486.079,3.201,split it when following the functional
2488.079,3.201,style
2489.28,4.24,the procedural style
2491.28,4.48,is not bad at all and great for some
2493.52,4.559,simpler scripts the more complex your
2495.76,4.72,application gets the more complex it
2498.079,5.28,might get to work with this style though
2500.48,4.8,because you will naturally end up with
2503.359,3.681,at least using some classes or some
2505.28,4.16,other functions to make it more readable
2507.04,5.36,at some point because if you only use
2509.44,5.44,this style and you write your steps your
2512.4,4.8,code step by step your code can get
2514.88,5.6,harder to organize and to reason about
2517.2,5.119,but again here also you can mix in more
2520.48,3.28,functions and so on and therefore also
2522.319,4.0,write great applications with the
2523.76,4.96,procedural style i hope that this
2526.319,4.401,overview was helpful and that it helps
2528.72,4.24,you make decisions about which styles
2530.72,4.399,you want and most importantly that it
2532.96,4.08,helps you understand styles being used
2535.119,4.96,in different projects or in different
2537.04,7.16,frameworks you work with in your future
2540.079,4.121,as a javascript developer
