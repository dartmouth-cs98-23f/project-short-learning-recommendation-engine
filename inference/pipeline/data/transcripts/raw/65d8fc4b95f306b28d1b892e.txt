imagine we have a function f that takes
in a bit either 0 or 1 and returns a bit
it is given to us as a sort of Black Box
we cannot look inside this function to
see what it does or try to understand
how it works the only thing we can do is
send in a bit and read the output bit
our task is to find out if this function
f is constant or balanced
if a function is constant then the
output is always the same no matter the
input
here's a truth table for the constant
function constant zero which always
returns zero there is also constant one
which acts in the same way always
returning one
balanced functions on the other hand
return zero half the time and one half
the time if we look at the not gate
truth table it is balanced since it
returns zero for one input and one for
another input the number of inputs
resulting in zero is equal to the number
of inputs resulting in one
if we want to find out if a function is
constant or balanced we can reframe this
problem into figuring out if F of 0
equals F of one since if the function is
constant this will hold true
whereas if the function is balanced F of
0 will not equal F of one
for a classical computer the number of
calls needed to the function to solve
the problem is two F of 0 and F of 1
both need to be calculated to find out
if F of 0 does or does not equal F of
one so both zero and one need to be
input taking two calls over the function
with quantum computers however
deutsche's algorithm needs only one call
of the function to find out if it's
constant or balanced before we can
understand how this is done however we
must first discuss how we run functions
on quantum computers we normally think
of functions like this where we input X
and get some output f of x
this works fine for classical computers
but in Quantum computation all Gates and
operations must be reversible
to understand how we can make functions
reversible
we will look at how a classical gate can
be made reversible and then use the same
techniques to create our Quantum
function or Oracle if a function is
reversible then given the output we can
determine the input for example if we
have an operation that negates the first
bit we know what the input was as each
row of the outputs in the truth table
can uniquely identify the input
if we look at the and gate truth table
however we can't tell what the input was
if it outputs a zero it could have been
any one of these three different inputs
thus the gate is not reversible
but we can use some pretty awesome
techniques and make any get we want
reversible one way is by returning the
inputs as well as inputting another bit
let's call it C and exclusive oriented
with the output f x if we now look at
the truth table each output for each
input is unique this technique allows us
to make any operation reversible we use
the same technique when making Quantum
oracles a standard Quantum Oracle looks
like this where we input X and Y X being
the input to the function and Y being
the target qubit to write the answer to
we then output X as well as y exclusive
order with f of x this ensures the
Oracle is reversible if we look at it in
terms of Transformations the Oracle acts
on the state x y and turns it into X Y X
or f of x now you might be looking at
this and thinking that this is a very
obscure way of crewing a function
but if we input Y is zero then the
rightmost cube it becomes f of x
since zero exclusive ORD with a bit
value of x always returns X so in the
case where Y is equal to zero the Oracle
transforms the state x 0 into x f of x
now to get the function output all we
need to do is measure the rightmost
qubit giving us f of x
one last thing we need to understand
before tackling deutsche's algorithm is
a special case of quantum oracles called
the phase Oracle if we set the target
qubit to the minus State we get a thing
called phase kickback where instead of
the function output being applied to the
Target qubit a phase is applied to the
input qubit let's quickly prove this
result as it is used in many Quantum
algorithms we start with the input as an
arbitrary bit X and the Target in the
minor state
when we query the Oracle since the
target is in a superposition the unitary
Matrix U of f acting as the function
gets distributed into the superposition
and acts on each of the superposition
States individually
solving the exclusive ores we get 1 over
root 2 x f of x minus X not f of x
now we get two cases if f of x equals
zero then the state becomes one over
root two x zero minus X1 which if we
factor out the X the state becomes x
minus if however f of x equals one then
the state becomes one over root two x
one minus X zero we can take out
effective negative one making the state
negative one over root two x zero minus
X1
simplifying the state becomes negative x
minus
we can generalize these findings through
the equation negative one to the power
of f of x x minus
as you can see the target qubit was left
unchanged and a phase of negative one to
the power of f of x was applied to the
input qubit
querying a Quantum Oracle in this way
with the Target qubit in the minor State
it's called a phase Oracle and it's an
integral part of many Quantum algorithms
now we get to the fun part we can
finally understand how deutsche's
algorithm works this is a circuit for
the algorithm let's label different
parts of the circuit with PSI so we can
keep track of where we are in the
circuit initially the qubits are in the
state zero zero at PSI sub 1 the qubits
are in the state 0 1. then at PSI sub 2
the state is plus minus after a hadimod
gate is applied to each of the two
qubits for clarity we will rewrite the
plus State as one over root two zero
plus one and distribute the minor State
into the plus state
we now query the Oracle since the input
state is in a superposition we
distribute the unitary Matrix acting as
the Oracle function into each of the
superposition States
now if we look at the form of each of
the superposition States they're in the
phase Oracle form so applying U of f to
the first state with X equaling to zero
in our general phase Oracle equation it
becomes negative 1 to the power of f of
0 0 minus and the other state with the
input being 1 becomes negative 1 to the
power of f of 1 1 minus
to clean up the equation we'll quickly
just factor out the minus key a bit
and we'll also emit it from the rest of
the computation since it is not needed
anymore now our computation is in this
state
let's consider two different scenarios
the outputs F of 0 and F of 1 could be
equal to each other or not equal to each
other
in the case where they are equal the
equation becomes 1 over root two zero
plus one if F of zero and F of 1 equals
zero and 1 over root 2 negative zero
minus one if they are equal to one
but in this case we can factor out a
global phase of negative one so the
equation becomes negative one over root
two zero plus one with that we can
combine these two equations for both
cases and so that when F of zero equals
F of one the state becomes plus or minus
one over root two zero plus one
on the other hand if F of zero does not
equal F of one then the state becomes
one over root two zero minus one if F of
zero equals zero and F of one equals one
or one over root two negative zero plus
one if it's the other way around
in the second case we can factor out a
negative one as a global phase leaving a
relative phase of negative one in the
state
once again generalizing when F of 0 does
not equal F of one the state becomes
plus or minus one over root two zero
minus one
putting these side by side you can start
to see the differences in the states
we can rewrite the state where F of zero
equals F of one as the plus day
and the case where F of zero does not
equal F of one in the minor state
now we do the final part of the
algorithm applying a hard mud gate to
the first qubit this in the case where F
of 0 equals F of 1 brings the qubit to
zero and in the case where F of zero
does not equal F of one brings the qubit
to one
now we can measure the first queue bit
and we are done with the algorithm if we
measure a zero then the function is
constant as F of zero equals F of one
on the other hand if we measure a one
then the function is balanced as F of
zero does not equal F of one and just
like that we have determined if the
function was constant or balanced in a
single query
even though this may not seem very
useful as finding out if a function is
constant or balanced doesn't have many
applications
this algorithm does showcase Quantum
Supremacy and a lot of the techniques
used in this algorithm are used heavily
in other algorithms from here I'd
recommend learning the Deutsche Dozer
algorithm as is an algorithm that deals
with the same problem of finding if a
function is constant or balanced but
instead of one bit as an input it is a
general case that accepts any number of
bits as an input to the function
