second,duration,transcript
2.08,4.4,all right what's going on everybody
3.84,6.24,graphs a graph is a non-linear
6.48,6.239,aggregation of nodes and edges a node
10.08,4.8,also known as a vertex may contain some
12.719,4.4,piece of data and an edge is a
14.88,3.68,connection between two nodes there are
17.119,4.401,two types of graphs we're going to
18.56,4.719,discuss undirected and directed an
21.52,4.56,example of an undirected graph could be
23.279,5.681,a social network like facebook each node
26.08,5.119,could represent a user and if one user
28.96,4.64,is friends with another user well we
31.199,4.641,could establish a friendship and edge a
33.6,4.24,connection between these two nodes if
35.84,5.12,two nodes are connected they have what
37.84,6.0,is known as adjacency in this example
40.96,5.919,larry is friends with patrick and sandy
43.84,5.28,so larry has adjacency to patrick and
46.879,4.801,sandy patrick is friends with larry
49.12,4.72,sandy spongebob and spongebob is friends
51.68,3.92,with sandy patrick and squidward and
53.84,4.64,squidward is adjacent to only one
55.6,4.799,neighbor spongebob so a social network
58.48,4.16,could be an example of an undirected
60.399,4.48,graph the other type of graph is a
62.64,5.04,directed graph a director graph contains
64.879,5.6,edges that will link one node to another
67.68,5.84,however these are one-way connections in
70.479,5.441,this example node a would have adjacency
73.52,4.8,to node b but not the other way around
75.92,4.559,however it is valid to have one node
78.32,4.32,pointing to another node and that node
80.479,4.161,could point back to the previous node an
82.64,3.92,example of a directed graph could be a
84.64,4.56,street map let's say you're working on a
86.56,5.12,travel app and each node is a possible
89.2,4.8,destination these single edges could be
91.68,4.24,one-way streets and these double edges
94.0,3.36,could be two-way streets you can move
95.92,2.96,back and forth between these two
97.36,4.24,destinations
98.88,5.36,there are two popular ways to represent
101.6,5.36,a graph an adjacency matrix and an
104.24,5.6,adjacency list with an adjacency matrix
106.96,5.36,we could create a 2d array one row and
109.84,4.239,one column for each node if we need to
112.32,4.24,check to see if there's adjacency
114.079,4.32,between two nodes we would first find
116.56,4.879,the index of the node we're beginning at
118.399,4.801,let's say a so we would go to node a and
121.439,5.121,then find the index of the node we're
123.2,6.0,trying to travel to so b so row a column
126.56,4.8,b if there are no edges this would be
129.2,5.039,zero if there is an edge this would be
131.36,5.76,one so since there's one here within row
134.239,5.281,a column b well there's adjacency from
137.12,5.28,node a to node b but if we take a look
139.52,5.359,at row a column c this is zero so
142.4,4.559,there's no adjacency between a to c but
144.879,4.481,if there was well we would replace the
146.959,4.401,zero with one then now there are pros
149.36,4.48,and cons with the matrix one of the
151.36,4.879,benefits is that the runtime complexity
153.84,4.96,to locate an edge is big o of one it's
156.239,5.201,constant all we have to do is find two
158.8,5.36,indices so we have to find the row and
161.44,6.24,the column however the space complexity
164.16,5.6,to store a matrix is big o of v squared
167.68,3.76,v as in the number of vertices that we
169.76,4.4,have but you could also think of that as
171.44,5.84,n and for the number of nodes big o of n
174.16,5.84,squared so since we have five nodes and
177.28,5.44,five columns we would have a total of 25
180.0,4.959,spaces so the benefits of a matrix is
182.72,5.2,that it's very quick to look up an edge
184.959,4.961,however a matrix uses a lot of room so
187.92,4.8,it tends to suit graphs that have a lot
189.92,6.0,of edges on the other hand we have an
192.72,4.48,adjacency list an adjacency list is an
195.92,4.8,array or
197.2,5.92,list of linked lists each element is a
200.72,4.72,separate linked list and each header
203.12,4.8,within the linked list would contain the
205.44,4.64,address of a node if there's adjacency
207.92,4.64,between one node and another we would
210.08,5.12,add the adjacent node to our linked list
212.56,4.0,so to find adjacency between two nodes
215.2,3.92,we would find the node that we're
216.56,5.44,starting at let's see if b is adjacent
219.12,5.199,to e so we would locate index b and
222.0,4.159,travel this linked list until we find
224.319,4.401,the node that we're looking for that
226.159,4.72,means there is adjacency between nodes b
228.72,3.84,and e even if there's a node that is not
230.879,3.761,adjacent to any neighbors we would still
232.56,3.84,want to add it to our adjacency list
234.64,4.159,just in case we do update it here are
236.4,4.96,the pros and cons of an adjacency list
238.799,5.201,the time complexity to locate an element
241.36,5.04,is big o of v v as in the number of
244.0,5.28,vertices you can also think of this as n
246.4,5.119,so this would be big o of n to locate an
249.28,4.64,edge we would first access the node that
251.519,4.241,we're beginning at by an index so let's
253.92,4.48,begin at b and we are looking for
255.76,4.719,adjacency between b and e
258.4,4.0,since each element is a linked list we
260.479,3.921,need to traverse this linked list
262.4,3.2,linearly until we find the node that
264.4,3.68,we're looking for
265.6,5.44,so in that way it's linear however a
268.08,5.52,benefit of a list over a matrix is that
271.04,5.68,they use less space the space complexity
273.6,7.039,of an adjacency list is big o of v plus
276.72,6.64,e v for the number of vertices aka nodes
280.639,4.961,and e for the number of edges so yeah
283.36,4.96,everybody those are graphs a graph can
285.6,4.72,be used to model a network each node is
288.32,4.56,a piece of data within our network and
290.32,5.2,an edge connects nodes so like i said
292.88,4.56,it's a popular way to model networks
295.52,4.399,which don't necessarily have any sort of
297.44,4.319,order so yeah that's an intro to graphs
299.919,4.241,and in the next two topics we'll create
301.759,4.561,our own adjacency matrix and adjacency
304.16,4.16,list hey if you enjoyed this video give
306.32,4.0,it a thumbs up if you have any ideas of
308.32,3.76,where else you could implement a graph
310.32,3.36,let me know in the comment section and
312.08,5.32,of course subscribe if you'd like to
313.68,3.72,become a fellow bro
