second,duration,transcript
0.16,4.72,this is a web app this is a web app this
2.72,3.92,thing here also a web app dude why am i
4.88,3.6,doing this again i built the same app 10
6.64,3.36,times with 10 different frameworks using
8.48,3.279,10 different programming languages it
10.0,3.36,was a horrible experience but i learned
11.759,3.281,a lot and i figured out which full stack
13.36,3.04,framework is the greatest of all time
15.04,3.12,which will be revealed in dramatic
16.4,3.52,fashion at the end of this video to
18.16,3.279,maximize the watch time on this journey
19.92,3.599,you will meet 10 different server side
21.439,4.881,frameworks like rails django laravel
23.519,5.201,spring.net next js phoenix rocket gin
26.32,3.68,vapor and ktor i realize that's 11 but
28.72,3.12,you don't need to be good at math to be
30.0,3.04,a programmer this video was insanely
31.84,2.96,difficult because each one of these
33.04,3.359,frameworks uses a different programming
34.8,3.36,language for each one of them we will
36.399,3.84,look at the overall developer experience
38.16,3.919,including things like setup routing
40.239,3.441,database integration and the overall
42.079,3.121,architecture now before we get started
43.68,3.12,here's a warning the framework you
45.2,3.12,choose by the end of this video is going
46.8,3.279,to dictate your life for the next 10
48.32,3.68,years as you grow your startup into a
50.079,3.841,deca unicorn if your startup fails it's
52.0,4.0,100 because you didn't choose the right
53.92,4.56,framework reminds me of when my dad made
56.0,4.399,me choose which of my pet calves to
58.48,3.919,slaughter with my own hands for my sixth
60.399,3.84,birthday now before we look at the code
62.399,4.001,let's first answer the question of what
64.239,3.601,does a web framework actually do there
66.4,3.36,are three main things you should know
67.84,3.84,first they provide an abstraction over
69.76,4.24,your relational database they typically
71.68,3.6,have a built-in object relational mapper
74.0,3.52,that can migrate code from your
75.28,3.839,preferred programming language into sql
77.52,3.76,code that can be used by the database
79.119,4.401,second they provide routing that can map
81.28,4.4,a url in the browser to code that you
83.52,4.48,want to run on the server and third they
85.68,4.799,provide a way to dynamically insert data
88.0,4.64,from your database directly into html
90.479,3.761,for the ui together these three elements
92.64,4.0,make up the model view controller
94.24,4.0,architecture or mvc which is by far the
96.64,3.2,most common approach when building a
98.24,3.6,full stack web app the first framework
99.84,3.52,we'll look at is ruby on rails made
101.84,3.36,famous for building some of the biggest
103.36,3.68,companies in the world like shopify
105.2,3.36,airbnb and github rails was
107.04,2.88,revolutionary when it came out because
108.56,3.199,it dramatically simplified web
109.92,3.519,development compared to other approaches
111.759,3.841,of the day it's still very popular in
113.439,3.761,2022 and is kind of a rebel in the web
115.6,3.6,development space it has adjacent
117.2,4.4,libraries like hotwire stimulus and
119.2,4.16,turbo that take an html centric approach
121.6,3.04,to building web apps which goes against
123.36,3.28,the approach you might see in front-end
124.64,3.52,frameworks like react angular and vue to
126.64,3.119,get started with rails you'll first need
128.16,3.76,to have ruby installed then install the
129.759,3.921,rails gem and run rails new i'm
131.92,3.76,developing this app on a fresh install
133.68,3.68,of wm linux and i did run into some
135.68,3.04,issues with the initial setup these were
137.36,3.2,errors that could easily be solved with
138.72,3.519,a google search but the initial setup
140.56,3.36,was a little more error prone than other
142.239,3.761,frameworks once you get the project set
143.92,3.84,up though the rail cli is extremely
146.0,3.599,powerful not only does it do things like
147.76,3.6,serve the application with rail server
149.599,3.681,but it can also generate a ton of code
151.36,3.599,for you automatically with commands like
153.28,2.959,scaffold now if we look in the file
154.959,2.56,explorer you'll notice a bunch of
156.239,3.121,different folders here and that's
157.519,3.36,because rails is a battery's included
159.36,4.0,framework it handles your relational
160.879,3.681,database testing logging and a bunch of
163.36,2.64,other stuff it might look pretty
164.56,3.2,overwhelming at first your main
166.0,3.599,application code is contained in the app
167.76,3.52,directory where you'll find folders for
169.599,3.36,models views and controllers the first
171.28,4.239,thing we'll look at is routing and the
172.959,5.041,routes.rb file from this file we can map
175.519,4.08,urls to actions in a controller
178.0,3.04,resources create all the routes we would
179.599,3.601,need for a basic red feature
181.04,4.08,automatically it's kind of magical but
183.2,4.16,what it's actually doing is setting up a
185.12,3.92,mapping between urls in the browser and
187.36,3.519,controller actions now when the user
189.04,4.08,visits a url it will trigger one of
190.879,4.08,these actions on the server that action
193.12,4.08,might go and retrieve some data from
194.959,4.0,your database the logic for that data is
197.2,3.679,contained in the model but before we can
198.959,3.92,use the data in the database we need to
200.879,3.761,run a migration which will take the code
202.879,3.44,in the model and sync it up with the
204.64,3.679,actual database and all the data is
206.319,4.0,managed with an object relational mapper
208.319,3.64,called activerecord and then finally you
210.319,4.64,have a view which is an
211.959,4.761,html.erp file erb stands for embedded
214.959,4.241,ruby and it allows you to render your
216.72,3.92,data dynamically inside an html file
219.2,3.36,overall this provides a very nice
220.64,3.44,separation of concerns and rails is very
222.56,3.36,opinionated which means you can achieve
224.08,3.6,a lot of functionality with very little
225.92,3.28,code the scaffold not only retrieves
227.68,3.68,items from the database but it also
229.2,4.56,provides ui to create and update that
231.36,4.159,data as well but too much magic can also
233.76,3.36,be a bad thing depending on who you ask
235.519,3.841,and ruby is not the most popular
237.12,3.52,language in the world but python is what
239.36,3.04,if there is a way we could build web
240.64,3.519,apps like this with python and that's
242.4,3.6,where django comes in it's also
244.159,4.08,extremely popular and has been used to
246.0,4.159,build massive sites like spotify and
248.239,3.92,bitbucket when you generate a new django
250.159,4.0,app you'll notice the file structure is
252.159,3.521,far less overwhelming than rails but at
254.159,3.521,the same time it's still very much a
255.68,3.44,battery's included framework in addition
257.68,3.6,your code tends to be a lot more
259.12,4.32,explicit for example we have this manage
261.28,3.76,py file that contains the code for the
263.44,3.28,actual command line interface to
265.04,3.439,generate things in the project we could
266.72,3.919,use it to serve the app locally or
268.479,4.481,generate an app to represent a feature
270.639,4.081,of the website it also follows the mvc
272.96,4.4,architecture with routes being defined
274.72,4.8,in the urls.py file and controllers are
277.36,4.399,represented as python functions in the
279.52,4.0,views.py file a route points to one of
281.759,4.081,these functions which itself might want
283.52,4.48,to access data from one of our models a
285.84,4.799,model is a python class that represents
288.0,5.12,the structure of data in an sql database
290.639,4.56,aka the object relational mapper and
293.12,4.16,finally we have our html templates that
295.199,3.921,allow you to embed python directly into
297.28,4.08,the code that's pretty cool but one
299.12,4.16,extra superpower of django is that it
301.36,3.76,has an admin feature built into it
303.28,3.759,directly as you define models in your
305.12,3.68,application you can register them with
307.039,3.681,the admin app to easily manage all of
308.8,3.36,your data in the browser this is really
310.72,3.12,useful and not something that you'd want
312.16,3.2,to roll out on your own python's great
313.84,3.84,null but the original server-side
315.36,4.08,language of the web was php there have
317.68,3.28,been countless php frameworks over the
319.44,3.759,years and high-level tools like
320.96,4.799,wordpress but the most popular one today
323.199,4.321,is laravel the php framework for web
325.759,4.081,artisans to use it you'll first want to
327.52,4.16,install php and a tool called composer
329.84,3.68,when i generated my initial app it took
331.68,3.84,a long time and downloaded a lot of
333.52,4.0,packages and as you can see the initial
335.52,3.84,project has a lot of batteries included
337.52,3.519,even more so than rails if we look at
339.36,4.16,routes you can see it not only handles
341.039,4.321,web routes but also api routes and
343.52,3.679,channels for real-time communication
345.36,3.44,with websockets now if we go into the
347.199,3.201,app code you'll notice it's already been
348.8,4.08,configured with things like user
350.4,4.079,authentication via providers a provider
352.88,3.36,is like a shared service that you can
354.479,3.601,use anywhere in the application in the
356.24,3.92,http directory we will find our
358.08,3.6,controllers and just like rails we have
360.16,3.52,a class that contains a bunch of
361.68,4.0,different methods that can access data
363.68,3.76,and render a specific template now our
365.68,4.0,database models use a tool called
367.44,4.16,eloquent orm which is based on the same
369.68,4.079,active record pattern as rails now when
371.6,4.159,it comes to views php is a language
373.759,4.081,that's designed to work with html out of
375.759,4.081,the box larvale makes it even easier by
377.84,3.68,building on top of php with blade
379.84,3.359,templates another cool point about the
381.52,3.519,ecosystem is that they put a lot of
383.199,3.761,thought into how to integrate front end
385.039,3.681,frameworks like react and vue it has an
386.96,3.519,adjacent tool called inertia that can
388.72,3.44,bridge the gap between front end and
390.479,4.0,back end frameworks the next framework
392.16,4.08,we'll look at is next.js which allows us
394.479,3.521,to build a full stack application
396.24,3.28,entirely with javascript now in the
398.0,2.88,javascript world there's a million
399.52,3.84,different options we could have chosen
400.88,5.439,here like nuxjs angular universal
403.36,4.8,sveltkit sjs adonis and many others
406.319,3.681,maybe i'll make a top 10 video just for
408.16,3.68,those to get started with next we run
410.0,3.52,npx create next app and that will
411.84,3.04,generate a starter project now the one
413.52,2.959,thing you'll notice about next right off
414.88,3.439,the bat is that it doesn't provide any
416.479,3.201,integration for your database there are
418.319,3.041,a million different solutions to choose
419.68,3.44,from but one of my personal favorites is
421.36,3.52,prisma so i'm going to add prisma to
423.12,3.44,this project the fact that next.js
424.88,3.12,doesn't have a database out of the box
426.56,3.28,is a good thing in my opinion the
428.0,3.599,javascript ecosystem is just way too
429.84,3.12,crazy it's nice to start with a very
431.599,3.04,good minimal framework and then add
432.96,3.28,whatever database integration you want
434.639,3.041,on top of it now that we have a database
436.24,2.959,integrated let's take a look at the
437.68,3.44,pages directory one thing that's
439.199,3.84,different about next is that routing is
441.12,3.84,handled with the file system each file
443.039,4.081,defined in the pages directory defines a
444.96,3.519,different url in the browser dynamic
447.12,3.28,routes can be created by wrapping the
448.479,4.241,file name in brackets now each one of
450.4,4.639,these files exports a react component to
452.72,3.919,define the ui or view this is actually
455.039,3.28,really convenient because many other
456.639,3.201,frameworks will ultimately want to have
458.319,3.28,some kind of front-end framework having
459.84,2.88,react fundamentally integrated into the
461.599,2.961,framework can streamline your
462.72,3.36,productivity big time now things get
464.56,3.44,more complex when you think about data
466.08,3.76,fetching normally in a react app you're
468.0,3.68,thinking about client-side code but in
469.84,4.079,next.js you can also run server-side
471.68,3.84,code with functions like get server-side
473.919,3.761,props this function will run on the
475.52,4.48,server with node.js and as you can see
477.68,4.48,inside of it we're using prisma to fetch
480.0,4.16,some items from the database these items
482.16,3.439,can be delivered as props to the react
484.16,3.68,component where they're rendered in the
485.599,4.16,ui both your server side and client-side
487.84,3.52,code is tightly coupled together which
489.759,3.28,may feel like a bad separation of
491.36,3.679,concerns but generally speaking it
493.039,3.521,actually works very well overall next.js
495.039,3.201,feels very minimal compared to other
496.56,3.12,frameworks in this list but it does a
498.24,2.959,ton of stuff behind the scenes to
499.68,3.28,simplify the annoying parts of web
501.199,3.361,development now speaking of simple we're
502.96,3.519,going to do the polar opposite and see
504.56,3.44,what java has to offer even though java
506.479,3.28,is a boilerplate driven language for
508.0,2.96,writing instant legacy code the spring
509.759,2.801,framework actually makes it very
510.96,3.12,enjoyable to work with the first thing
512.56,3.039,you'll notice when building with it is
514.08,3.6,that it's kind of like a create your own
515.599,3.841,adventure story it has a generator that
517.68,3.599,allows you to start with a framework and
519.44,3.12,you can even use kotlin or groovy if
521.279,2.88,you'd like then you choose all the
522.56,3.44,different dependencies that you want to
524.159,3.68,add to this project now even though java
526.0,3.44,does have a lot of boilerplate the code
527.839,3.521,pretty much writes itself and in my
529.44,3.519,opinion it feels a lot more robust
531.36,3.039,compared to the dynamic languages that
532.959,2.88,we've looked at so far you'll find the
534.399,3.361,source code way down in this deeply
535.839,4.241,nested folder and it also follows the
537.76,4.72,mvc pattern the controller is a class
540.08,4.4,and a route is defined using a decorator
542.48,3.68,on each one of its methods spring relies
544.48,3.52,on a lot of meta programming to keep
546.16,3.44,your code nice and simple it feels very
548.0,3.44,much like angular and the javascript
549.6,4.08,world the database models are based on
551.44,4.16,code with the java persistence api then
553.68,3.599,we can use that data in templates using
555.6,3.84,time leaf where you add these attributes
557.279,3.841,to your html to define where your data
559.44,3.519,should go to be honest though i didn't
561.12,3.36,have a very good time using time leaf
562.959,4.401,and that brings me to java's arch
564.48,5.2,nemesis c-sharp and the.net framework or
567.36,4.0,asp.net it's an open source project
569.68,3.839,maintained by microsoft and obviously
571.36,4.159,feels very microsofty but is extremely
573.519,3.76,popular and reliable it's evolved very
575.519,3.601,nicely over the years and has modern
577.279,3.361,supporting libraries like blazer that
579.12,3.839,allow you to build client-side apps
580.64,4.879,using webassembly and c-sharp to use it
582.959,4.32,install the.net sdk then generate a new
585.519,3.44,mvc application i really like the
587.279,3.041,initial project structure everything is
588.959,2.801,clearly named and it's not too
590.32,3.199,overwhelming and you get all the awesome
591.76,4.079,tooling and static typing like you do in
593.519,4.161,java when it comes to routing the urls
595.839,3.521,are inferred from the class names and
597.68,3.44,your controllers here we have an animals
599.36,4.0,controller which gives us the animal's
601.12,4.48,url then we have methods in that class
603.36,3.599,that then represent the next url segment
605.6,3.44,the method can take an argument to
606.959,4.0,create a dynamic url to represent our
609.04,4.08,data we have a model that is managed by
610.959,3.761,an orm called the entity core framework
613.12,4.24,and then finally we have our views which
614.72,4.4,are written in cshtml at the top of one
617.36,3.52,of these files you'll notice a model
619.12,3.76,where we can access our data and we can
620.88,3.92,also declare additional data here in c
622.88,3.68,sharp like a title it's more verbose
624.8,3.44,than other templating languages but you
626.56,3.92,get full intellisense inside of it which
628.24,3.92,is really helpful overall net is really
630.48,3.039,impressive the only real drawback is
632.16,3.04,that you have to sell your soul to the
633.519,3.041,big giant tech corporation if you want
635.2,2.879,to take the righteous path another
636.56,3.44,awesome framework to check out is
638.079,3.361,phoenix which is based on the elixir
640.0,3.12,programming language it's a functional
641.44,3.36,language that feels much different than
643.12,2.719,most of the object-oriented languages
644.8,3.44,that we've looked at throughout the
645.839,4.321,video don't worry a 100 second video is
648.24,4.0,coming soon install it then generate a
650.16,4.239,new project like ruby on rails it has a
652.24,4.24,very powerful cli that can automatically
654.399,3.761,scaffold an entire crud application for
656.48,3.68,you routing is also very similar to
658.16,3.76,rails where we have resources that map
660.16,3.359,all the necessary cred urls to the
661.92,3.599,controller in the controller we have
663.519,4.0,functions namespaced under a module that
665.519,4.0,access data and render the appropriate
667.519,3.76,template the model uses an object
669.519,3.361,relational mapper called ecto and
671.279,3.361,templates use embedded elixir which
672.88,3.6,again feels very similar to rails
674.64,4.08,however phoenix has a huge advantage in
676.48,4.4,performance because elixir is a compiled
678.72,4.16,language as an added bonus every app has
680.88,3.68,a built-in live dashboard to closely
682.88,3.199,monitor performance and that brings us
684.56,3.519,to another high performance framework
686.079,3.921,worth checking out jin which is powered
688.079,3.841,by the go language it easily wins the
690.0,4.079,best logo award to get started we're not
691.92,4.64,going to use a fancy cli but instead
694.079,4.641,create a go project from scratch jin is
696.56,3.839,a minimal http framework and is not
698.72,3.2,concerned with the model view controller
700.399,3.281,architecture we'll have to figure that
701.92,3.84,out on our own it also doesn't contain
703.68,3.599,an orm for the database so for that
705.76,3.36,we'll bring in another package called
707.279,3.201,gorm the nice thing about this approach
709.12,3.6,is that we don't really need to follow
710.48,3.84,the nbc conventions of a framework which
712.72,3.28,is probably overkill for many
714.32,3.6,applications instead we can write some
716.0,3.6,very focused functions and do things in
717.92,3.52,a way that makes sense for our exact
719.6,3.359,business needs like in this app we just
721.44,3.28,have two routes that need to retrieve
722.959,3.761,some data from a database which itself
724.72,4.0,is modeled with a struct using the orm
726.72,3.6,then go has its own built-in templating
728.72,2.96,language so we can simply create a
730.32,3.04,couple of template files here in the
731.68,3.44,project and interpolate the values that
733.36,3.44,we retrieve from the database the end
735.12,3.76,result is a much smaller code base with
736.8,3.76,a lot more low-level control however as
738.88,3.28,this application grows bigger it's going
740.56,2.88,to get harder and harder so you really
742.16,2.96,kind of have to know what you're doing
743.44,3.92,and that brings us to our next language
745.12,4.24,rust and the web framework rocket as far
747.36,4.08,as i know the rust ecosystem doesn't
749.36,3.919,have a full-blown mvc framework like
751.44,4.0,rails and to be honest i found it very
753.279,4.721,difficult to build a basic application
755.44,4.56,my approach was to use rocket for http
758.0,4.0,and routing then combine it with diesel
760.0,4.0,which is a rust-based orm and then
762.0,4.48,finally a templating language to use the
764.0,4.16,data in html called ascama i think this
766.48,3.2,is a reasonable approach but i didn't
768.16,3.28,quite get to a full working demo with
769.68,3.599,rust it's a systems language that gives
771.44,3.519,you low level control over memory which
773.279,3.441,the average web application developer
774.959,2.801,doesn't really need i quickly realized
776.72,2.4,that it would take more time and
777.76,3.199,dedication than i'm willing to give for
779.12,3.68,the tail end of a silly youtube video
780.959,3.12,however there is one rust-based library
782.8,2.96,that i want to bring to your attention
784.079,3.281,called you it's a component-based
785.76,3.199,framework for building web apps with
787.36,3.44,webassembly and it's coming to a
788.959,3.44,fireship tutorial near you soon and that
790.8,3.839,brings us to the final framework in this
792.399,3.761,list vapor which is based on the swift
794.639,3.041,programming language this is the only
796.16,2.799,app that i built on my mac because i
797.68,2.959,found that anything with swift just
798.959,3.12,works better on a mac it provides you
800.639,2.88,with a project structure that looks like
802.079,3.44,this it's well organized with
803.519,3.681,controllers models and routes routes
805.519,4.0,point to methods in the controller which
807.2,4.8,can access data from a model it uses an
809.519,4.56,orm called fluent which uses classes
812.0,3.92,along with decorators to model your data
814.079,3.521,swift is a very well-designed language
815.92,3.44,and i found it very enjoyable to work
817.6,3.599,with for stuff like this the code is
819.36,3.36,concise and readable yet statically
821.199,3.44,typed with awesome tooling like you
822.72,3.6,would get in java or c-sharp i also like
824.639,3.361,how it embraces async of weight when
826.32,3.68,fetching data from your models for
828.0,3.519,templating it has an engine called leaf
830.0,3.279,which also felt very modern and
831.519,4.0,practical now that we look at vapor i
833.279,4.161,want to also mention ktor which is a
835.519,3.281,kotlin-based web application framework
837.44,3.199,it's a lot more minimal than something
838.8,3.44,like spring but also something worth
840.639,3.361,checking out and with that we've looked
842.24,3.36,at 10 full stack frameworks now i'm
844.0,3.199,ready to show you the best full stack
845.6,3.44,framework in the world you're looking at
847.199,3.921,your own reflection in the mirror yes it
849.04,4.08,was you all along without you the
851.12,3.839,framework would be nothing actually no
853.12,3.36,no that's that's just dumb ruby on rails
854.959,3.041,is by far the best framework nothing
856.48,3.28,else even comes close it's like the
858.0,3.44,magic jordan of web frameworks thanks
859.76,4.319,for watching and i will see you in the
861.44,2.639,next one
