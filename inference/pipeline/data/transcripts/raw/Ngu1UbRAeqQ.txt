second,duration,transcript
45.969,11.72,In
57.689,5.31,"the previous lecture we had looked at the
basic building blocks which are required to"
62.999,2.06,construct the processor design.
65.059,6.84,"We will now try to put these together to come
up with a very simple design and later on"
71.899,5.071,"we will look at the performance issues and
try to improve the design."
76.97,8.079,"So what we will do today is have a simplest
possible solution to the problem of taking"
85.049,7.11,"a set of instructions and having a circuit
to execute those instructions."
92.159,7.55,"So we will build this design in small steps
that you can see each and every step clearly"
99.709,4.95,"and get a clear picture of how the circuit
is getting designed."
104.659,4.771,We will start with small set of instructions.
109.43,7.7,"First we will take only R - class instructions
which includes arithmetic, logical and comparison;"
117.13,3.26,"add, subtract, AND, OR and slt."
120.39,4.17,"So, that will be only part of the solution
then we will add instruction by instruction"
124.56,3.88,and see how the whole thing can be built.
128.44,7.2,"So, with the basic skeleton of the design
we will include other instructions step by"
135.64,1.0,step.
136.64,6.31,"So first we will include load store instructions
to the basic set of four five instructions"
142.95,3.539,"and then we will include the jump and branch
instructions."
146.489,6.151,"So, after having put the data path together
we will try to see how you control it; what"
152.64,6.08,"actually is required in terms of control signals
to make it do the right operation at the right"
158.72,5.01,"time
and we will interconnect a controller to this"
163.73,2.08,data path which we will build.
165.81,5.5,"We will not go into detailed design of the
controller; that we will take up in the next"
171.31,1.679,class.
172.989,5.901,"So, once again let us look at the subset of
the instructions which we have set out to"
178.89,2.78,consider for building this data path.
181.67,5.27,"Among the arithmetic and logical instructions
we have this five add, subtract, two arithmetic"
186.94,4.83,"instructions; AND, OR two logical instructions
and slt which does the comparison."
191.77,5.64,"So they are all of same class in the sense
that they take two operands from registers,"
197.41,4.64,"perform some operation, put the result in
register."
202.05,5.56,"Then we come to load and store which access
memory."
207.61,6.349,"So basically the data is transferred between
register file and memory one way or the other"
213.959,4.751,"and then instructions which influence the
flow of control beq which does a comparison"
218.71,6.669,"and then decide which it go and jump which
is a conditional jump instruction."
225.379,7.411,"As I mentioned in the last class the whole
design will have two parts: the data path"
232.79,1.68,and the controller.
234.47,5.159,"The signal which go from controller to the
data path are called control signals and the"
239.629,5.341,"signal which comes from data path to the controller
is considered as a status signal."
244.97,6.6,"So controller times the activities in the
data path and also directs what has to be"
251.57,3.52,done in which clock cycle or which instant.
255.09,9.1,"So, the status signal is information the controller
seeks from the data path to decide the actions."
264.19,8.3,"Now we are going to begin with these five
instructions: add, subtract, AND, OR and slt."
272.49,5.669,"The process involve or the actions which will
be required would be to get the instruction"
278.159,7.97,"from the memory, taking program counter contents
as address then depending upon the fields"
286.129,5.461,"which contain register values we access the
register file."
291.59,6.791,"So the register the register addresses will
come from the instruction fields and the operand"
298.381,5.519,"which we get from register file are passed
on to ALU, then the result produced by ALU"
303.9,5.07,"is passed on to the register file and we also
increment the PC and make it ready for the"
308.97,1.27,next instruction.
310.24,4.72,"So, before we begin let us look at the format
of these instructions."
314.96,10.2,"The format has several fields; a 6-bit field
is the opcode field and for all these instructions"
325.16,1.0,this is common.
326.16,8.25,"There is a same there is a single code which
actually defines this; a larger group than"
334.41,6.789,"this this is only a subset of all the instructions
which have a common opcode here, then there"
341.199,5.271,"is a source register 5-bit, third register
5-bit these two are the operands these two"
346.47,7.35,"specify addresses of the operands and another
5-bit field specifies the address of the destination."
353.82,7.349,"So all these are numbers from 0 to 31 and
specify one of the registers."
361.169,6.111,"Then this is unused in some instructions this
is used to specify shift amount and it is"
367.28,6.19,"this field which is called function field
which will distinguish these five instructions"
373.47,5.55,"from one another and also from other instructions
which are part of the group."
379.02,6.22,"So we would need to look at all the fields
except for this field which is just to be"
385.24,3.739,ignored
388.979,6.021,"So the action begins by fetching an instruction
from the program memory."
395.0,8.72,"We have a program counter, a register which
will carry the address of the current instruction"
403.72,3.4,and there is an instruction memory.
407.12,4.61,"Instruction memory in this design will be
assumed to be having fixed contents, we are"
411.73,6.87,"not going to change the contents so the only
input to this is an address input and the"
418.6,2.61,"only output is an instruction which come out
of this."
421.21,6.44,"So you given address instantly the instruction
comes out; we assume that the program is somehow"
427.65,3.11,stored in this memory already by some means.
430.76,7.26,"In fact such memories are called read only
memories if you are familiar with where by"
438.02,5.5,"a special process you load the contents in
the memory and then you can only access it"
443.52,1.0,you can read it.
444.52,4.3,"So, in that sense this will behave like a
combinational circuit; does not require a"
448.82,6.069,"clock, so you given an input you have an output
but the function which transforms input and"
454.889,5.081,"output is fixed and by a special process it
can be changed."
459.97,8.9,"Therefore, the PC feeds the address input
of this memory and we get an instruction."
468.87,10.51,"The next thing is to look at the instruction;
various fields in instruction and address"
479.38,1.47,the register file.
480.85,5.31,"So, particularly for these five instructions
we are talking of, we need to access rs and"
486.16,7.24,"rt which was in second and third field in
the instruction if you remember and bits of"
493.4,5.69,"this 32-bit instruction which we are getting
would be used to address register file."
499.09,8.09,"So register file as I discussed yesterday
is specifically for this particular design;"
507.18,6.299,"we need register file as an array of register
with a provision of reading two values at"
513.479,8.021,"a time; you can read two registers and you
can write one register at any given time."
521.5,6.43,"So now the addresses for these three things:
two readings and one writing is provided independently."
527.93,7.149,"They could be in general different, two or
more also can coincide but a register file"
535.079,6.401,will respond correctly in all these cases.
541.48,5.44,"The three address inputs are read address
1, read address 2 and write address; these"
546.92,6.109,"are the three inputs, each of these are 5
bits, there are two data outputs: read data"
553.029,6.901,"1 and read data 2 and there is one data input
write data."
559.93,7.17,"Hence, we have instructions which is 32 bits
so specific fields are being tapped out of"
567.1,1.01,this.
568.11,9.68,"From bit number 21 to 25 this is rs the source
register and that goes to one address; bit"
577.79,7.849,"number 16 to 20 forms a field which defines
rt or the third register, this goes and addresses"
585.639,3.13,rad2 or the second read address.
588.769,12.04,"So, out of these 32 bits we are taking two
groups of 5 bits and connecting it to the"
600.809,1.08,register file.
601.889,8.591,"Now, once addresses are given this register
file will respond with data here and the operand"
610.48,2.26,"which will come out of this will need to be
passed on to the ALU."
612.74,9.499,"So we have an ALU; imagine the same design
which we did couple of lectures back where,"
622.239,4.171,"by specifying some control signal you could
perform addition, subtraction, AND operation,"
626.41,7.289,"OR operation you could do comparison for equality,
you could do comparison for less than for"
633.699,7.241,"the purpose of slt so same ALU we are putting
now as a block box, we are not looking into"
640.94,4.73,"details of what is inside, we understand that
design and we are simply using it to build"
645.67,4.05,a larger circuit now.
649.72,10.969,"So these two outputs are forming two inputs
or two operands for the ALU and next the result"
660.689,10.861,"which is produced by ALU would be ha[ve] would
be sent to register file for storage and that"
671.55,6.209,"is where the cycle of flow of data or cycle
of instruction would be complete."
677.759,7.041,"So now, at the moment I am not worrying about
how to control ALU to do the right function."
684.8,5.33,"Now we are looking at those five instructions
together and ALU would need to be told which"
690.13,1.189,of these instructions is.
691.319,5.92,"So we will, eventually when we talk of control
we will look at bit number 26 to 31 the opcode"
697.239,6.65,"field and bit number 0 to 5 bit number 0 to
5 the function field we will look at those"
703.889,4.8,"fields and then pass on some signals to ALU
so that it does the right operation."
708.689,7.671,"Right now we are not distinguishing between
those files but just looking at the overall"
716.36,1.0,flow of the data.
717.36,8.839,"The output of the ALU goes back to this register
file to the right port."
726.199,7.39,"Let me just emphasis the terminology; these
are called ports for the register file; port"
733.589,4.761,"meaning there is something like a gateway
so there are two read ports in this and then"
738.35,5.109,"one write port and this is going back to the
write port."
743.459,7.81,"Therefore, now when we are writing we also
need to arrange for the address where it has"
751.269,6.11,"to be written so we need to look at another
field from here and make sure that the address"
757.379,3.51,"is also delivered correctly to the register
file."
760.889,9.91,"So, bit number 11 to 15 are the destination
address and that connects to the third address"
770.799,1.5,input.
772.299,3.741,So now with this the cycle is complete.
776.04,6.64,"So basically starting with PC we have a sequential
element here so at the edge of the clock a"
782.68,6.519,"new value is available at the output of PC
which defines address of a new instruction"
789.199,4.79,"and as a function of that we get the instruction,
as a function of that we get these operand,"
793.989,4.511,"as a function of that we get the result and
finally the result is available at the input"
798.5,1.239,of the register file.
799.739,6.72,"Therefore, now at this point when a clock
edge comes to the register file this information"
806.459,1.511,will get stored at that instant.
807.97,5.169,"So we are assuming that transition in the
state of register file would be edge triggered."
813.139,8.22,"So you have one clock at which PC gets the
value and at the next edge of the clock the"
821.359,5.611,"result of this instruction will get stored
in the register file and at the same time"
826.97,6.489,"we will arrange we will see in the next slide
that PC will have to get a new value and be"
833.459,2.16,ready for the next instruction.
835.619,6.331,"So let us a complete that part and see how
PC is to be incremented."
841.95,6.609,"So all we need to do is have a 4 added to
the PC contents and connect the result back"
848.559,2.371,to the input of PC.
850.93,8.149,"This is an adder with one input as 4, one
input as PC and output of this is going back"
859.079,1.57,to PC.
860.649,10.74,"So you give, let us say, at time t the output
of PC was available for a new instruction"
871.389,4.79,"and then at time t plus 1 I am counting time
in terms of clock cycles not in nanoseconds"
876.179,1.0,alone.
877.179,8.95,"So at time t plus 1 which is the next clock
you get a trigger here and trigger there so"
886.129,5.49,"the current instruction completes by storing
its value storing the result in register file"
891.619,5.83,"and at the same time PC gets the new value
and is ready for the next instruction."
897.449,6.97,"So that completes one cycle and if the next
instruction was also of the same type then"
904.419,2.311,"in the next cycle that instruction will be
executed."
906.73,6.25,"So this cycle can go on and the important
thing to note here is that the instruction"
912.98,2.009,is executed in one clock cycle.
914.989,5.28,"Remember that in the past we have talked of
CPI and we have talked of figures of CPI which"
920.269,6.86,"are 2 3 4 and so on; so later on we will discuss
design where instruction execution does take"
927.129,6.471,"multiple cycles and there are good reasons
why we would do that but currently this design"
933.6,6.489,"is aimed at doing the instruction in a single
cycle and that was the simple component which"
940.089,6.79,"I was talking of; we are talking of simple
possible design."
946.879,4.37,"Now we have seen the design for these five
instructions."
951.249,5.543,"We need to now go further; we need to augment
this to include more instructions and we will"
956.792,5.577,"see that by making small incremental changing
we can accommodate more and more instructions."
962.369,4.45,"So let us address load and store instruction
next."
966.819,4.81,"The common thing there is that memory has
to be accessed."
971.629,3.911,"And the mech[anism] mechanism for calculation
of memory address is same."
975.54,13.919,"You have to take this number which is the
signed offset 16-bit number and contents of"
989.459,8.531,"this register, add the two and apply that
as address for the memory and this field defines"
997.99,4.529,"the register which will exchange the data
with the memory depending upon whether it"
1002.519,1.31,is load or store.
1003.829,8.24,"So we need to look at these two registers
specified by these two fields and a constant."
1012.069,8.2,"Here is a same design we have done so far
and now we will add more things to it to make"
1020.269,5.601,"it possible to do store instruction we will
then add load instruction."
1025.87,4.64,So first of all we need to bring in data memory.
1030.51,5.96,"Unlike instruction memory this will have data
input as well and that is actually the only"
1036.47,1.43,difference.
1037.9,6.59,"You have address, read port, write port."
1044.49,4.03,"Well, actually strictly speaking this will
be considered it will not be considered as"
1048.52,4.11,"two port memory it will be considered a one
port memory because you either do read or"
1052.63,5.66,"write there is a single address and we will
define control signals which will ensure that"
1058.29,6.17,"either you either you perform a read or write;
so it is a single port memory but it can do"
1064.46,5.68,"read or write whereas this is a three port
memory two read ports and one write port."
1070.14,2.539,This one has a single read write port.
1072.679,4.791,"In fact some memory modules have these in
common."
1077.47,5.28,"There is a same set of wires which are connected
to memory through which you can send the data"
1082.75,8.82,"in or take the data out so that data terminal
is a bidirectional one; there is one address"
1091.57,4.109,line and a bidirectional data line.
1095.679,4.181,"In this case, of course, again for simplicity
we have separate read and write lines but"
1099.86,2.189,there is a common address line.
1102.049,6.061,"This is also a single port memory with a single
read port and that is all."
1108.11,6.91,"Now we have positioned the memory here, we
now need to connect the inputs and outputs"
1115.02,1.0,for this.
1116.02,6.739,"So, first of all the address as I mentioned
will be produced by performing an addition."
1122.759,5.431,So we will use ALU for doing the same thing.
1128.19,4.57,"Because load store instruction does not require
other arithmetic operations to be performed"
1132.76,5.46,"we will use this ALU itself to calculate the
address."
1138.22,6.12,"For doing PC plus 4 we could not used this
because we had instructions which were using"
1144.34,5.64,"for some other purpose and this PC plus 4
was being done over and above all that so"
1149.98,3.01,"we required a different piece of hardware
here."
1152.99,6.51,"But for load store instruction we will use
ALU to do the address calculation and therefore"
1159.5,2.279,I have connected it in this manner.
1161.779,7.591,"I need to make sure that the right inputs
come to the ALU for calculating address and"
1169.37,1.07,that is the next thing.
1170.44,8.75,"So we do not directly connect register file
output to ALU because for address calculation"
1179.19,8.19,"the constant coming from instruction will
be loaded; we need to put a multiplexer here"
1187.38,8.17,"which will have this rd2 output for R - class
of instruction but it will have something"
1195.55,5.69,coming from this for performing address calculation.
1201.24,5.939,"I have not connected it yet here because those
16-bits which we get from instructions need"
1207.179,6.46,"to be sign extended before we can pass it
on to ALU."
1213.639,8.37,"this is the block which is doing signed extension,
it takes 16-bits as input, bit number 0 to"
1222.009,7.681,"15 of the instruction and it does sign extension
so here it is a 32-bit output."
1229.69,6.859,"Wherever I have not labeled things assume
that you have 32-bit output 32-bit signals."
1236.549,5.081,Each wire is actually carrying 32 bits.
1241.63,8.049,"Exceptions are here where I have labeled explicitly
or here I have also indicated that there are"
1249.679,1.691,16-bits explicitly.
1251.37,9.929,"So now you see what is happening that rs specified
by this field would bring out some 32-bit"
1261.299,8.911,"number here; 16-bit taken from here sign extended
and we will control the multiplexer to select"
1270.21,1.0,this path.
1271.21,7.459,"When it is load or store it is this path which
will be selected so we must give input one"
1278.669,6.1,"to the multiplexer, control input one and
for add subtract instructions we must give"
1284.769,1.51,zero so that this goes in.
1286.279,7.041,"So, wherever we have actually two paths converging
to the same destination you will notice that"
1293.32,5.37,"we have put a multiplexer and then it is the
responsibility of controller to control this"
1298.69,4.969,"multiplexer correctly so that depending upon
what we are trying do the right thing gets"
1303.659,6.39,"done or the right data gets passed through
that multiplexer."
1310.049,9.141,"This part takes care of inputs for data memory,
address input in particular so it comes from"
1319.19,6.65,"here and inputs of the adder inputs of the
ALU are also arranged now properly."
1325.84,7.189,"To complete the picture we also have to make
sure that the data from register file goes"
1333.029,2.78,to the data input of this memory.
1335.809,4.631,So where does it come from?
1340.44,7.92,"In this diagram where will the data come from
which will have to be connected to this wd?"
1348.36,6.73,"because it is a rt the third field which actually
specifies which register has to be written"
1355.09,6.53,"so, that is already happening here and that
output is available here; we simply need to"
1361.62,1.0,connect this to this.
1362.62,10.009,"Now this is the complete arrangement for performing
store word instruction and now we can move"
1372.629,3.281,to the load word instruction.
1375.91,6.999,"Now, in the load word the address generation
part is same; that we do not need to touch,"
1382.909,7.27,"this is same, same mechanism, same paths and
that need not be modified."
1390.179,4.99,"What additional thing we need to do for load
word is to take the data from data memory"
1395.169,4.791,"and put it back in register file at appropriate
address."
1399.96,8.15,"So, first of all, we have this line going
to wd write data of the register file so we"
1408.11,7.059,"have broken this here so that we can take
this and this and put a multiplexer."
1415.169,4.301,"So there two options are and they need to
be joined with a multiplexer."
1419.47,8.559,"So this multiplexer when you give control
as 1 then it will send this to the register"
1428.029,6.861,"file and when the control is 0 it sends this
to the register file so we will have to remember"
1434.89,7.48,"that for add, subtract, AND, OR instructions
the control has to be 0 and for load instruction"
1442.37,2.679,control has to be 1 here.
1445.049,3.58,So this is one part of the picture.
1448.629,13.351,"The second part of the picture is to give
the correct write address."
1461.98,8.419,"The write address comes from...... now let
us figure out from where the write address"
1470.399,1.13,has to come.
1471.529,8.941,"See, for add/subtract instruction write address
is coming from this part bit number 15 to"
1480.47,11.02,"11 to 15 and for this it will come from bit
number 16 to 20, for load instruction it is"
1491.49,3.019,rt which is to be used here.
1494.509,7.92,"For add subtract it is the rd which decides
the right destination now it is rt which will"
1502.429,1.0,do it.
1503.429,7.041,"So again we need to make changes here, introduce
a multiplexer because it is either bit 11"
1510.47,4.77,"to 15 which goes there or bit number 16 to
20 which goes there so we have to make a provision"
1515.24,6.799,"for that; we remove this line and put it through
a multiplexer and the two choices are either"
1522.039,1.88,this or that.
1523.919,4.88,"This is the choice which will be taken for
load instruction, and this is the choice which"
1528.799,4.22,"is taken for add, subtract, AND, OR, slt instructions."
1533.019,4.221,"So now we complete the......this is the complete
picture for now."
1537.24,6.13,"Seven instructions we have done: add, subtract,
AND, OR, slt, and load, store."
1543.37,6.32,"So everything which is required for these
as far as data path is concerned is there."
1549.69,3.65,Now let us look at branch and jump instruction.
1553.34,2.589,Again we will take one by one.
1555.929,6.771,"They would need to do something with the program
counter because these instructions influence"
1562.7,2.569,how the next instruction is chosen.
1565.269,7.73,"We did not modify this part for load store
because this part continues to be same you"
1572.999,2.56,"have one instruction and the next instruction
follows."
1575.559,8.45,"But for branch instruction we need to modify
this and also we will use ALU for equality"
1584.009,2.51,test.
1586.519,8.101,"The comparison will be done and ALU will produce
a bit which will indicate whether the two"
1594.62,4.26,inputs are equal or unequal.
1598.88,5.73,"The branch instruction has this format opcode
this is the I - format as we have for load"
1604.61,7.34,"store, rs and rt are the two registers which
will be compared and this number would be"
1611.95,7.969,"added as word offset to PC and it will be
PC plus 4 to which will be add because that"
1619.919,6.151,"part we want to retain as common for all the
instructions."
1626.07,8.28,"So again start from this point where we have
come up to."
1634.35,2.059,We need to do some modification here.
1636.409,7.481,"Instead of sending PC plus 4 back directly
to PC we will introduce more options and the"
1643.89,5.48,"options would be that this with something
added to it."
1649.37,2.73,Now let us look carefully.
1652.1,6.169,"First of all this is a multiplexer which is
making a choice; either we take PC plus 4"
1658.269,7.48,"or we take output of this adder which is adding
something to PC plus 4."
1665.749,1.4,What is that we are adding?
1667.149,8.01,"We are adding this 16-bit constant which has
been sign extended but it is also been shifted."
1675.159,8.441,"This s2 I am using to shift this number by
2 bits to the left which is effectively multiplying"
1683.6,5.399,by 4 and getting a byte number from word number.
1688.999,6.941,"Therefore, as I had discussed earlier it is
a matter of simply wiring things correctly."
1695.94,5.06,"We have the correct offset coming here with
gets added to PC plus 4 and is available to"
1701.0,1.299,this multiplexer.
1702.299,8.35,"now this multiplexer has to look at which
instruction it is; if it is not branch instruction"
1710.649,5.73,"it will simply allow this to go through if
it is branch instructions then it looks at"
1716.379,5.93,"the result of comparison in the ALU and accordingly
a 0 or 1 will be chosen here."
1722.309,3.7,"Hence, again we will get into those details
when we discuss the control."
1726.009,5.241,"But for the moment we assume that somehow
there will be some logic put together which"
1731.25,3.499,"will take care that the correct value 0, 1
is given here."
1734.749,4.631,"So, as far as the data path is concerned what
we have introduced here essentially is one"
1739.38,9.38,"multiplexer and one adder and these wiring
of signals so that a shift of 2 bits takes"
1748.76,2.359,place.
1751.119,10.211,"Now just to remind you we had seen that signed
extension and shifting are essentially wiring"
1761.33,4.02,"there is no active gate or any active component
involved."
1765.35,5.159,"Sign extension means repeating one particular
bit and shifting means just rearranging these"
1770.509,3.761,"and supplying a constant zero to some of the
bits."
1774.27,7.099,"So, in the previous diagram the sign extension
and the shift are essentially these kinds"
1781.369,5.29,of wiring arrangements.
1786.659,5.341,Now finally we come into this jump instruction.
1792.0,7.769,"Jump instruction has only two fields: the
opcode field and a 26-bit field which decides"
1799.769,1.971,the next address.
1801.74,5.939,"Once again, since it is not a full 32-bit
address we need to retain some bits of PC"
1807.679,1.0,as it is.
1808.679,8.541,"So what we will do is we will take these 26
bits and 4 bits from PC plus 4 again not PC"
1817.22,5.929,and form a new address for the next instruction.
1823.149,10.65,"So we would require another multiplexer which
will provide one additional choice."
1833.799,5.76,"We introduce that multiplexer here, remove
this line and pass through a multiplexer."
1839.559,4.881,"And the input for this multiplexer is coming
from instruction bits."
1844.44,8.25,"We are taking these 26 bits from the instruction
field, shift it left by two positions to get"
1852.69,7.4,"28 again for the same reason we want to get
byte from the word number; 4 bits we are picking"
1860.09,8.829,"from PC plus 4 bit number 28 to 31 and these
4 bits and these 28 bits are concatenated"
1868.919,7.47,"together to form a jump address which is a
32-bit value and this is available as yet"
1876.389,5.451,"another input for going back to the program
counters."
1881.84,7.25,"The program counter PC has three possibilities:
either it is plain PC plus 4 or this PC plus"
1889.09,9.32,"4 plus offset or this combination of PC bits
and instruction bits."
1898.41,7.119,"You can actually combine these two multiplexers
into a single three input multiplexer; that"
1905.529,4.681,"is another way of designing but we will just
retain it in this manner."
1910.21,8.279,"Now, the next thing is to start worrying about
how we are going to control this data path;"
1918.489,9.201,"what are the points where we need to apply
control signals so that is what we will see"
1927.69,1.0,next.
1928.69,7.03,"All multiplexers would require control and
in this exercise of identifying controls we"
1935.72,6.48,"will assign names for the purpose of reference
for all the control signals so we will call"
1942.2,5.539,"this control signals for this multiplexer
as Rdsd or Register File Destination."
1947.739,7.081,"It will select the destination address in
the register file; it comes from here or from"
1954.82,4.55,here.
1959.37,8.749,"Then register file needs a control signal
to tell it whether it has to write or not."
1968.119,5.991,"All instructions, you would notice, are not
writing into register file so it is only first"
1974.11,5.509,"five instructions write and load instruction;
these six instructions out of the nine write"
1979.619,9.19,"into the register file so this will have to
be made 0 or 1 accordingly."
1988.809,10.19,"ALU source which I am labeling as A source
is the control signal for this multiplexer"
1998.999,5.27,"and this will distinguish whether ALU is being
used for address calculation or for normal"
2004.269,4.24,arithmetic logical operations.
2008.509,5.571,ALU would require 3 bits to control it.
2014.08,3.589,Recall the design of ALU which we have done.
2017.669,7.25,"We had some circuit and then at the end there
was a 4 input multiplexer which will select"
2024.919,5.561,"AND output, OR output or plus minus output
or output for slt."
2030.48,5.269,"So 2 bits are required to control that and
another bit to choose between add subtract"
2035.749,9.371,"so there were a total of 3 bits so I am labeling
that as op standing for operation."
2045.12,6.62,"Then a status output which will come from
ALU I am labeling it as z standing for 0 so"
2051.74,7.95,"it is a comparison of the two operands from
the point of view beq instruction."
2059.69,4.62,"Comparison, you recall, was done by doing
subtraction and checking of the result is"
2064.31,4.859,0 so that is why I have labeled it as z.
2069.169,5.041,"This is not an input, this is an output, this
is the status and others are the control."
2074.21,7.929,"Data memory requires control for read or write
so MR stands for memory read, MW stands for"
2082.139,1.02,memory write.
2083.159,7.101,"We will make sure that memory does only one
operation at a time."
2090.26,5.399,"Actually in this kind of arrangement where
read and write lines are separate it is also"
2095.659,4.45,"possible that you do read and write simultaneously
in this."
2100.109,5.901,"But it has to be from the same address, same
location in the memory is used for reading"
2106.01,5.4,"and writing simultaneously but in our design
we do not do that; we will either do read"
2111.41,4.12,or write.
2115.53,8.5,"Then there is another multiplexer here which
is distinguishing between what goes to register"
2124.03,9.98,"file whether it is from memory or from ALU
so memory to register file M2R."
2134.01,9.34,"This is called P source PC source basically
either here or there, then whether it is jump"
2143.35,2.31,instruction or not it is another control signal.
2145.66,6.78,"Hence, these are the control signals so we
require some circuit which will produce so"
2152.44,11.53,"many outputs 1 2 3 plus 3 6 7 8 9 10 11 so
these 11 outputs and that control will have"
2163.97,7.38,"to look at this and also look at two fields
of the instruction: the opcode field and the"
2171.35,6.54,"function field so that is the controller which
needs to be designed it has to have this 12"
2177.89,1.0,inputs.
2178.89,6.159,"In fact, strictly speaking, it is plus 1 so
13 inputs and 11 outputs."
2185.049,5.481,"So, if you can design that and plug it in
here that will complete the task."
2190.53,4.96,"But we will not design it as a monolithic
circuit; we will design it again in terms"
2195.49,5.45,of some simpler parts as you will see now.
2200.94,1.23,Now you want to bring in the controller.
2202.17,9.439,"We will not go into details but we will just
go through an outline of what it is going"
2211.609,3.341,to be.
2214.95,9.869,"First of all we look at the opcode bits and
these bits are sufficient to distinguish between"
2224.819,7.23,"jump, branch, load, store and this group of
add, subtract, etc altogether."
2232.049,6.481,"So except for controlling ALU from these 6
bits we can derive all the information."
2238.53,6.1,"Out of the eleven signals eight can be straightaway
figured out using these."
2244.63,5.91,"Of course generating this will require us
to look at z also."
2250.54,7.75,So let us connect the output of this control.
2258.29,8.069,"I will show the outputs and connect to various
signals which can be driven by this."
2266.359,11.7,"If it is load instruction which we can figure
out from here we will allow this to pass through"
2278.059,2.25,"here otherwise we will allow this to pass
through."
2280.309,9.131,"So this hardness can be determined from this,
whether we have to write register file or"
2289.44,8.179,"not can be determined from this, ALU source
can be selected, it can be determined from"
2297.619,7.601,"this, memory write and memory read."
2305.22,5.98,"So if it is load instruction we will do memory
read, if it is store instruction we will do"
2311.2,5.16,memory write.
2316.36,7.499,"Then control of this multiplexer; it has to
distinguish between load from other instructions"
2323.859,4.331,so that also can be done.
2328.19,3.51,Here we are doing slightly differently.
2331.7,4.32,"We are first of all figuring out that it is
a branch instruction."
2336.02,5.421,"So this controller will activate a signal
which tells us that it is a branch instruction"
2341.441,7.559,with the z output to control this P source.
2349.0,1.38,So you can see what is happening.
2350.38,7.489,"if the instruction is not a branch instruction
you will have a zero here which means that"
2357.869,7.881,"P source is 0 irrespective of what is z and
the multiplexer passes the upper input."
2365.75,7.549,"So, when it is not a branch instruction we
do not branch; we do not even look at z, when"
2373.299,5.81,"it is branch instruction we will have this
as 1; the controller will make this output"
2379.109,1.301,as 1.
2380.41,6.23,"Now it will depend upon z; we will get 1 here
or 0 here."
2386.64,7.969,"So if the result of comparison was true if
the two registers are equal this will be activated"
2394.609,5.7,"this will be 1 and you will get a 1 here so
this address will go as the next address of"
2400.309,7.682,"PC next value of PC and if the test failed
then this will be 0 you will have a 0 and"
2407.991,3.779,PC plus 4 will continue.
2411.77,7.579,"Another way if you recall the gross diagram
I had drawn where there was a data path and"
2419.349,3.96,"the controller I had shown the status signal
going to the controller."
2423.309,8.911,"So, strictly speaking, the controller is not
just this, it is this plus this."
2432.22,6.1,"But it actually simplifies the matter to look
at it as a 6 input circuit rather than a 7"
2438.32,4.269,"input circuit because the influence of this
has been handled separately which makes it"
2442.589,6.911,somewhat convenient.
2449.5,7.22,"Then we can also control this multiplexer
by figuring out whether it is a jump instruction"
2456.72,2.0,or not.
2458.72,10.22,"Now, what is left is the opcode, an operation
which the ALU has to perform and it will depend"
2468.94,7.52,upon 6 bits which come from the function field.
2476.46,12.389,"So, the instruction 0 to 5 would be seen by
another kind of control circuit I am calling"
2488.849,2.341,it A controller ALU control.
2491.19,5.129,"So, looking at these 6 bits we are trying
to determine what these 3 bits are."
2496.319,6.26,"But remember that ALU is being used for load
store instruction also for different purposes."
2502.579,3.451,So we need to look at this also.
2506.03,5.71,"But we do not need to feed all those 6 bits
here but what we need to tell this circuit"
2511.74,6.47,"is which class of instruction it is; whether
it is R - class one of those instructions"
2518.21,2.51,or it is load store or something else.
2520.72,6.8,"So we will have some information coming out
from here connecting to this and this needs"
2527.52,5.79,"to be just a 2 bit information because we
like to distinguish between three different"
2533.31,6.12,"cases: the R class instruction, add, subtract,
AND, OR and slt that is one possibility; load"
2539.43,5.369,"store together grouped as another possibility
and all the rest as third possibility."
2544.799,9.461,"So we will take 2 bits out of this and connect
to this and I am calling it opc which stands"
2554.26,2.02,for operation class.
2556.28,9.329,"So basically this circuit now has 6 inputs
plus 2 inputs so 8 inputs producing 3 outputs."
2565.609,8.48,"So we have taken special care to keep the
number of inputs low so the complexity of"
2574.089,6.321,"a combinational circuit like this or like
that depends upon the number of input lines"
2580.41,1.79,and number of output lines.
2582.2,6.581,"But I will not I will not explain that but
you can take it that with the number of input"
2588.781,7.859,"lines the size of the circuit or the complexity
grows generally exponentially."
2596.64,2.84,But with outputs it will generally grow linearly.
2599.48,4.04,"So we are more worried about keeping the numbers
of inputs as low as possible."
2603.52,5.01,"So, if there are large numbers of inputs then
we can look at the parts of it separately"
2608.53,6.529,"and then combine the results that are always
a better strategy; that is what we have followed."
2615.059,5.451,"This circuit is predominantly looking at the
opcode field whereas this is predominantly"
2620.51,6.779,"looking at the function field and some additional
information it requires about opcode is being"
2627.289,3.901,"actually processed by this and made available
here."
2631.19,10.32,"So, after having done this what remains is
basically to look at the design of this and"
2641.51,1.15,design of this.
2642.66,6.74,"So if you can enumerate what outputs you require
for what inputs you can do it in a straightforward"
2649.4,1.0,manner and same thing here.
2650.4,3.49,We will take it up in the next class.
2653.89,9.85,"So just to summarize, we have designed a processor
except for some controller details for these"
2663.74,6.19,"nine instructions add, subtract, AND, OR,
slt, load word, store word, beq and j and"
2669.93,5.21,"our approach was a very simple step by step
approach; we gradually put the components"
2675.14,4.209,"on the table, connect wires and build up the
circuits."
2679.349,5.401,"So first we took this group of first five
instructions which are similar in nature the"
2684.75,6.079,"only difference comes in the way you control
the ALU so we did that we started with these"
2690.829,8.321,"five added, store and load and then added,
beq and jump; then we identified the control"
2699.15,5.67,"signals for the various components which were
put there and we placed some black boxes which"
2704.82,7.259,"are called controllers which expected to produce
these signals and the next task will be to"
2712.079,5.151,"look at the details of these two black boxes
and design this."
2717.23,27.18,"That is all for today, thank you."
