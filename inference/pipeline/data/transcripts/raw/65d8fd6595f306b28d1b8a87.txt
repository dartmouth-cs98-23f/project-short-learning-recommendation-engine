[Music]
hello
and welcome to pseudocode today we are
going to talk about
databases in this video we are going to
cover different types of databases what
are the use case and examples
the pros and cons of the same so let's
get started
if we go back to the visual metaphor of
buildings that we have talked about
and in the previous video we discussed
how we can compare
people to data if people are like data
in terms of buildings then what could be
databases
the way those buildings house people for
example
rooms in a hospital look different from
rooms in a hotel
in a movie theater there are chairs
lined up in front of the screen so that
people can sit and watch a movie
in malls there are big large spaces so
that people can move around
similarly different databases depending
on
the property of data and the volume of
data
querying requirements provide different
features and the way to store
data so in this video we are going to
see how those different types of
database
provide and fulfill such requirements
some popular type of databases
are relational non-relational file type
dbs network dbs etc
in this video we are going to focus on
relational
and non-relational dbs non-relational
db's
are again divided into multiple types
like key value stores
column based dbs document based db's
search db's etc
so we will look into those examples as
well relational dbs are the most popular
ones
and here are the two factors that help
you decide
whether you have to select a relational
db for your use case or not
schema and asset properties let's talk
about schema
schema in relational dbs refers to how
your data is going to be structured
so in relational dbs you have tables
and rows which store the data
so if your data can be represented in
the form of tables and rows
while satisfying the property of
relational db's like if your data is
complex and it could be represented
using relational tables
easily then you select uh relational
labels a classic example
is employees data so you have an
employees table
a department table an account table
so employees table is going to store the
data of employees like name
age phone number uh city
department id account id etc
now this id refers to the primary key or
the unique id which identifies
every employee and department id and
account id are foreign keys
which identifies which department this
employee belongs to
and what is the account id of this
employee so these are called foreign
keys the department table will have
details like the name of the department
when it was a started and other details
an account id will have other details
like balance
and so on now how schema constraints
come into the picture
employee data will have requirement that
one employee has to belong to a
department
and that employee has to have an account
as well so
department and account cannot be null
that is a schema constraint and if your
data
can satisfy that and you know that that
this is going to be the structure of
your data
we make the decision of selecting
relation dbs what are the benefits
of this relational dbs or schema one you
can
represent complex data easily using
relational tables
second with the schema constraints uh
you can ensure
that some garbage data or null data
doesn't get into your database because
the schema constraint like department id
cannot be null account id cannot be null
will ensure that you don't have
inconsistent data or bad data
in your database talking about asset
properties if you don't know
what are asset properties i have
included a link in the description
but still i'll cover basics of acid
properties
so a in acid properties stands for
atomicity
atomicity means a transaction in a
database either
happens completely or doesn't happen at
all so for example if you have to
transfer money from one account to
another account
the transaction should deduct money from
one account and put money into the
another account
but it should not happen that it
deducted from one account and didn't
update into the another account
so that is breaking the rule of
atomicity relational db's ensure that
all the transactions are atomic either
they happen completely or they don't
happen at all
second is consistency consistency means
that at any given point of time
the state of the database will be
consistent it will not happen that if
two
reads are happening if two requests are
trying to read the account balance one
request gets the response as 500 and
another gets the response as 400.
this is not possible if the db supports
asset properties because your database
is consistent it will give the same
value to both the request
then isolation isolation means the two
transactions do not know about each
other
for example there is a read happening on
the balance
and at the same time there is a write is
also happening
suppose when read is happening read
will uh read the older value like 500
until the right is completed and right
will go and update that value to 600.
if the read happens after right it will
get 600 if the read happens before right
it will get 500. read would not know
about the right operation so this is
called isolation
then durability durability is a
mechanism that database ensures whatever
rights or updates are happening
they are logged properly and all the
details and the data is getting
persisted into the disk storage so that
is just a brief of asset properties
now if you have to support your business
requirements as per asset properties
if you have the need for transactions or
if you are building like a
banking application which has a
requirement for transactions
then and also if you have a fixed schema
which is not
going to change in future as much you
select
relational dbs what are the things that
relational dbs cannot support
for example you have a certain kind of
data
in which this schema is not fixed you do
not know what are the different columns
or fields
that could evolve as your product
evolves and you are not sure that how
your uh
how the schema of your data is going to
evolve in that case
using relational dbs becomes a little
difficult
although there are uh ways to update
columns and change the scheme of the
table but
if when the table size grows and the
data set becomes huge
it becomes increasingly complex to add
new columns
and also when the data size grows and
the queries require
multiple properties to be fetched from
different tables the joins can become
expensive
so that is the case when relational dbs
don't have
show much performance as expected second
part is scaling
in case of relational dbs it is easy to
store or scale vertically we are going
to discuss vertical
scaling on horizontal scaling in detail
but right now just
understand vertical scaling means you
can increase the storage of one machine
so suppose if you have a table that has
say 1 million rows
when you foresee that it is going to
grow to 2 million rows you can increase
the memory of that machine but in case
of
relational dbs it becomes difficult to
divide that table and put it on two
different machines
there are ways to divide the table
through application code
but it is difficult to perform
horizontal scaling in case of relational
dbs now let's talk about
non-relational dbs or sometimes known as
nosql dbs
in such databases the schema is not
fixed
and different types of non-relational
dbs cater to different requirements
let's first talk about key value stores
key value stores
have just uh like a hash map it will
just have a key
and a value so suppose you have
requirements like
you have a feature flag or you have
certain discount or promotion
or you want to enable certain feature in
a certain city
for your application
so these kind of values could be stored
in
key value stores there are multiple
other cases for key value stores like
caching solutions are implemented using
key value stores some examples are redis
dynamodb memcache
etc the benefit of key value stores is
they are quite fast
and they provide quick access because
most of the data stores are in memory
apart from uh such kind of data like
application related data or
configuration related data
you can also store like request response
into key value stores
again key value stores could be used in
multiple caching solutions
which we will discuss in detail in the
caching video next let's talk about
document based databases document based
databases are usually
used when you are not sure of the schema
or how the data
and the fields different fields of data
are going to evolve over time
in such cases document based dbs are
used so there is
no fixed schema
and one more important point for
documentdbs are they can support
heavy reads and writes
so let's see how a document based db
looks like
just like in relation dbs we have tables
and rows
document dbs have collections
and documents so you can think of
documents as rows
and collections like tables the use
cases like when you have to
for example store a product details
like for an e-commerce website if you
have to store product details for an
item so you will have item name
item id price
availability tax etc some some details
like that
and you know that these details although
are known but they can change over time
also when querying such kind of data
you would need all these properties at
once in one query so you don't want to
have this different data in different
tables and then make joins
and fetch the data so documentdbs help
you
in decreasing that complexity where you
can just simply fetch documents
from the database so when you have use
cases like that the schema is not fixed
you don't know how it is going to evolve
over time
you want that flexibility of keeping
dynamic data
and also when you have the use cases for
heavy reads and writes
in such cases document dbs are a choice
let's take one more example to make it
more clear
suppose you have a relational db where
you store user related data
so you would have a user table where you
have user id
name city country
the company he works for etc if you have
to fetch
all the user details you would have to
make query to user table
then city table country table and
company table to fetch the details
related to city country and company
and also you have a requirement of
saving a
large amount of user data so this kind
of case becomes complicated while using
relational dbs
on the other hand if you put all this
information
in a document db where you have user
and city and country and
id all that all these details which are
fetched from different tables in case of
relational db if these are fetched
if these are stored in the document db
itself it it just have to fetch one
document
let's look at what are the downsides of
uh document based db's
first that you don't have schema so you
might have null values or empty values
in your db
if and you have to uh you might have to
handle that in your application
code and second is these type of dbs do
not provide
asset transactions so sometimes the
updates could become complex and you
cannot ensure
if the transaction is completed or not
completed
although you can handle that using
application code but that facility is
not provided by the db itself so to
summarize
some of the benefits or the reasons to
choose a
document databases is they provide uh
they are highly scalable they provide
sharding capabilities
if you have dynamic data and you want
that flexibility that you need a schema
less organization of your data
also uh such dbs provide special
querying operations
aggregation queries that can help you to
fetch data as per the requirement
when you have all these factors nosql
db's or documentdbs
are one of the choices if you don't
understand sharding
or horizontal or vertical scaling as i
said there are dedicated videos on this
topic and we'll cover
more about db sharding in those videos
now let's discuss
what are column dbs or column wide
stores column dbs are sort of a
midway of relational dbs and document
tvs in a way
that there is sort of a fixed schema
with tables and columns
but these dbs do not support the asset
transactions
also such databases are used when you
have a requirement of heavy reads
some examples are even data or streaming
data
so if you use a music app you are
continuously either liking the
song or skipping over the song
favoriting your song
all those interactions that are doing
have to be written and stored in dbs as
even data so that analytics could be run
over them such kind of data
is stored in column dbs some other
examples could be
storing health tracking data or storing
data for iot devices
where different sensors are deployed and
sensors are sending data continuously
within every 10 seconds or 30 seconds in
all such use cases
column dbs are used because they support
a large number of heavy rides
coming to the reads such dbs do not
support huge number of leads but they do
support
special kind of reads and the table
structure is defined
by the kind of queries you have to make
for example
the music app the queries will be you
have to fetch user detail
song detail you have to fetch uh users
that have liked a particular song
and also you have to fetch the songs
that are liked by a particular user
so some tables in column db could be
then users
songs users by liked songs and songs by
users like
this design in column dbs is done uh
with respect to what kind of reads are
required
also column dbs are a good supporter of
distributed databases if you don't know
what are distributed
databases we will have a dedicated video
on distributed dbs where we will
dig into more of this in detail some
popular examples of column dbs are
cassandra hbase
sila etc in the description i have
linked companies which use these
databases
and some more examples and use cases so
that you understand how different
companies are using these dbs now let's
talk about
search databases whenever you interact
with any application where you search
for something like
for booking a flight or for booking a
movie or if you're purchasing an item
on amazon all those full text search
queries are supported by
data stored in search databases for
example
if you're reading a book you usually
have an index
at the starting of the book you can find
out
where uh every chapter can be accessed
so suppose if you want to go
to chapter 5 it will say okay go to page
237
so that's how you can easily access this
page
similarly the data against those queries
is stored in advanced indexes
inside search databases so when you
search for a particular item say post it
there will be data saved in these
indexes
to support those search queries some
examples of such databases are elastic
solar etc the important thing to note
here
is the data that is stored in search
databases
that is not the primary data store so if
if you are
working with an e-commerce application
the product catalog
all the products and items will be
stored in a primary database maybe a
relational or a non-relational db
and the results of search queries are
the data on which frequent queries are
executed
that will be stored on search db and it
will be refreshed as per the frequency
of the queries
some other use cases for data are images
and videos
such a kind of data is stored usually on
cloud
in amazon s3 or buckets in case
someone is using gcp then there are
large data sets or time series data
where a lot of data has to be stored and
analytics is run over that
there are different kind of databases
which cater to such needs
all the details are included in the
description so the types of dbs and
different use cases that we have just
discussed these are the most popular
ones
there are many more types of databases
and there are many more use cases
again i have included all of them in
description if you are more curious
about the same
but the rules and the thumb rules that
we have discussed here could be easily
used whenever you are preparing for
system design and when you are trying to
build a large scale system
however these cannot be used as strict
rules
in some cases it will be very easy for
you to identify
that certain requirement it could be
fulfilled with a key value data store
but in some cases when requirements are
fuzzy and when you don't know how the
data is going to evolve over time
it might be a difficult decision to
choose between a relational or a
non-relational db or a document or a
column db
in such cases usually people sit with
team weigh all the pros and cons and
then decide what is the choice that they
have to go ahead with
and it is also possible that uh you
might have chosen a relational db at
certain point uh in your product life
cycle but uh five years down the line or
ten years down the line
when the scale is huge and when the data
is growing so fast you might have to
migrate to other kind of databases
big companies in some cases have to
develop their in-house database
solutions to fulfill their requirements
so there is no right or wrong answers
here these were just some rules that you
could use
to select databases so that was a short
introduction to different types of
databases and their use cases
in further videos we are going to talk
about different techniques
of databases like replication indexing
sharding
scaling etc stay tuned for that again
for your reading there are links in the
description
description please don't forget to check
them out and see you in the next video
you
