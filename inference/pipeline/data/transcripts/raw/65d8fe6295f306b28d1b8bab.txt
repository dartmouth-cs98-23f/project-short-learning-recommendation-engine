hey everyone my name is vishwas and
welcome to what I hope is the first of
many AI related videos on this channel
if you're curious about building your
own AI powered applications but don't
know where to start let me tell you
you're not alone
AI powered apps are all the reach these
days but getting started can seem
overwhelming
that is where I come in
this video I'm going to show you how to
use the open AI API to build a vanilla
Javascript app that responds to your
prompts
think of it as a very simple AI
assistant
this video will provide you with a solid
foundation to kick-start your journey in
building your own AI powered
applications
the first step to working with open AI
API is to obtain an Epi key
if you haven't already head to
platform.openai.com sign up
and create an account
once you're logged in
go to your profile
view API keys
and create a new secret key
give it a name and click on create
secret key
make sure to copy and securely store
this API key as it will be required for
accessing open ai's API services
once you have your API key for Step 2
in vs code create a folder called AI
JavaScript
and within this folder create an
index.html file
and an index.js file
the HTML file will contain the HTML and
CSS for our application while a
Javascript file will contain the
functions to communicate with the openai
API and update the UI with the fetched
response
next for step 3 let's build the user
interface for the application
since HTML and CSS are Technologies we
are familiar with I am going to copy
paste the necessary code to save us some
time
please take a look at the link in the
pinned comment if you want to pause the
video and do the same
now the UI is built using HTML and
Tailwind CSS but please feel free to use
a styling solution of your choice
you can write simple CSS classes or use
something like bootstrap completely up
to you
but let me walk you through a few parts
in the code of copy pasted
in the head section we link to the table
in CSS CDN and index.js in the body
section
we have a title that says streaming
openai completions in JavaScript
an input element to accept the user's
prompt
a button to start generating the AI
response
and a button to stop the generation
process
above the input element
we have an empty section where the
content retrieved from the API will be
populated
the section has an ID of result text
now please make a note that
cdn.tailwindcss.com should not be used
in production but is suitable for quick
prototyping like our AI assistant app
moving on to step 4 let's start our
application by setting up a Dev server
if you're using vs code you can install
the live server extension which will
allow you to open the HTML file with a
live server
so go to extensions
search for live server and install it
after installation
simply right click the HTML file
and select open with live server
you should now be able to view the UI
without any issues
we have the title
a label that says generated text
empty space where the AI response will
be populated
an input for the prompt a generate and a
stop button
now you might be wondering why we need a
Dev server instead of just double
clicking on the HTML file to open it in
the browser
the reason is that fetch requests which
we will be using in our Javascript file
do not work with the file protocol due
to security restrictions
therefore having a Dev server is
essential to properly run our
application
now that we have the HTML in place let's
proceed with the JavaScript code
for step 5 let's start by defining
constants for openai API endpoint and
the key
const API key
is equal to a string and we paste in the
key that we created a few minutes ago
the API endpoint
you can find under API reference
chat
Under The Heading create chart
completion
copy
and paste it
again I want to reiterate that you
should generate your own API key as the
one shown in this video will not work
for you
for step 6 query the Dom elements and
get hold of the prompt input the
generate and stop buttons and the result
section
The const Prompt input is equal to
document.getelementbyid
and the ID of the input is prompt input
similarly
we have generate button
with the same ID stop button with the
same ID
and result text with the same ID
the IDS correspond to the ID attribute
of all the HTML elements
for step 7 handle the click and enter
events to submit the prompt to the chat
API
so generate button dot add event
listener the event is Click
and we're going to call a function
called generate
similarly
prompt input dot add event listener
the event is key up
we specify a callback function and if
event dot key
is equal to enter
recall
the generate function
the open AI completion request should be
triggered on click of the generate
button or when the user presses the
enter key when the prompt input is in
focus
we execute a function called generate
which we will Define next
for step 8 we will write the Crux of
this application we will Define the
generate function which will establish a
connection with the openai API endpoint
and generate a completion for the given
prompt input value
const generate
and this is an async function
within the function we're going to begin
with a try catch block
within the try block We Begin by making
a fetch request to the open AI API
endpoint the const response is equal to
a weight fetch
the first argument is the Epi URL
which is our constant
the second argument is the options
object
we specify method as post
headers which is an object
with content type
set to application slash Json
and authorization
set to Bearer
followed by the API key
again a constant
without this the request will fail
the final option we specify the body of
the post request
we set this to Json Dot stringify
an object an object contains model
which is going to be GPT
3.5 Turbo
and the prompt message that needs to be
sent to open AI for completion
the format for specifying The Prompt is
as follows
array
with an object rule is the key set to
user
and content is the key
set to prompt input
dot value
prompt input is our text field
this code will fetch the completion for
the given prompt let's convert the
response into a Json format
const data is equal to a weight response
dot Json
let's log data to the console
for the catch block we receive error as
parameter and we log it to the console
I'm going to move the event listeners to
the bottom
let's head to the browser and test this
out
you can enter any prompt you want to but
I am going to keep it simple for the
demo my prompt is
three word sentence
click generate
and we see the data logged in the
console
the completion itself though is nested
deep inside the object
within data we have choices which is an
array of objects
at zeroth position we have an object
with a message property this is an
object with a Content property
and this content is the completion from
open AI API
let's log it to the console instead of
data
so data dot choices of zero
Dot message
dot content
let's head to the browser and test this
out
The Prompt is three word sentence
I'm going to press enter this time
and we have the response I am here
of course you might see a different
response
but that completes step number eight
for step 9 let's update the UI with the
response
to display the completion in the UI we
need to assign this log statement value
to the inner text of the result element
so result text
Dot inner text is equal to
data
dot choices of 0 Dot message dot content
let's head to the browser and test this
out
once again
three word sentence is the prompt
click on generate
and this time we see the response in the
UI I am busy we have successfully
integrated the open AI API
but we are not quite done
for the 10th and final step let's
improve the user experience of our tiny
assistant
first if no prompt has been filled in by
the user we don't make the open AI API
call
so if there is no prompt input dot value
let's alert
please enter a prompt
and return
next when the fetch request is in
progress let's disable the generate
button and add a loading text to
indicate the fetch request is being
processed
so generate button
dot disabled
is equal to true so we disable the
generate button and we update
the result text
to the string
generating
for the next Improvement let's display
an error message to the user if there
was an error in our try block
So within the catch block
result text Dot inner text
is equal to
error occurred
while generating
finally irrespective of try or catch
block being executed
we need to enable the generate button
disabled is equal to false
let's head to the browser and test this
out
this time I'm going to enter the prompt
20 word sentence
I want you to closely observe the
generating text indicator in the result
section as well as the generate button
being disabled
click generate
and we see the button is disabled
the loading indicator was also displayed
well the completion was being fetched
we have our chat completion also working
as expected
so these are the 10 steps you need to
integrate the open AI API in a vanilla
JavaScript project
to summarize fill the UI
to accept a prompt
make a post request using that prompt to
the chat completion endpoint
update the UI with the received
completion
these are the steps to get started with
open AI in JavaScript
at this point I'm guessing you might
have a couple of questions
first you might be wondering about the
title streaming open AI completions
second you might be wondering about the
stop button
what exactly is its purpose
third you might have noticed that the
completion process takes a bit of time
especially for longer completions and is
not as fast as chat GPD completions
now these are great questions to address
in part two of this topic on the openai
API in vanilla JavaScript
join me in the next video where we will
learn how to stream openai completions
similar to chat GPD and implement the
stop button functionality to build out
from a completion thank you for watching
and please do consider subscribing to
the channel for more beginner friendly
content on AI I'll see you in the next
one
