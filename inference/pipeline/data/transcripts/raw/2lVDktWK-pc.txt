second,duration,transcript
0.16,4.72,hey what's going on guys so technology
2.639,3.841,has so many different areas as you know
4.88,3.679,and when it comes to programming there's
6.48,4.4,so many different languages to learn and
8.559,5.04,it can be it can be quite overwhelming
10.88,4.879,especially for beginners um so what i
13.599,5.041,wanted to do in this video was was
15.759,5.041,basically a crash course of programming
18.64,4.559,languages and just go through a lot of
20.8,4.639,the modern languages and talk about what
23.199,5.281,they're good for you know how they work
25.439,5.6,and also look at things like low level
28.48,4.88,versus high level and what that means
31.039,4.721,talk about compiled versus interpreted
33.36,4.56,languages statically typed versus
35.76,3.84,dynamically typed so it's going to be a
37.92,4.08,little more than like a top 10
39.6,4.88,programming language video um and i
42.0,4.079,think that it'll help a lot of beginners
44.48,3.919,and even for people that are looking to
46.079,4.721,learn a second or third language i think
48.399,4.0,it can give you some good insight so i'm
50.8,4.0,going to jump into some slides just so i
52.399,4.16,can better convey the information so
54.8,3.09,hopefully you guys enjoy it and let's
56.559,6.721,get into it
57.89,7.47,[Music]
63.28,4.32,all right guys so before we get into
65.36,4.56,specific programming languages we should
67.6,3.92,first talk about low level verse high
69.92,4.16,level and when i say level i'm really
71.52,4.72,talking about the comparison between the
74.08,3.6,language or the code that we write and
76.24,3.76,the machine and what the machine
77.68,4.799,understands because your your computer
80.0,5.52,doesn't directly understand javascript
82.479,4.801,or c-sharp or java or anything like that
85.52,4.08,it has to be compiled into something
87.28,3.92,that the cpu understands
89.6,3.76,so when i say levels i'm basically
91.2,5.2,talking about how close to the hardware
93.36,5.119,the language is and how much abstraction
96.4,4.399,there is between them so you can almost
98.479,4.96,think of the hardware as the lowest
100.799,5.36,level up from that we have machine
103.439,5.441,language or machine code which is the
106.159,5.041,absolute lowest level of code which
108.88,4.879,consists of instructions that are used
111.2,5.519,to control the machine's cpu or central
113.759,5.121,processing unit and these instructions
116.719,4.561,are strictly numeric and they're in the
118.88,4.64,form of zeros and ones which is called
121.28,4.56,binary machine code can also be
123.52,4.959,represented as hexadecimal so it's
125.84,5.119,easier for humans to read but ultimately
128.479,4.561,machines only process zeros and ones
130.959,4.721,because those it represents an
133.04,4.4,electrical state that's either on or off
135.68,3.84,all right now programmers don't write
137.44,4.159,machine code at least anymore
139.52,4.719,i guess you could but it would be very
141.599,4.64,tedious and very error prone and i don't
144.239,4.321,think there's many companies hiring
146.239,3.921,senior machine code developers
148.56,3.2,all right so the next level we have up
150.16,3.92,from that i should see the the next
151.76,5.52,language we have is called assembly
154.08,5.84,language or asm or just assembly and
157.28,5.52,assembly uses numbers symbols and
159.92,5.84,abbreviations as opposed to just ones
162.8,5.519,and zeros like binary machine code and
165.76,4.64,assembly code isn't actually compiled
168.319,4.881,like some of the higher level languages
170.4,4.8,it's converted or assembled into
173.2,4.959,executable machine code by something
175.2,4.48,called an assembler compiling which i'll
178.159,4.0,talk about soon is a much more
179.68,4.8,complicated task than assembling a lot
182.159,4.401,more goes into it and you can learn
184.48,4.08,assembly language there's youtube videos
186.56,4.959,there's even udemy courses that you can
188.56,4.319,take to learn assembly language and i do
191.519,3.521,think it's interesting because you
192.879,4.241,really start to understand how software
195.04,3.52,works with the cpu and works with your
197.12,3.199,computer's hardware
198.56,4.16,assembly is typically used today to
200.319,4.321,develop software or firmware for
202.72,3.84,embedded systems
204.64,4.4,now from here we have the next level
206.56,4.08,which consists of a bunch of general
209.04,4.08,purpose languages that are that are
210.64,5.36,pretty common now in some cases you'll
213.12,5.36,see charts like this that refer to these
216.0,4.879,as high level languages languages like c
218.48,4.56,c plus plus however that's when you're
220.879,4.0,comparing it to the whole chart to
223.04,4.479,machine language assembly language and
224.879,5.601,so on these languages are lower than
227.519,4.8,something like python or java or ruby
230.48,4.319,which we'll talk about later
232.319,4.721,so let's take a look at c c is the
234.799,4.321,lowest level general purpose language
237.04,3.52,the only thing lower than c is assembly
239.12,4.8,and machine code
240.56,5.759,and c was created in the early 70s by
243.92,4.8,dennis ritchie and was actually derived
246.319,4.56,from another language called b
248.72,4.719,and c was used in the development of the
250.879,4.0,unix operating system it's a procedural
253.439,4.48,language as opposed to an
254.879,5.521,object-oriented one and it's lower level
257.919,4.801,than many other languages so you do have
260.4,4.88,to manage some some hardware resources
262.72,4.0,such as memory allocation and i'll talk
265.28,4.88,a little bit more about that in the next
266.72,5.52,slide so c is very powerful it's used
270.16,3.759,for things like operating systems the
272.24,4.88,windows kernel for instance is built
273.919,5.441,with c it's also used to build compilers
277.12,5.28,for other languages it's used for
279.36,4.8,drivers database systems and many other
282.4,4.88,powerful programs
284.16,4.8,and c is also a compiled language
287.28,3.6,so before we move to the next language
288.96,4.239,let's talk about compiled versus
290.88,4.319,interpreted languages so a compile
293.199,4.481,language requires a piece of software
295.199,4.481,called a compiler which will compile the
297.68,2.799,code that you write with a language like
299.68,2.64,c
300.479,4.801,down to instructions that the machine
302.32,4.96,understands so the compiled program is
305.28,4.96,not human readable it's meant for them
307.28,5.28,the machine and it's executed by the cpu
310.24,5.04,now usually with lower level compiled
312.56,5.6,languages such as c you have to manage
315.28,4.16,your memory so memory allocation cpu
318.16,4.08,usage
319.44,4.88,you have more access to the hardware but
322.24,2.959,of course it's more difficult to work
324.32,3.12,with
325.199,4.801,with an interpreted language the source
327.44,5.039,code is not directly compiled to machine
330.0,5.12,code there's more abstraction to it and
332.479,4.881,a program called an interpreter reads
335.12,5.2,and executes the code in some languages
337.36,4.0,like python and ruby are first compiled
340.32,3.36,into
341.36,4.72,some sort of byte code which are binary
343.68,4.239,instructions that are executed by a
346.08,4.24,virtual machine such as the python
347.919,4.881,virtual machine technically they do have
350.32,5.36,a compile step but they're not being
352.8,6.16,compiled directly to machine code like
355.68,5.28,with with a lower level language like c
358.96,4.959,so we usually refer to those as
360.96,4.72,interpreted or scripting languages now
363.919,4.081,interpreted languages are typically
365.68,4.72,easier to work with and allow you to
368.0,4.4,write code faster so there's a fast
370.4,5.519,write time however there's more
372.4,5.519,abstraction than with a compile language
375.919,4.641,where your code is simply compiled
377.919,5.441,directly into machine code and executed
380.56,5.04,so this makes programs faster at runtime
383.36,3.679,for compile languages and of course this
385.6,3.36,isn't all you're going to look at when
387.039,3.841,choosing a language it's just good to
388.96,3.679,know the difference so the next language
390.88,3.84,we're going to look at is c plus plus
392.639,4.641,which is another lower level language
394.72,5.44,that was created in the 80s and it's
397.28,6.0,actually a superset of c meaning that it
400.16,5.84,is essentially c but it has a bunch of
403.28,5.6,extra tools so c plus plus is actually
406.0,5.12,object oriented which is a coding
408.88,4.56,paradigm based on the concepts of
411.12,5.359,objects and like i was talking about in
413.44,4.72,the last slide both c and c plus plus
416.479,4.0,there's no what's called garbage
418.16,4.8,collection which means that you have to
420.479,5.041,manually allocate and free memory within
422.96,4.639,your code so c plus plus is an
425.52,5.6,incredibly powerful language it's used
427.599,6.32,to build things like aaa gaming titles
431.12,5.68,operating systems it's used in vr
433.919,4.161,robotics scientific computing and stuff
436.8,3.839,like that so
438.08,5.2,if you're interested in those types of
440.639,4.081,uh that part of technology then c plus
443.28,3.6,plus might be
444.72,5.199,something to look into
446.88,5.52,all right so rust or rustling is a
449.919,4.961,relatively new low level and high
452.4,5.04,performance language that provides
454.88,4.879,higher level capabilities and it
457.44,4.479,provides protection to keep you from
459.759,3.921,making mistakes with memory allocation
461.919,2.56,so that there is no garbage collection
463.68,3.28,but
464.479,5.28,there is protection built in more so
466.96,5.04,than something like c or c plus plus and
469.759,5.361,rust can be used for game engines
472.0,6.16,operating systems browser components
475.12,5.44,vr and much more and it can be used to
478.16,4.64,create web servers and used in the back
480.56,5.199,end for for web development you can
482.8,5.44,create apis and microservices with rust
485.759,4.081,it has some frameworks like rocket
488.24,3.92,which will help you build web
489.84,4.56,applications and one area that i think
492.16,5.039,rust is is thriving in and will continue
494.4,5.359,to thrive in is web assembly so
497.199,4.881,webassembly is a new type of byte code
499.759,4.481,that can be run in modern browsers and
502.08,4.239,it provides very high performance within
504.24,4.88,the browser much higher than than what
506.319,5.121,javascript can give us so there's a few
509.12,4.88,languages that can be compiled into
511.44,5.279,webassembly including c plus plus and
514.0,4.8,rust and i think webassembly is going to
516.719,4.481,be huge in the future for things like
518.8,4.96,gaming and video tools within the
521.2,4.4,browser so learning rust may be a really
523.76,2.639,good idea if you're into that kind of
525.6,3.04,thing
526.399,4.641,all right so we're going to move to some
528.64,5.36,higher even higher level languages which
531.04,5.359,are most of which are interpreted so
534.0,4.959,they're not quite as fast in terms of
536.399,5.361,the the software you build but they're
538.959,4.801,generally easier to learn and extremely
541.76,4.0,popular in the industry
543.76,4.16,since this channel is focused mostly on
545.76,3.44,web development these are probably the
547.92,3.52,language that you're going to be
549.2,4.079,choosing from also i do want to mention
551.44,3.76,that there are other lower level
553.279,5.12,languages that are you know on this
555.2,4.8,level here such as pascal but i i don't
558.399,3.12,want to make this video too long so i'm
560.0,3.92,not going to talk about every single
561.519,5.281,language in existence
563.92,5.68,so next we're going to look at java so
566.8,5.12,java is a high-level class-based
569.6,4.72,object-oriented programming language
571.92,4.64,everything and you create create in java
574.32,4.8,is essentially an object or part of an
576.56,4.8,object and objects are defined by
579.12,4.48,classes that have variables which are
581.36,5.52,also called properties and functions
583.6,5.28,also called methods so java is a what's
586.88,4.639,called a write once run anywhere
588.88,4.8,language meaning that compiled java code
591.519,5.201,can run on all platforms that support
593.68,5.68,java without the need to recompile so
596.72,5.28,java code is typically compiled into
599.36,5.52,bytecode that can run on what's called
602.0,4.56,the jvm or the java virtual machine and
604.88,3.76,i'm sure that you guys have installed
606.56,4.48,all of installed the jvm on your
608.64,4.639,computer at one point or another
611.04,4.799,so java is used for a lot of different
613.279,4.641,things including graphical you know
615.839,5.201,desktop applications enterprise
617.92,4.88,applications java's still pretty popular
621.04,4.239,in big business
622.8,4.32,it's also used for web servers and apis
625.279,4.56,it's used for mobile app development
627.12,6.0,specifically android apps google uses
629.839,6.321,java for many of its products minecraft
633.12,6.48,was created with java and companies like
636.16,5.679,spotify linkedin amazon all use it in
639.6,5.2,one form or another
641.839,5.201,java is also statically typed so this is
644.8,5.76,something else that i wanted to talk a
647.04,5.6,little bit about before moving forward
650.56,4.719,so every general purpose language that
652.64,5.199,we've talked about up up to this point
655.279,5.841,is statically typed and what that means
657.839,4.161,is that the type checking is performed
661.12,3.76,at
662.0,4.88,compile time and we have to explicitly
664.88,4.56,define types for our data within our
666.88,4.079,code so for our variables and our
669.44,3.839,function returns
670.959,4.56,if something is a string we need to
673.279,4.961,define it as a string and it can't
675.519,5.361,change into a boolean or some other type
678.24,4.32,now dynamic languages such as javascript
680.88,3.84,and python
682.56,6.0,which we'll get to soon do not require
684.72,6.48,us to define types explicitly as type
688.56,4.88,checking is done at runtime so it
691.2,4.16,basically assumes the type automatically
693.44,3.76,or dynamically
695.36,4.0,as far as which is better there's
697.2,3.36,trade-offs with dynamic languages you
699.36,3.84,don't have to
700.56,4.88,worry about you know typing everything
703.2,4.8,so it's less code however statically
705.44,5.12,typed languages can be less prone to
708.0,5.2,errors and can be more robust so just
710.56,4.16,keep that in mind moving along and i
713.2,3.84,know that i have a lot of javascript
714.72,4.239,developers as viewers and you can just
717.04,4.0,think of you know javascript versus
718.959,5.44,typescript because typescript is
721.04,4.64,javascript with static typing
724.399,3.201,all right so
725.68,4.32,i wanted to mention kotlin right after
727.6,5.84,java because it also uses the java
730.0,6.32,virtual machine the jvm and it's it's
733.44,5.199,also used for android apps in fact most
736.32,5.199,modern native android apps are built
738.639,4.88,with kotlin uh if you're looking to
741.519,5.12,learn kotlin or java i'd probably
743.519,4.081,suggest kotlin because of its popularity
746.639,3.281,and
747.6,4.88,and most people say that it's easier
749.92,4.96,easier than java i don't really have any
752.48,5.599,experience with kotlin but it can be
754.88,5.6,used as an object-oriented language or
758.079,4.161,procedural code in addition to mobile
760.48,5.76,development it can be used for web
762.24,6.88,servers data science and and much more
766.24,5.76,so as far as who uses kotlin you have
769.12,5.839,cache app vmware plan grid these are
772.0,5.519,some examples of of services or
774.959,4.56,companies products that use kotlin
777.519,4.32,so next we're going to look at c sharp
779.519,5.041,which is another compiled and statically
781.839,5.44,typed language and unlike c and c plus
784.56,4.56,plus it is fully managed in terms of
787.279,4.24,garbage collection i know all the
789.12,4.399,different c languages can be confusing
791.519,5.201,but c sharp is higher level than the
793.519,6.88,others it is object oriented much like
796.72,6.0,java in fact a lot of the syntax is or
800.399,5.281,looks similar to java in my opinion i've
802.72,5.679,used both i would most likely suggest c
805.68,4.88,sharp over java though you have the net
808.399,4.56,framework which c sharp can use you can
810.56,5.44,also use the visual basic language as
812.959,5.68,well as f-sharp with the.net framework
816.0,5.519,c-sharp is typically called a compiled
818.639,5.681,language but it's compiled it isn't
821.519,5.44,compiled directly to machine code it's
824.32,5.199,compiled into something called il or
826.959,5.521,c-sharp intermediate language and
829.519,5.361,c-sharp also uses the clr or common
832.48,4.08,language runtime environment so it is
834.88,4.24,compiled there's just a little more
836.56,5.12,abstraction to the process c-sharp is
839.12,4.88,used for desktop applications especially
841.68,4.399,windows apps microsoft did create
844.0,3.76,c-sharp and net
846.079,4.721,so they're great tools for building on
847.76,5.68,windows c-sharp is also used for web
850.8,6.399,development you have the asp.net
853.44,6.72,mvc framework it can also be used for
857.199,5.841,gaming along with unity and mobile apps
860.16,5.039,along with xamarin i think csharpen.net
863.04,4.08,is an excellent choice for a tech stack
865.199,5.921,for for many different purposes
867.12,5.92,microsoft's visual studio ide is used to
871.12,4.8,build c-sharp apps
873.04,7.12,but c-sharp is also one of the languages
875.92,6.4,that it was built with including vb.net
880.16,4.16,so next we're going to look at go or
882.32,4.56,golang which is an extremely powerful
884.32,5.12,open source language supported by google
886.88,4.48,it's it's a compiled statically typed
889.44,3.519,language used for
891.36,3.599,a lot of different things and it's
892.959,5.041,really known for being very fast and
894.959,5.281,scalable and it has a very robust
898.0,4.959,standard library as well
900.24,5.12,many parts of go are inspired by other
902.959,5.841,languages for example it borrows static
905.36,5.919,typing and run time efficiency from c
908.8,5.279,and its readability and usability from
911.279,4.8,python and javascript so one thing i see
914.079,4.641,over and over when it comes to go
916.079,6.081,programming is like i said it has a very
918.72,5.44,robust standard library and
922.16,4.56,when talking about web development
924.16,5.039,usually you use a back end framework
926.72,4.559,with with these types of languages if
929.199,4.241,you want to build some kind of rest api
931.279,3.92,or something but with go you actually
933.44,4.0,don't need a framework for something
935.199,4.401,like that in many cases
937.44,4.319,there are frameworks available but like
939.6,4.479,i said it just has a great standard
941.759,4.08,library that comes with it as far as
944.079,4.641,examples of what it's used for you have
945.839,5.201,back-end apis and microservices
948.72,4.64,distributed network services and
951.04,5.2,cloud-native development some companies
953.36,6.56,that use go are obviously google
956.24,4.959,uber dropbox and many more
959.92,3.76,all right so next we're going to get
961.199,4.721,into python which is extremely popular
963.68,5.68,right now and is very diverse in its
965.92,5.839,uses so python is a dynamic language or
969.36,4.719,dynamically typed interpreted language
971.759,5.041,also called a scripting language
974.079,5.361,and although it does first get compiled
976.8,5.68,into something called bytecode that then
979.44,5.6,is executed by the interpreter so python
982.48,5.039,is is the preferred language of many
985.04,4.08,developers in many different areas it's
987.519,4.56,amazing when it comes to machine
989.12,6.0,learning and ai as well as data science
992.079,4.88,automation and web development as far as
995.12,4.719,web development which is you know kind
996.959,5.361,of my area um python has some really
999.839,5.041,great frameworks django and flask i
1002.32,4.24,think are two of the two of my top i'd
1004.88,4.639,say probably my top
1006.56,4.88,five to seven uh somewhere in that range
1009.519,3.44,especially django django's probably in
1011.44,4.24,my top three
1012.959,5.68,frameworks of all time but python is not
1015.68,5.68,a c syntax language so it looks
1018.639,5.841,different than something like c or java
1021.36,4.64,or javascript we don't use curly braces
1024.48,4.479,and we don't use semicolons for
1026.0,5.36,termination instead we use indentation
1028.959,4.72,so it looks more like plain english than
1031.36,6.16,many other languages some companies that
1033.679,7.441,use python are nasa intel ibm spotify
1037.52,6.559,and many other massive companies
1041.12,5.199,okay so ruby is a highly portable
1044.079,4.321,dynamically typed language that's used
1046.319,4.161,for many purposes it's an interpreted
1048.4,4.08,languages but like python it's first
1050.48,4.24,compiled to bytecode and then
1052.48,4.96,interpreted by a virtual machine i've
1054.72,4.56,used both python and ruby in my career
1057.44,3.76,and there seems to be a lot of
1059.28,4.0,similarities they're both relatively
1061.2,5.52,easy to learn they're high level
1063.28,5.6,interpreted languages python is is uh
1066.72,3.52,faster than ruby in general
1068.88,4.24,but there's a lot of there's a lot of
1070.24,5.84,similarities ruby also doesn't use curly
1073.12,5.28,braces we have the indentation syntax
1076.08,5.68,and the creator of ruby yukahiro
1078.4,5.76,matsumoto or mats he actually said that
1081.76,4.24,one of his goals when creating ruby was
1084.16,3.92,to make it a pretty language a
1086.0,4.16,good-looking language that was easy to
1088.08,4.8,to read and write so it's it almost
1090.16,5.04,looks like english so ruby's used for
1092.88,4.64,building desktop applications automation
1095.2,4.16,tools and web development usually when
1097.52,3.92,we talk about ruby and web development
1099.36,4.16,which we're talking about ruby on rails
1101.44,4.96,which is a popular framework that i
1103.52,5.36,personally love and and worked with for
1106.4,5.76,a little over a year and it's a very
1108.88,5.84,opinionated framework and offers a ton
1112.16,4.72,of tools which makes it great for rapid
1114.72,5.36,development so you can basically
1116.88,5.52,scaffold up a crud application that uses
1120.08,4.479,a database in literally
1122.4,4.399,a minute or two it's it has lost some
1124.559,3.921,popularity over the last few years but
1126.799,4.081,it's still a great framework some
1128.48,5.92,companies that use ruby in one way or
1130.88,5.679,another are twitter dribble and groupon
1134.4,4.8,all right so now we're at the language
1136.559,4.561,that is very popular among my viewers
1139.2,3.839,and very popular in general because
1141.12,4.32,javascript is the language of the
1143.039,3.841,browser so if you're a web developer
1145.44,5.68,you're you're going to know at least
1146.88,5.28,some javascript and it used to be i'd
1151.12,2.799,say like
1152.16,3.84,maybe like 10 years ago when javascript
1153.919,4.481,was first created it was used to build
1156.0,4.24,little interactive widgets on the page
1158.4,3.68,given you know some dynamic properties
1160.24,3.28,but over the years
1162.08,3.68,with the introduction of front-end
1163.52,4.24,frameworks like react it's used for a
1165.76,4.32,hell of a lot more and we can build very
1167.76,5.12,powerful single page applications that
1170.08,4.959,that runs strictly on the client and
1172.88,4.159,then in addition to that we have node.js
1175.039,4.321,which allows us to run javascript on the
1177.039,4.64,server and use it just like we would any
1179.36,4.72,of these other backend languages
1181.679,6.641,and many full stack developers including
1184.08,7.04,myself prefer node.js over other backend
1188.32,4.8,solutions because they like to have the
1191.12,4.4,same language on the back end as they do
1193.12,4.48,on the front end node.js is also
1195.52,3.44,extremely fast and
1197.6,3.52,at least for for a lot of different
1198.96,4.8,tasks it's very fast and it has a great
1201.12,5.84,ecosystem with npm which is the node
1203.76,6.24,package manager so javascript is an
1206.96,5.28,interpreted scripting language that by
1210.0,4.559,default is dynamic but if you want you
1212.24,5.04,can use typescript which is a superset
1214.559,5.761,of javascript that adds static typing
1217.28,5.44,so front-end javascript is used by just
1220.32,5.2,about every company that that does
1222.72,5.36,anything in the browser and node.js or
1225.52,6.24,backend javascript is used by companies
1228.08,5.52,like nasa paypal medium and netflix
1231.76,4.32,we also have technologies like react
1233.6,4.64,native that lets us use javascript to
1236.08,4.56,build mobile applications and then we
1238.24,4.16,have electron as well as some other
1240.64,4.72,frameworks that allow us to use
1242.4,5.36,javascript to build desktop applications
1245.36,4.48,in fact vs code is built with javascript
1247.76,5.52,as well as some other popular desktop
1249.84,5.52,apps such as postman and slack so
1253.28,4.72,javascript is absolutely everywhere
1255.36,4.319,which is another reason that i love it
1258.0,4.559,all right so next we're going to look at
1259.679,5.281,php which is actually the first language
1262.559,4.721,that i really learned java was the first
1264.96,4.16,language that i ever used but i stopped
1267.28,4.96,when i decided to go into web dev
1269.12,5.84,because php was so popular at the time
1272.24,5.2,so php is a dynamic scripting language
1274.96,4.88,that is used to build static and dynamic
1277.44,5.2,websites and web apps and what's really
1279.84,4.8,cool about php and makes it very
1282.64,5.039,practical for web developers is that you
1284.64,6.399,can embed php directly into
1287.679,5.681,directly with html and that makes it
1291.039,5.441,easy to add functionality to websites
1293.36,5.679,without having to call external files
1296.48,4.48,so php can be used as a procedural
1299.039,4.801,language or as an object oriented
1300.96,5.36,language the syntax can sometimes be
1303.84,5.92,pretty messy i think that it gets a lot
1306.32,5.44,of flack for that so i do prefer to use
1309.76,4.24,it in an object-oriented way i think
1311.76,4.32,that makes it much cleaner there are
1314.0,5.52,some great frameworks web frameworks for
1316.08,5.2,php such as laravel and there's all
1319.52,4.0,types of open source tools like
1321.28,4.96,wordpress which is a blogging platform
1323.52,4.48,or a cms so php is great for making
1326.24,3.76,things fast which makes it really
1328.0,4.48,popular in the freelancing community as
1330.0,4.799,well as small businesses there's quite
1332.48,4.8,uh quite a bit of hate online towards
1334.799,4.561,php but it's getting better part of the
1337.28,4.16,reason of that is i think php is getting
1339.36,3.76,better now with version eight and it's
1341.44,3.68,usually from people that never really
1343.12,4.4,worked with it or haven't worked with it
1345.12,5.28,for a while or have never worked as a
1347.52,5.6,freelancer or outside of a big company
1350.4,4.72,on a team because again php is great for
1353.12,4.0,just building things fast and getting
1355.12,4.16,getting products out there
1357.12,4.96,all right so swift is a general purpose
1359.28,4.8,compiled language developed by apple and
1362.08,5.92,is mostly used to develop applications
1364.08,6.32,for ios ipad os mac os and any other
1368.0,4.64,device that apple creates it's
1370.4,5.12,relatively easy to learn and it's
1372.64,5.039,extremely fast iphone applications used
1375.52,4.0,to be created mostly with a language
1377.679,4.48,called objective c
1379.52,4.72,but most are built with swift these days
1382.159,4.481,and i believe apple has stated that
1384.24,5.439,swift is about 2.5
1386.64,6.399,times faster than objective c so if
1389.679,7.441,you're looking or thinking of going into
1393.039,6.081,native ios apps or mac os swift is is
1397.12,4.72,one of your main choices like i said
1399.12,4.559,swift is very fast and it's compiled
1401.84,4.24,into it's first compiled into something
1403.679,4.561,called swift intermediate language and
1406.08,4.56,then into machine code from what i
1408.24,4.64,understand and companies like uber
1410.64,4.2,robinhood and lyft
1412.88,4.96,all use swift in their tech
1414.84,5.079,stacks all right so obviously there's
1417.84,3.6,other programming languages out there
1419.919,4.24,but i think that these are some of the
1421.44,4.4,most popular ones at least at this time
1424.159,4.241,and as you can see they're all very
1425.84,4.8,different so what i would suggest is
1428.4,4.159,just look at what you want to do in tech
1430.64,4.48,and find the language that best suits
1432.559,4.801,you you may have to try a few languages
1435.12,5.439,but that's fine even if you learn let's
1437.36,6.16,say the basics in ruby if you switch to
1440.559,4.961,python there'll be a lot that you can
1443.52,4.159,grasp very quickly because of what you
1445.52,4.08,learned in ruby and a lot of it comes
1447.679,4.321,down to syntax but
1449.6,4.72,i also wanted you to just get familiar
1452.0,5.36,with what high-level languages are and
1454.32,5.04,low-level and static and dynamic typing
1457.36,4.4,and all that good stuff so i hope you
1459.36,3.919,learned something from this video and
1461.76,4.159,thanks for watching and i'll see you
1463.279,2.64,next time
