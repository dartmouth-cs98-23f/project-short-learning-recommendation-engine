second,duration,transcript
0.08,3.52,"This is an intermediate Git 
course taught by Tobias Günther.  "
3.6,3.68,"He'll help you move beyond Git 
basics and improve your Git workflow.  "
8.88,4.96,"Hello, Free Code Camp friends, my name is Tobias. 
And I'm going to improve your Git knowledge today.  "
14.8,4.24,"There are a lot of beginner tutorials 
out there about version control with Git.  "
19.04,3.84,"But I will help you understand the 
concepts behind many things in git,  "
23.44,5.44,"how to craft the perfect commit, how to 
choose a branching strategy, or how merge  "
28.88,5.2,"conflicts really work. So my goal is to give 
you more confidence when you work with git,  "
34.64,3.84,"and to get you a little bit closer 
to becoming an advanced Git user.  "
39.92,5.04,"Before we start a huge shout out to the Free 
Code Camp team, thank you so much for being on  "
44.96,4.48,"this mission of teaching people how to code. And 
thanks for letting me contribute a little bit.  "
50.8,5.28,"A couple of words about my own background, I'm 
part of the team behind tower, and tower is a  "
56.08,7.28,"git desktop GUI. for Mac and Windows, we've been 
around for more than 10 years now, and helped over  "
63.36,7.2,"100,000 developers and designers well work more 
easily with git, become more productive with git,  "
70.56,6.96,"and make fewer mistakes. For today's session, 
you don't need to have tower installed,  "
77.52,8.32,"you can follow along on the command line, 
no problem. Alright, let's get started.  "
89.2,6.48,"So let's talk a bit about how to create the 
perfect commit. So the first part is to add the  "
95.68,8.08,"right changes, right. And the second part is to 
compose a good commit message. So let's start by,  "
108.08,4.56,"let's start by adding changes to the 
commit. So our goal here is to create  "
112.64,4.88,"a commit that makes sense one that only 
includes changes from a single topic.  "
118.08,4.72,"And in contrast to the easy way when we 
sometimes just cram all of our current  "
122.8,7.12,"local changes into the next commit. So this 
is the bad thing we should not do. But being  "
129.92,5.04,"selective and carefully deciding what should 
go into the next commit is really important.  "
136.56,7.36,"This is a better way of how a better commit could 
look like because it separates different topics.  "
145.44,5.2,"On the other hand, the bigger a commit gets. And 
the more topics that are mixed into the commit,  "
150.64,7.68,"the harder it gets to understand both for your 
colleagues and for yourself in the future. So  "
158.32,6.32,"Git staging area concept is really helpful in this 
context, it allows you to select specific files,  "
164.64,7.12,"or even parts of those files for the next commit. 
So this is what the staging area can do for you,  "
171.76,6.72,"you can really select individual files for one, 
commit, and even parts of files for one commit  "
178.48,8.16,"and leave others for future commit. So let's take 
a look at a practical example. And over the last  "
186.64,6.72,"few hours, or maybe even days, we've created 
a bunch of changes, let's say git status here.  "
194.96,5.2,"But let's say that not all of those are 
about the same topic. So let's stick to  "
200.16,5.6,"that golden rule of version control to 
only combine changes from the same topic  "
205.76,6.4,"in a single commit. And you probably already know 
that to include a specific file, we can simply  "
213.04,10.0,"type, git add and the name of the file. So let's 
add that CSS file here. And voila, and let's take  "
223.04,7.28,"a closer look at another file index HTML and see 
what changes it currently contains. So we can  "
230.32,9.84,"use git diff for that. And we can see that there 
are two parts or chunks of changes at the moment.  "
240.16,5.36,"And let's say that the first one belongs to the 
next commits topic, but not the second one. So  "
245.52,5.84,"let's just add the first part to the staging 
area, we can do that. Let me just exit the  "
252.88,10.4,"output here. We can do that with the git add git 
add dash p flag. P brings us down to the patch  "
263.28,5.36,"level, we want to decide on the patch level what 
to include and what not. And we want to do that  "
268.64,8.88,"with index HTML. So now Git steps through every 
every single chunk of changes with us. And it  "
277.52,5.92,"asks us a simple question. Do we want to add 
this chunk or hunk to the staging area or not?  "
283.44,5.92,"Don't worry about all the other possible answers 
you can give in that situation. I don't know them.  "
289.92,7.04,"And I want to sleep at night for us. A simple 
why for Yes, or n for no is sufficient. So let's  "
296.96,6.48,"say this one is actually the topic that we want to 
commit. So let's say yes, we want to include that.  "
304.88,4.96,"And, and for the second one, this is not the 
same topic. So let's leave that out of the  "
309.84,7.2,"staging area for the moment. So if we now take 
another look at git status, we can see that  "
319.44,6.24,"parts of index HTML will be included in the next 
commit changes to be committed, and other parts  "
326.48,8.64,"will be left for a future commit. Again, so index 
HTML is listed twice, awesome. crafting a commit  "
335.12,5.52,"like this in a very granular way, will help you 
create a very valuable commit history, one that  "
340.64,5.04,"is easy to read and to understand. And this is 
crucial if you want to stay on top of things.  "
347.76,6.64,"Now let's talk about the second part of creating 
that perfect commit. And that is providing great  "
354.4,8.24,"commit message. We'll start with the subject line. 
So of course, conventions are different between  "
362.64,5.52,"teams. But generally, the advice is to write 
something very concise, less than 80 characters if  "
368.16,7.04,"possible. And the subject should be a very brief 
summary of what happened. And here's a little  "
375.2,5.52,"hint, if you have trouble writing something short 
and concise, then this might be an indication that  "
380.72,7.52,"you've put too many different topics into that 
commit, right. So let's go to the command line.  "
390.48,6.32,"And if I now type, so I have a couple of 
changes against stage for the next commit.  "
396.8,7.84,"If I type git commit, I will get an editor 
window where I can enter a commit message.  "
406.32,5.92,"And we'll write something simple 
ad capture for email signup.  "
414.4,7.072,"If we add an empty line after the subject, get 
knows we are writing the body of the message and  "
421.472,5.248,"has room for a much more detailed explanation. So 
here are a couple of questions you might want to  "
427.84,5.6,"answer with your commit message body this 
year, what's now different than before,  "
433.44,6.24,"what's the reason for the change? And is there 
anything to watch out for or anything particularly  "
439.68,13.12,"remarkable about that commit. So I'll write my 
version of that in the text editor here. And  "
456.32,5.44,"voila, so let's save and close 
this. And the commit is done.  "
462.96,7.12,"Let's take a quick look at git log, and we can 
see Okay, so this is the last commit we just did.  "
470.08,5.84,"This is the subject, and this is the 
body of the message. So by answering  "
475.92,4.72,"these questions you're doing your colleagues 
and your future self a huge favor, because  "
480.64,4.56,"it helps to understand what exactly happened 
in this revision, and what to watch out for.  "
489.76,5.52,"Let's talk a bit about branching strategies. 
This is an important topic because Git leaves it  "
495.28,6.16,"completely up to you how you want to work with 
branches. It only provides the tool, but you  "
501.44,6.56,"and your team are responsible for using it in the 
optimal way. And this brings us to our first topic  "
508.0,5.44,"conventions. If you work in a team, you need to 
come up with a clear convention on how to how  "
513.44,5.2,"you want to work with branches. And you need to 
write this down somewhere where it's accessible to  "
518.64,6.32,"everyone. Why your team needs a written convention 
you ask because Git allows you to create branches,  "
524.96,5.44,"but it doesn't tell you how to use, you need 
a written best practice of how to work or how  "
530.4,7.12,"work is ideally structured in your team to avoid 
mistakes and collisions. And this highly depends  "
537.52,7.28,"on your team and team size on your project, and 
how you handle releases of your software. last not  "
544.8,4.88,"least it helps to onboard new team members. When 
new people join your team, you can point them to  "
549.68,5.12,"your documented will convention and will quickly 
understand how branches are handled in your team.  "
556.48,4.0,"When you think about how you want to work 
with branches, you automatically think  "
560.48,6.0,"about how you integrate changes and structure 
releases. These topics are tightly connected.  "
569.2,3.12,"To help you better understand your 
options. Let's simplify a little bit.  "
572.32,4.08,"I'll show you how to extreme versions 
of how you could design your branching  "
576.4,6.88,"workflows. And the motto of the first one is 
always be integrating mainline development.  "
584.24,4.16,"Always integrate your own work with the 
work of the team. That's the motto here.  "
589.6,5.76,"And this is how it could look. In this 
example we only have a single branch  "
595.36,5.84,"where everyone contributes their commits. So 
this is a really simple For example, I doubt  "
601.2,5.04,"that any team in the real world would have such 
simple branching structure. But for illustration,  "
607.12,4.96,"this extreme simplified example helps us 
understand the advantages and disadvantages  "
612.08,5.84,"of this model. So in an always be integrating 
model, you have very few branches. And this makes  "
617.92,5.76,"it easier to keep track of things in your project. 
Of course, also commits in this model must be  "
623.68,6.16,"relatively small. This is a natural requirement 
because you cannot risk big bloated commits  "
629.84,4.32,"in such an environment where things are 
constantly integrated into production code.  "
634.88,6.4,"And this also means that you must have a high 
quality testing environment setup. Again,  "
641.28,4.48,"the premise in this model is that code is 
integrated very quickly into your main line  "
645.76,5.6,"your production code. And this means that testing 
and QA standards in your team must be top notch.  "
652.0,6.24,"If you don't have this, this model will not 
work for you. The other end of the spectrum  "
658.96,6.96,"is when multiple different types of branches 
enter the stage. So here branches are used  "
665.92,5.92,"to fill to fulfill different jobs. New features 
and experiments are kept in their own branches.  "
671.84,4.88,"releases can be planned and managed it managed 
in their own branches. And even different states  "
676.72,5.92,"in your development flow, like production 
develop, can be represented by branches.  "
684.24,4.72,"Remember that this all depends on the needs 
and requirements of your team and project,  "
688.96,4.64,"it's hard to say that one approach is better 
than the other. And although a model like  "
693.6,5.2,"this one seems complicated, it's mostly a 
matter of practice and getting used to it.  "
699.92,4.32,"And as I already said, in reality, most teams 
are working somewhere in between these extremes.  "
705.36,4.88,"Now let's look closer at two main types 
of branches and how they are used.  "
711.68,3.6,"These two types of branches are long 
running and short lived branches.  "
715.28,4.24,"So the distinction between a long 
running and a short lived branch  "
719.52,4.88,"is one of the broadest you can make and a 
very helpful one. So let's start about talking  "
725.68,7.644,"about the long running branches first. Every 
Git repository contains at least one long  "
733.324,6.356,"running branch typically something called main or 
master. But there might be also other long running  "
739.68,5.28,"branches in your project something like develop 
or production or staging. For example, these  "
744.96,6.64,"branches all have something in common they exist 
throughout the complete lifecycle of the project.  "
752.64,4.96,"I've already mentioned one typical example of 
such a long running branch. Every project has a  "
757.6,6.4,"mainline branch like master or main. And another 
type of long running branches are so called  "
764.0,6.96,"integration branches, often named develop or 
staging. Typically, these branches represent  "
770.96,5.84,"states in a project release or deployment process. 
If your code moves through different states,  "
776.8,5.12,"for example, from development to staging to 
production, it makes a lot of sense to mirror the  "
781.92,8.72,"structure in your branches to. And finally, many 
teams have a convention connected to long running  "
790.64,6.4,"branches. Typically commits are never directly 
added to these branches. commits should only make  "
797.04,5.36,"it to the long running branch through integration. 
In other words, through a merge or rebase.  "
803.44,5.12,"There are a couple of reasons for such a rule. 
One has to do with quality. You don't want to  "
808.56,7.04,"add untested and reviewed code to your production 
environment as an example. And that's why code  "
815.6,5.36,"should go through different states tests and 
reviews before finally arrives on production.  "
822.56,5.44,"Another reason might be release bundling and 
scheduling, you might want to release new code  "
828.0,6.4,"in batches maybe even thoroughly scheduled. 
And without such a rule. When code is directly  "
834.4,5.68,"committed to long running branches like main, 
keeping an eye on what's released becomes pretty  "
840.08,8.895,"difficult. Now the other type of branches are 
short lived branches. And in contrast to long  "
848.975,5.665,"running branches, they are created for certain 
purposes, and then deleted after they have been  "
854.64,4.4,"integrated. There are many different reasons 
to create short live branches. For example,  "
859.04,6.4,"when you start working on a new feature, a bug 
fix or refactor refactoring or an experiment. And  "
865.44,5.44,"typically a short lived branch will be based on a 
long running branch. For example, when you start  "
870.88,5.04,"a new feature, you might base that new feature 
on your long running main branch for example,  "
876.48,5.52,"and after making some commits and finishing 
your work, you probably want to re integrate it  "
882.0,7.72,"back into main. And after you've safely merged or 
rebased it your feature branch can be deleted. And  "
891.52,4.56,"I've already said that branching strategies 
will be different for each team and project.  "
896.08,3.76,"It highly depends on your preferences 
or team size or type of project.  "
901.28,6.08,"But I'd like to give you a glimpse into two 
pretty popular branching strategies, and take both  "
907.36,5.92,"of them as inspiration for your own individual 
branching strategy. Let's start with GitHub flow.  "
915.6,6.56,"GitHub advocates a workflow that's extremely 
lean and simple. It only has a single long  "
922.16,4.88,"running branch, the default main branch, and 
anything you're actively working on is done in  "
927.04,5.92,"a separate branch, a short left branch, no matter 
if that's a feature a bug fix, or a factoring.  "
933.6,8.96,"So this is a very simple, very lean setup. Another 
very popular model is called Git flow. And this  "
942.56,5.84,"offers a bit more structure but also more rules to 
follow. So the main branch is a reflection of the  "
948.4,5.44,"current production state. The other long running 
branch is typically typically called develop  "
954.64,3.52,"in any feature branches start from 
this one, and will be merged back  "
958.16,5.76,"into it. Develop is also the starting point 
for any new releases, you would open a new  "
963.92,5.04,"release branch, do your testing commit 
any bug fixes to that release branch.  "
969.92,4.32,"And once you're confident that it's ready 
for production, you merge it back into  "
974.24,7.6,"main, you would then add a tag for that release, 
commit on Main, and close the release branch.  "
982.64,4.32,"As you can see, good flow defines quite a 
couple of tasks and steps in the process.  "
989.04,5.44,"In tower, the good desktop GUI that we make, 
we support users by offering these tasks as  "
994.48,6.8,"shortcuts in the app. And that way I can show 
you here, so you have all of the most important  "
1001.28,4.72,"actions that Git flow brings to you. So you 
don't have to remember all of the bits and  "
1006.0,5.36,"pieces and what you have to do and what comes 
next, that makeup, these different steps.  "
1016.72,5.44,"So if you ask different teams, how they are using 
branches, you will get many different answers.  "
1022.16,5.12,"There is no perfect branching model that everyone 
should adopt. It's more about understanding your  "
1027.28,5.12,"project, your release workflow and your team, 
and then modeling a branching workflow that  "
1032.4,9.52,"supports you in the best way possible. Let's talk 
about pull requests. First of all, you need to  "
1041.92,5.76,"understand that pull requests are not a core good 
feature. There are provided by your Git hosting  "
1047.68,5.84,"platform, which means they work and look a little 
bit differently on GitHub, git lab, Bitbucket,  "
1053.52,6.56,"Azure DevOps, or whatever you're using. But the 
basic principles and ideas are always the same.  "
1061.28,6.64,"Let's start by talking about why you would 
want to use pull requests at all. In essence,  "
1067.92,6.96,"they are a way to communicate about code and 
review it. The Perfect example is when you've  "
1074.88,5.28,"finished working on a feature, without a pull 
request, you'd simply merge your code into main  "
1080.16,7.6,"master or some other branch. And in some cases, 
this might be totally fine. But especially when  "
1087.76,5.6,"your changes are a bit more complex or a bit 
more important, you might want to have a second  "
1093.36,5.28,"pair of eyes look over your code. And this 
is exactly what pull requests were made for.  "
1099.36,4.88,"With pull requests, you can invite other people 
to review your work and give you feedback.  "
1106.08,5.44,"And after some conversation about the code, 
your reviewer might approve the pull request and  "
1111.52,8.16,"merge it into another branch. Apart from this, 
there's another important use case for pull  "
1119.68,6.32,"requests. It's a way to contribute to code to 
repositories, which you don't have right access  "
1126.0,6.96,"to think of a popular open source repository, you 
might have an idea for improving something, but  "
1132.96,5.2,"you're not one of the main contributors and you're 
not allowed to push commits to their repository.  "
1139.84,6.24,"This is another use case for pull requests. And we 
also have to talk about forks in this connection  "
1146.96,7.44,"of fork is your personal copy of a git repository. 
And going back to our open source example,  "
1155.12,7.2,"you can fork the original repository. 
make changes in your forked version and  "
1162.32,4.88,"open a pull request to include those 
changes into the original repository.  "
1168.24,6.0,"And one of the main contributors can then review 
your changes and decide to include them or not.  "
1177.36,5.76,"I already mentioned it. Every good platform has 
its own design and understanding of how pull  "
1183.12,4.88,"requests should work. And they look a little 
bit different on GitHub, git lab Bitbucket or  "
1188.0,5.6,"Azure DevOps, or whatever you're using. So here 
is an example we'll use the GitHub interface.  "
1194.4,5.92,"For this test case, let's use the Ruby on 
Rails open source repository and Let's see.  "
1201.76,6.48,"Alright, so here we are on GitHub on the Ruby 
on Rails main repository. And in the top right,  "
1208.24,11.6,"I can fork this repository, so I can create 
my own personal version of the repository.  "
1220.96,4.72,"And it's code base. And again, a reminder 
about why we're doing this, I don't have  "
1225.68,5.76,"access to push code into Ruby on Rails, into the 
Ruby on Rails repository. And for good reasons,  "
1232.16,7.12,"of course, because I'm not a Ruby on Rails Pro. 
But in my own fork repository, I can make changes,  "
1239.28,7.12,"I can make whatever changes I want. So I just 
did that I forked the repository. And I can now  "
1247.04,16.4,"simply clone that I'll get the clone URL, and then 
on the command line, git clone and remote URL.  "
1267.6,3.92,"And we will, in a second, when 
this has finished cloning,  "
1271.52,7.2,"we will create a branch and make some changes. So 
this is also important to understand pull requests  "
1278.72,3.76,"are always based on branches, 
not on individual commits.  "
1283.04,6.8,"So we're creating a new branch which we later 
request to be included. And let's ogburn  "
1291.92,18.16,"let's go into rails, and open this in my editor. 
And I'll just create a brief branch git branch  "
1311.44,8.32,"test and git checkout test. Alright, 
so I now am on a new branch and can  "
1319.76,7.04,"make a silly little change, let's change 
something in the readme file. This is a,  "
1328.8,6.48,"an awesome web application framework, close 
this. Alright, let's take a look at our changes.  "
1336.56,5.92,git add README and git commit dash m silly  
1343.52,8.16,"little change. So we now have made some small 
changes on a separate branch, and we can push that  "
1351.68,15.12,"branch to our own remote repository, our fork, 
so git push set upstream origin tests test. And  "
1371.44,7.12,"once this is available, okay, so this has worked. 
So we have now created the changes that we can  "
1378.56,7.2,"request to be included. Once I've pushed 
them to my remote repository on GitHub,  "
1386.32,4.64,"I can take another look at the repository 
in the browser and see what happened.  "
1392.88,7.12,"And voila, GitHub has noticed that I just pushed 
something here. And since it's a fork of forked  "
1400.0,6.16,"repository, GitHub detected my changes, and 
automatically asks me if I want to create a pull  "
1406.16,5.12,"request with those changes. Because in a forked 
environment, this is mostly what you want to do.  "
1412.16,7.36,"And if I do, I can propose which branch they 
should be integrated in. So I'll start the  "
1419.52,7.04,"pull request process here. So at the moment, I'm 
proposing to integrate my changes from my little  "
1426.56,5.92,"branch here in the fork back into the main branch 
in Rails, and let's say that is okay. And I can  "
1432.48,5.84,"add some comment. And I could then create the 
pull request and the maintainer of the original  "
1438.32,5.92,"repository would then be notified, and they can 
review my changes, and possibly integrate them.  "
1448.88,4.16,"Merge conflicts, nobody likes them, 
but they are a fact of life when you're  "
1453.04,5.8,"working with Git. And in most cases, they 
are not as tragic as we often think. Oh,  "
1459.36,5.2,"we'll talk about when they happen, what 
they actually are and how to solve them.  "
1465.92,7.44,"Alright, so the name already says it. Merge. 
Conflicts can occur when you integrate when your  "
1473.36,5.36,"merge changes from a different source. But keep 
in mind that integration is not limited to only  "
1478.72,5.84,"merging branches. Conflicts can also happen when 
rebasing interactive rebasing when performing a  "
1484.56,6.8,"cherry pick or a pull, or even when reapplying 
a stash, and all of these actions performed  "
1491.36,6.08,"some kind of integration and that's when merge, 
conflicts can happen. Of course, these actions  "
1497.44,6.08,"don't result in a merge conflict every time 
Thank God. But when exactly do conflicts occur,  "
1506.48,6.24,"actually gets merging capabilities are one of its 
greatest features and advantages. Merging branches  "
1512.72,6.24,"works effortlessly most of the time, because Git 
is usually able to figure things out on its own.  "
1520.48,6.08,"But there are situations where contradictory 
changes were made. And that's when technology  "
1526.56,4.88,"simply cannot decide what's right or wrong. 
These situations require a decision from a human.  "
1532.72,4.0,"The true classic is when the exact 
same line of code was changed into  "
1536.72,5.52,"commits on two different branches. Git has 
no way of knowing which change you prefer.  "
1543.44,4.0,"There are some other similar situations 
that are a little bit less common,  "
1547.44,4.16,"for example, when a file was modified 
in one branch and deleted in another.  "
1553.36,6.64,"But the same, but the problem is always the 
same changes contradict when you're working  "
1560.0,6.32,"with a desktop GUI, like tower forget, that 
can make things easier, especially because it's  "
1566.32,7.04,"just more visual, I can select things here. And 
this helps me understand what actually happens,  "
1573.36,6.64,"I can see these two changes conflict and I 
can select one or both or just this year and  "
1580.0,7.44,"solve the conflict pretty easily. How do 
you know when a conflict has occurred?  "
1588.64,6.0,"Don't worry about that get will tell you very 
clearly, when a conflict has happened. First,  "
1594.64,4.72,"it will let you know immediately in the 
situation, for example, when a merge or rebase  "
1599.36,6.48,"fails with a conflict. So let's try this 
out. Actually, we have something here, let's  "
1606.56,6.32,"provoke a merge conflict. And I'll just try 
to merge in developer to my main branch.  "
1614.0,7.28,"And voila, automatically I can see something is 
wrong here. Conflict conflict conflict, automatic  "
1621.28,6.48,"merge failed. So you can see that when I tried 
to perform the merge, I ran into conflict and get  "
1627.76,10.0,"tells me instantaneously about the problem. But 
even while even if I had overlooked these warning  "
1637.76,6.08,"messages, I would find out about the conflict 
the next time I run git status. So let's do that.  "
1644.64,8.4,"And pretty quickly, you have this unmerged path 
category in the status here. So in other words,  "
1653.04,5.12,"don't worry about not noticing, merge conflicts 
get makes sure you can't overlook them.  "
1660.56,6.4,"All right, um, though you 
can't ignore a merge conflict,  "
1666.96,3.28,"you really have to deal with it 
before you can continue your work.  "
1671.04,6.08,"Dealing with a merge conflict doesn't necessarily 
mean you have to resolve it, you can also undo  "
1677.12,5.36,"it. And this is sometimes very helpful. So keep 
this in mind always, you can always undo a merge  "
1682.48,5.04,"conflict and return to the state before. And 
this is true even when you've already started  "
1687.52,5.44,"resolving some of the conflicted files and you 
notice Oh god, I'm, I'm on the wrong track here.  "
1694.0,3.84,"Even then, when you find yourself in a 
dead end, you can still undo the merge.  "
1699.04,5.92,"And some commands come with an abort option that 
lets you do exactly that. So the most prominent  "
1704.96,7.12,"examples are Git merge, Uber abort, and Git rebase 
abort. So in our example, here, when I find why  "
1712.08,6.88,"I don't have the time to deal with this right 
now, or I've resolved something the wrong way,  "
1718.96,6.96,"I can always type Git merge dash dash abort here, 
and get status shows me I'm back to normal again.  "
1728.24,5.28,"So this should give you the confidence that you 
really cannot mess up, you can always aboard,  "
1733.52,9.76,"return to clean state and try again start 
over. So let's see what a conflict really  "
1743.28,4.64,"looks like under the hood, we will 
demystify those little buggers. And,  "
1747.92,4.32,"at the same time, help you lose respect for 
them and gain a little bit of confidence.  "
1753.2,7.52,"So as an example, let's look at the contents 
of one of the conflict files. I'll provoke that  "
1763.92,6.32,"merge conflict once again, and I can see that 
in my index HTML file, I have a conflict. So  "
1770.88,8.96,"let's take a look at that. And 
Nope, not this one. But this one.  "
1782.56,6.96,"So get was kind enough to mark the problematic 
areas in the file. So they're surrounded by these  "
1790.16,6.8,"symbols here. This is the start and this is the 
end of the problem area. So the content that  "
1796.96,6.64,"came that comes after the first marker, originally 
originates from our current working branch, then  "
1803.6,7.04,"aligned with some equal lines equal signs, 
separates the two conflicting changes. And  "
1810.64,6.72,"finally, this year came from the other branch 
that's displayed as well. So in this case,  "
1818.4,4.56,"it's pretty simple. In the develop branch 
where I made some changes, I deleted this  "
1822.96,6.64,"list item, these list items, and in my head 
branch, I changed them. So Git is unsure,  "
1829.6,3.6,"did you want to change them? Like Like 
this? Or did you want to delete them?  "
1833.92,3.92,"Like here? And I have to tell git, 
what's correct and what's not.  "
1840.48,6.16,"Okay, so how can you solve a conflict, solving 
the conflict is actually pretty simple, we need  "
1846.64,6.24,"to clean up these lines. And after we finish, the 
file should look exactly as we want it to look.  "
1853.6,5.52,"So it might be necessary to talk to the teammate 
who wrote the other changes and decide which code  "
1859.12,4.88,"is actually correct, maybe it's ours, maybe it's 
theirs, maybe it's a mixture between the two.  "
1864.0,7.04,"And this process of cleaning up the file, making 
sure it contains the what we actually want. This  "
1871.04,5.28,"doesn't have to involve any magic, you can do this 
simply by opening your text editor or ID and make  "
1876.32,5.68,"some changes. Sometimes, though, you'll find that 
this is not the most efficient way, that's when  "
1882.0,6.16,"dedicated tools can save you a little bit time and 
effort. So on the one hand, there are good desktop  "
1888.16,5.92,"gooeys. Some of the graphical user interfaces for 
good can be helpful when solving conflicts, you've  "
1894.08,5.6,"already seen one. So this is tower where you could 
where you can see what happened in the conflict.  "
1900.96,4.88,"And this visualizes the problem. And on the 
other hand, there are dedicated merge tools.  "
1906.4,5.76,"For more complicated conflicts can be great to 
have a dedicated different merge tool at hand,  "
1912.16,5.68,"you can configure a tool of choice using the Git 
config command. And then in case of a conflict,  "
1917.84,9.6,"you can simply type Git merge tool and have it 
open the conflict, I have a kaleidoscope app  "
1927.44,7.84,"installed on my Mac. So let's just try this Git 
merge tool. I configured that. So the first one,  "
1935.28,6.0,"as you can see is a pretty easy one or the 
second one here, error HTML was deleted. So  "
1941.28,4.64,"I don't need to see that I just need to decide, 
do I want to keep it or do I want to delete it.  "
1945.92,6.16,"So I'll stick with the deletion. And for the 
second one, there's really content in the file,  "
1952.08,5.68,"where it makes sense to open that merge tool 
that I configured, I can see, well, this is  "
1957.76,6.4,"the the change that I made. And this is the change 
that came from another person or from a different  "
1964.16,6.56,"branch. And what do I want to look like and what 
I wanted to look like I can choose these changes,  "
1970.72,9.04,"or these year or I can make my own changes here. 
So after cleaning up the file, either manually  "
1979.76,6.24,"or in a desktop, do your GUI or merge tool, we 
have to commit this like any other change. So I  "
1986.0,9.84,"can save it here and say this is resolved. And 
if I type git status, I can see these changes  "
1995.84,6.32,"would be committed, I've made some changes here 
in index HTML, this here is just a safety copy,  "
2002.16,7.44,"you can configure that also to happen. So you 
can always return to the to the original file.  "
2010.8,7.52,"But I would actually just commit this 
here. And simply by committing the resolved  "
2019.04,8.0,"files, I signal to get that conflict is 
completed. And I can go on with my work.  "
2030.96,4.08,"Most developers understand that it's 
important to use branches in git,  "
2035.04,3.84,"because having separate containers 
for your work is incredibly helpful.  "
2039.92,5.52,"Let's talk a bit about integrating branches 
about getting your new code back into an existing  "
2045.44,5.76,"branch. There are different ways to do this, and 
the two most common ones are merge and rebase.  "
2052.0,3.2,"Let's start by talking about 
merge and how it actually works.  "
2057.04,7.12,"When Git performs a merge, it looks for three 
commits. First the common ancestor commit.  "
2064.16,5.36,"If you follow the history of two branches in a 
project, they always have at least one commit in  "
2069.52,6.24,"common. At this point, both branches had the same 
content. And after that they evolve differently.  "
2076.96,3.52,"The other interesting commits are 
the end points of each branch.  "
2081.28,5.28,"Remember that the goal of an integration is 
to combine the current states of two branches.  "
2086.56,6.24,"So the latest revisions are of course 
important. Combining these three commits,  "
2092.8,5.84,"will perform the integration that we're aiming 
for. I've chosen a very simple example case  "
2098.64,4.96,"here because one of the two branches are 
a branch a here, it didn't receive any new  "
2103.6,5.28,"commits after the branching happened. So its 
latest commit is also the common ancestor.  "
2111.76,4.72,"In this case, the integration is dead simple 
good can just add all the new commits from  "
2116.48,4.8,"branch B on top of the common ancestor 
commit. And and get the simplest form  "
2121.28,5.84,"of integration is called a fast forward merge. 
Both branches then share the exact same history.  "
2128.32,4.8,"In most most cases, however, both branches 
move forward differently, of course.  "
2134.8,3.76,"And to make an integration, good, 
we'll have to create a new commit  "
2139.28,5.04,"that contains the differences between them. 
And this is what we call a merge commit.  "
2146.64,5.68,"Normally, a commit is carefully created by a 
human being at some meaningful unit that wraps  "
2152.32,6.72,"only related changes in the commit message 
provides context and notes. Now, a merge  "
2159.04,5.44,"commit is a bit different. It's not created by a 
developer, it gets created automatically by Git.  "
2165.12,4.88,"And it also does not wrap a set of related 
changes. Its purpose is to connect two  "
2170.0,6.0,"branches just like a knot. If you want to 
understand a merge operation after the fact,  "
2176.8,4.48,"you need to take a look at the history of 
both branches and their commit history.  "
2184.08,5.2,"Now let's talk about rebase. But before we 
start, let me emphasize something rebase is  "
2189.28,5.92,"not better or worse than merge. Most importantly, 
it's different. You can live a happy, good life  "
2195.2,5.52,"just using merge. But rebase has its pros and 
cons. So knowing what it does, and when it could  "
2200.72,7.12,"be helpful is nice. Alright, remember that we 
just talked about the automatic merge commit,  "
2207.84,5.2,"some people would prefer to go without these, 
they want the project history to look like a  "
2213.04,5.2,"straight line, without any science that it had 
been split into multiple branches at some point,  "
2218.24,7.36,"even after branches have been integrated. And 
this is what happens with rebase. Let's walk  "
2225.6,6.24,"through a rebase operations step by step. The 
scenario is the same as in the previous example,  "
2231.84,6.48,"we want to integrate changes from branch 
B into branch a. But now by using rebase.  "
2240.0,5.44,"The actual Git command to start this is 
really simple. It's just Git rebase and  "
2245.44,4.48,"the branch. Similar to Git merge, we just 
tell git, which branch we want to integrate.  "
2251.12,7.76,"But let's take a look behind the scenes. 
First, git will remove all commits on branch  "
2258.88,6.0,"a that happened after the common ancestor commit. 
But don't worry, will not throw them away,  "
2264.88,4.96,"you can think of those commits as being 
parked as saved somewhere temporarily.  "
2272.8,7.36,"Then get applies to new commits from branch B. 
And at this point temporarily, both branches  "
2280.16,7.52,"look exactly the same. But in the final step, 
those parked commits need to be included,  "
2287.68,6.0,"the new commits from branch a, they're positioned 
on top of the integrated commits from branch B,  "
2293.68,6.48,"they are rebased, as you can see, and the result 
looks like development had happened in a straight  "
2300.16,5.84,"line, there is no merge commit that contains all 
the combined changes, we preserve the original  "
2306.0,6.48,"commit structure. There's one more thing an 
important thing to understand about rebase  "
2312.48,6.88,"it rewrites commit history. So take a close look 
at this last diagram here. Commit c three has an  "
2319.36,6.48,"asterisk symbol, it has the same contents as C 
three, but it's effectively a different commit.  "
2326.64,7.04,"Because it now has a new parent before the rebase. 
See, one was its parent. And after the rebase,  "
2333.68,6.32,"it's C for which it was rebased onto a 
commit has only a handful of important  "
2340.0,6.32,"properties like the author date change set and 
who its parent commit is. and changing anything  "
2346.32,5.44,"any of this information, if effectively creates a 
completely new commit and with a new commit hash.  "
2353.44,4.32,"So we writing history, like that is not 
a problem for commits that haven't been  "
2357.76,5.76,"published or pushed yet. But if you're rewriting 
commits that have already been pushed to a remote  "
2363.52,5.76,"repository, you might be in trouble. Because 
another developer might have based their work  "
2369.84,7.52,"on the original c three commit, which is not here 
anymore. So let's close this topic with a simple  "
2377.36,7.92,"rule. Do not rewrite commits, that you've already 
pushed to a shared repository. tools like rebase,  "
2385.84,6.0,"you should only use them for cleaning up your 
local commit history. For example, for a feature  "
2391.84,6.08,"branch that you've been working on for some time, 
and before you integrate that back into a team  "
2397.92,6.24,"branch, then you're using re Based on that, that's 
what these tools like in rebase were made for.  "
2406.88,6.48,"Alright, so much for today. Be sure to check out 
my little advanced Git kit. It's completely free  "
2413.36,6.16,"of charge. It's a little collection of short 
videos about a lot of advanced Git topics from  "
2419.52,3.28,"things like interactive rebase, all 
the way to branching strategies,  "
2422.8,4.48,"merge conflicts, sub modules, what 
have you. It's really helpful if you  "
2427.28,3.68,"want to become more productive with 
Git and version control. And again,  "
2430.96,6.88,"it's free. More right? Have fun and see you 
soon. Here on the Free Code Camp YouTube channel."
