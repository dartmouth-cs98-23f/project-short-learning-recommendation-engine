second,duration,transcript
0.62,5.53,hey guys maj here today we're going to
3.3,4.53,talk about insertion sort insertion sort
6.15,3.51,is one of the many sorting algorithms
7.83,2.61,that come up in coding interviews all
9.66,2.49,the time
10.44,3.63,in fact these days more and more
12.15,3.63,companies ask data structure and
14.07,2.94,algorithm questions in their interviews
15.78,3.27,to see if you can think like a
17.01,4.019,programmer in this video I'm going to
19.05,4.44,show you how insertion sort works and
21.029,3.961,how you can implement it in Java if you
23.49,3.69,don't know Java that's perfectly fine
24.99,3.84,you can still follow along and implement
27.18,3.9,the insertion sort algorithm in your
28.83,3.659,favorite programming language also if
31.08,3.389,you want to learn Java I have a
32.489,3.631,comprehensive to our tutorial for you
34.469,3.84,here on my channel the link is below
36.12,2.5,this video so let's jump in and get
38.309,8.06,started
38.62,7.749,[Music]
48.86,4.21,the third sorting algorithm we're going
51.21,3.869,to talk about is the insertion sort
53.07,4.29,algorithm a good way to understand
55.079,2.851,insertion sort is to think of playing a
57.36,2.85,card game
57.93,4.8,so imagine each item in this array
60.21,4.8,represents a card the dealer gives you
62.73,4.35,one item or one card at a time every
65.01,4.77,time you get a card you insert it in the
67.08,5.31,right position first you get 8 you keep
69.78,5.49,it then you get 2 you insert it before 8
72.39,5.339,next you get 4 you insert it between 8 &
75.27,5.459,2 then you get 1 you insert it before
77.729,5.311,all the items finally get 3 and insert
80.729,4.651,it after 2 so every time you get an item
83.04,4.29,you insert it in the correct position
85.38,4.5,that's why we call this algorithm
87.33,5.34,insertion sort now let's see this in
89.88,4.98,action so we get 8 and should find its
92.67,5.43,correct position amongst the items or
94.86,5.399,cards we have taken so far 8 is the only
98.1,5.46,item we have seen so we assume it's in
100.259,5.04,the correct position next we - we should
103.56,4.11,insert it before 8 but how
105.299,4.86,unlike the previous algorithms we're not
107.67,4.17,going to do a swap here instead we're
110.159,4.441,gonna look at all the items we have seen
111.84,4.68,so far if they're greater than 2 we
114.6,4.44,should shift them to the right to open
116.52,4.5,space to insert - this is a key
119.04,3.95,distinction between insertion sort and
121.02,4.68,other algorithms we have talked about
122.99,4.6,instead of swapping items with shift
125.7,4.949,them to the right you'll see why in a
127.59,4.35,second so 8 is greater than 2 and we
130.649,2.831,should shift it to the right to open
131.94,3.909,space for 2
133.48,5.16,to do this first we store two in a
135.849,4.591,separate variable called current next we
138.64,4.53,shift 8 to the right well more
140.44,5.129,accurately we copied to the right so it
143.17,4.649,overrides two that's why you had to
145.569,4.561,store two in a separate variable so we
147.819,4.89,don't lose it now technically we have
150.13,4.74,stored 8 in two places in this array but
152.709,4.471,conceptually we can assume that we shift
154.87,5.369,an 8 to the right so now the item at
157.18,6.059,index 0 is empty so we store the value
160.239,4.89,of the current variable here okay so we
163.239,3.871,inserted 2 in the correct position
165.129,4.771,amongst the items we have seen so far
167.11,5.099,this is the sorted part of the array in
169.9,4.559,every step we pick one item from the
172.209,4.89,unsorted part and insert it at the
174.459,4.411,correct position in the sorted part so
177.099,3.631,next we read for now we look at the
178.87,3.78,items we have seen so far if they're
180.73,5.25,greater than 4 or shift them to the
182.65,5.82,right to open space to insert 4 so here
185.98,3.99,we shift 8 to the right now what about -
188.47,4.799,should we shift it to the right
189.97,5.43,no because 2 is smaller than 4 and it
193.269,4.771,should stay where it is so we have found
195.4,4.23,the right place to insert 4 all the
198.04,4.65,items we have seen so far are in the
199.63,5.16,correct position so next we read 1 again
202.69,4.889,we should shift all the greater items to
204.79,5.91,the right to open space for 1 here we
207.579,5.97,should shift 8 4 and 2 to the right
210.7,4.71,because they're all greater than 1 now
213.549,4.711,we insert 1 in the correct position
215.41,5.43,we're almost done one more time you read
218.26,5.19,3 and shift all the larger items that we
220.84,4.53,have seen to the right now we insert 3
223.45,4.439,at the correct position and we can see
225.37,4.649,our array is fully sorted so this is
227.889,4.831,insertion sort now let's do time
230.019,4.891,complexity analysis here we need to
232.72,3.359,iterate over the input array and read
234.91,3.99,one item at a time
236.079,5.041,that's an OL of an operation in each
238.9,4.32,step of the iteration we need to iterate
241.12,4.83,over the items we have seen so far and
243.22,4.95,shift them if required in the best-case
245.95,3.84,scenario if the array is sorted the
248.17,3.569,current item is already in the correct
249.79,4.62,position so we don't need to shift any
251.739,5.131,items that's an O of one operation in
254.41,4.829,the worst case scenario where the array
256.87,4.2,is sorted in descending order we need to
259.239,3.391,shift all the items we have seen to the
261.07,4.08,right because the current item is
262.63,4.3,smaller than all those items that's an O
265.15,4.12,of n operation
266.93,5.13,so the time complexity of insertion sort
269.27,5.64,is all of n for a best-case scenario and
272.06,6.24,om n squared for the worst-case scenario
274.91,5.039,is the same as bubble sort now spend 20
278.3,5.12,minutes and implement this algorithm on
279.949,5.531,your own then come back see my solution
283.42,2.06,you
287.53,7.06,just like before let's add a new class
290.74,6.22,called insertion sort in this class we
294.59,6.84,need one method public void sort which
296.96,6.63,takes an integer array now here we need
301.43,4.74,to iterate over this array and insert
303.59,5.85,each item in the correct position so we
306.17,5.07,need a for loop we start from index one
309.44,4.08,because as you saw in the previous video
311.24,3.75,let me read the first item we assume
313.52,2.85,it's in the correct position because
314.99,4.47,there are no other items that we can
316.37,5.37,compare this item to okay so we start at
319.46,7.39,the second index as long as I is less
321.74,7.99,than array that length we increment I
326.85,5.73,now here we store the current item in a
329.73,6.18,variable called current so we set this
332.58,5.85,to array of I then we need another loop
335.91,4.23,to look at all the previous items and if
338.43,3.66,they're greater we need to shift them to
340.14,4.41,the right we can use a for loop or a
342.09,4.86,while loop in my opinion a while loop
344.55,6.33,looks better here so let's say our loop
346.95,7.44,variable is J we set it to I minus 1 we
350.88,7.34,start from the previous item now as long
354.39,7.53,as J is greater than or equal to 0 and
358.22,8.56,the item that we have at this index is
361.92,7.89,greater than the current then we need to
366.78,9.39,shift this item to the right so we set
369.81,8.4,array of J plus 1 to array of J so we
376.17,5.03,copy the item at the same Dex to the
378.21,5.85,right side okay and then we decrement J
381.2,4.56,so after this while loop all the greater
384.06,4.47,items have me shifted to the right
385.76,8.85,finally we can store the current item at
388.53,9.27,index J plus 1 so array of J plus 1
394.61,5.41,equals current now let's test our
397.8,5.34,implementation so back in the main class
400.02,5.49,I'm gonna replace selection sort with
403.14,6.3,insertion sort we have an empty array
405.51,8.49,let's see if everything works no problem
409.44,7.82,what if you have a single item so far so
414.0,5.84,good what if you have two items
417.26,5.55,they're sorted beautiful what if you
419.84,5.51,have a few more items with some
422.81,2.54,duplicates
426.55,4.64,our array is sorted in ascending order
428.83,2.36,beautiful
431.699,4.661,hey guys Marcia I wanted to let you know
434.439,4.081,that this video is actually part of my
436.36,4.859,ultimate data structures and algorithms
438.52,4.5,course the complete course is 13 hours
441.219,3.72,long and I've divided it into three
443.02,3.72,parts so you can take and complete each
444.939,3.48,part easily if you're serious about
446.74,3.479,learning data structures and algorithms
448.419,3.9,I highly encourage you to take this
450.219,3.991,course and learn all the essential data
452.319,4.32,structures and algorithms from scratch
454.21,4.5,it's much easier and faster than jumping
456.639,3.541,from one tutorial to another we'll be
458.71,3.929,talking about various types of data
460.18,6.269,structures such as linked lists stacks
462.639,7.14,queues hash tables binary trees AVL
466.449,5.701,trees heaps tries graphs and various
469.779,4.44,types of sorting searching and string
472.15,3.66,manipulation algorithms the course is
474.219,3.031,packed with almost 100 interview
475.81,3.15,questions these are the interview
477.25,4.259,questions that get asked that companies
478.96,4.199,like Google Microsoft and Amazon you can
481.509,4.231,watch the course online or offline
483.159,3.961,anytime anywhere as many times as you
485.74,3.359,want and you would also get a
487.12,3.87,certificate of completion and a 30-day
489.099,3.87,money-back guarantee it's exactly like
490.99,4.109,this tutorial it just has more content
492.969,3.54,if you're interested click on the link
495.099,5.0,below this video to enroll in the course
496.509,3.59,thank you and have a great day
501.04,5.21,[Music]
