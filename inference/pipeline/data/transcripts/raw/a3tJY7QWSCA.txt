second,duration,transcript
8.16,4.88,space and time complexity can define the
10.559,4.321,effectiveness of an algorithm while we
13.04,4.079,know there is more than one way to solve
14.88,4.96,the problem in programming knowing how
17.119,5.041,the algorithm works efficiently can add
19.84,4.4,value to the way we do programming
22.16,4.72,to find the program's effectiveness or
24.24,4.799,algorithm knowing how to evaluate them
26.88,4.159,using time complexity can make the
29.039,3.36,program behave in required optimal
31.039,3.121,conditions
32.399,3.281,doing so makes us an efficient
34.16,3.52,programmer
35.68,3.84,on that note hey everyone i am abou
37.68,4.879,khandelwal and i welcome you all to yet
39.52,4.8,another exciting video from simply learn
42.559,4.16,in this session we will be discussing
44.32,4.88,time complexity analysis
46.719,3.921,however before we begin the session make
49.2,3.359,sure you have subscribed to our youtube
50.64,4.0,channel and click down the bell icon
52.559,3.761,below so you never miss an update from
54.64,3.68,simplyland
56.32,3.44,so now let's look at the agenda for the
58.32,2.96,today's topic
59.76,4.08,we shall begin our session by
61.28,4.8,introducing time complexity
63.84,3.92,then we will discuss the types of time
66.08,4.0,complexity
67.76,5.52,and then we will discuss all the steps
70.08,5.2,to evaluate the time complexity
73.28,5.04,then we will briefly look at the time
75.28,4.96,complexity of various algorithm
78.32,4.08,finally we will sum up what we have
80.24,4.16,learnt from this session
82.4,3.68,so without any further ado let's get
84.4,2.719,started with the first topic of this
86.08,3.92,session
87.119,4.96,introduction to time complexity
90.0,4.56,the time complexity of an algorithm is
92.079,5.68,the amount of time it takes to run as a
94.56,5.04,function of the length of that input
97.759,4.961,the length of the input determines how
99.6,5.36,many operation the algorithm will do
102.72,4.88,it will provide the information about
104.96,4.64,the variance increase or decrease in
107.6,4.479,execution time as the number of
109.6,4.72,operations in an algorithm increases or
112.079,5.601,decreases
114.32,5.28,next up types of time complexity
117.68,3.28,we will start with the constant time
119.6,4.479,complexity
120.96,4.72,then we will discuss linear
124.079,2.881,logarithmic
125.68,3.999,quadratic
126.96,5.12,time complexity
129.679,4.241,now let's have a look at them
132.08,3.04,in the detail
133.92,3.6,first
135.12,4.96,constant time complexity
137.52,5.52,when an algorithm is not reliant on the
140.08,4.48,input size n it is set to have constant
143.04,3.44,time of order
144.56,4.16,big of 1.
146.48,4.96,the runtime will always be the same
148.72,4.96,regardless of the input
151.44,5.519,as you can see in the code every line
153.68,5.52,has the runtime of 1. and they are all
156.959,5.28,independent of any input size so the
159.2,6.48,runtime is always constant
162.239,5.201,next up linear time complexity
165.68,4.32,when an algorithm's running time
167.44,5.2,increases linearly with the length of in
170.0,5.2,the input it is said to have linear time
172.64,4.8,complexity
175.2,4.96,when a function checks all the values in
177.44,6.48,an input data set it is said to have the
180.16,5.76,time complexity of order of big o of n
183.92,3.92,as you can see in the code the loop
185.92,6.319,depends on the size n
187.84,8.16,so the time complexity rose up to n
192.239,6.321,next up logarithmic time complexity
196.0,5.28,when an algorithm lowers the input data
198.56,5.36,in each step then it is said to have the
201.28,5.76,logarithmic time complexity
203.92,4.959,binary trees or binary search functions
207.04,3.8,are some of the algorithms with
208.879,4.321,logarithmic time
210.84,4.28,complexity as you can see in this code
213.2,4.319,by finding out the mid in every
215.12,3.6,iteration the runtime will decrease
217.519,3.201,every step
218.72,3.84,making it approximately logarithmic
220.72,5.68,runtime
222.56,6.16,next up quadratic time complexity
226.4,5.36,when the execution time of algorithm
228.72,5.2,rises non-linearly up to n square with
231.76,4.88,the length of the input it is said to
233.92,5.599,have quadratic time complexity
236.64,5.12,in general net nested loops falls into
239.519,4.881,the quadratic time complexity order
241.76,5.199,where one loop takes big o of n and if
244.4,4.96,the function contains the loop inside
246.959,4.321,the loop then it multiplies
249.36,4.0,as you can see in this code because of
251.28,4.64,the nested loops the time complexity
253.36,4.8,rose to n square
255.92,5.039,now that you have the firm grasp of time
258.16,5.44,complexity and its type we will discuss
260.959,4.561,essential steps to evaluate the time
263.6,4.159,complexity
265.52,5.28,to understand this we will take an
267.759,5.201,example of fibonacci number
270.8,3.44,this code prints the fibonacci numbers
272.96,3.2,till n
274.24,4.64,we will divide this code into three
276.16,5.28,parts isolating all the loops that play
278.88,4.319,a significant role in altering the time
281.44,4.24,complexity
283.199,4.481,let's look at the first part
285.68,4.0,it consists of some independent
287.68,5.68,statement which gave
289.68,4.64,constraint time for each statement
293.36,3.279,next
294.32,4.08,let's move it on to our next part that
296.639,4.56,is for loop
298.4,6.4,since this loop runs n times this will
301.199,5.761,give linear time complexity on n
304.8,4.08,next up the third part
306.96,3.519,which also has the constant time
308.88,5.28,complexity
310.479,6.241,now let's take a total of runtime
314.16,4.56,which comes out to be n plus 5
316.72,4.72,we will then discard the constant part
318.72,5.6,to find the time complexity which does
321.44,4.96,not affect the overall time complexity
324.32,5.84,now we will have the final time
326.4,3.76,complexity of bigger of n
330.32,4.64,we have now discussed time complexity
332.639,4.161,and how to evaluate it
334.96,5.519,now let's have a look at the time
336.8,5.92,complexity of various algorithm
340.479,6.0,we will look at the time complexity of
342.72,5.28,insertion sort merge sort quick sort
346.479,3.601,bubble sort
348.0,5.6,and some searching algorithms like
350.08,6.0,linear search and binary search
353.6,5.2,let's look at them in the detail
356.08,5.04,first up insertion sort
358.8,3.679,as you can see in this code we are using
361.12,4.079,nested loops
362.479,4.72,so in worst case its complexity comes
365.199,3.84,out to be n square
367.199,3.601,now in the best case scenario the
369.039,4.321,complexity will be linear time
370.8,3.6,complexity
373.36,3.2,next up
374.4,4.239,merge sort
376.56,4.56,in this case whether it is the worst
378.639,4.321,case or the best case it will always
381.12,4.4,remain and login
382.96,5.12,as every statement in this code will run
385.52,5.92,the same amount so no matter what its
388.08,6.32,time complexity will remain the same
391.44,5.12,next up quick sort
394.4,4.72,the time complexity of quick sort in the
396.56,3.359,best case is n login
399.12,3.28,and
399.919,5.041,and in the worst case it is
402.4,2.56,answer
405.919,5.361,next up bubble sort
408.639,4.0,as you can see in this code we are using
411.28,3.68,nested loops
412.639,4.321,so in the worst case its complexity
414.96,4.32,comes out to be n square
416.96,4.799,now in the best case scenario the time
419.28,6.319,complexity will become the linear time
421.759,6.081,complexity that is n
425.599,4.961,and after that we will discuss some of
427.84,4.32,the searching algorithms first up
430.56,3.199,linear search
432.16,4.0,in the best case scenario if the
433.759,4.88,statement to be searched is at the first
436.16,4.319,position then the time complexity will
438.639,3.761,come out to be constant
440.479,5.921,whereas in the worst case the time
442.4,4.0,complexity will come out to be n
446.56,5.359,finally binary
448.84,6.28,search in the best case scenario if the
451.919,5.041,element is to be searched is at the mid
455.12,3.6,then the time complexity will come out
456.96,4.799,to be the constant
458.72,5.039,whereas in the first case scenario the
461.759,4.801,time complexity will come out to be big
463.759,2.801,of log n
466.72,4.479,we have now discussed the time
468.24,5.12,complexity and how to evaluate
471.199,3.44,and the time complexity of various
473.36,3.36,algorithm
474.639,3.921,now let's sum up what we have learned
476.72,4.08,from this session
478.56,4.639,first up the execution time increases
480.8,4.399,with the types of operations we make
483.199,5.041,using the inputs
485.199,6.56,next up the lesser the time complexity
488.24,6.16,the faster is the execution
491.759,3.521,finally if a code is of hundreds of
494.4,3.28,lines
495.28,3.44,then it takes a toll on the pc's
497.68,3.6,processor
498.72,6.24,so it is essential to check and reduce
501.28,5.359,the time complexity as much as we can
504.96,3.519,and this was all for today's session
506.639,4.081,hope you guys found it informative and
508.479,4.0,helpful if you liked this session then
510.72,3.439,like share and subscribe
512.479,3.68,if you have any question then you can
514.159,3.841,drop them in the comment section below
516.159,5.68,thanks for watching and stay tuned for
518.0,3.839,more from simply learn
523.519,3.521,hi there if you like this video
525.36,4.32,subscribe to the simply learn youtube
527.04,4.799,channel and click here to watch similar
529.68,5.48,videos to nerd up and get certified
531.839,3.321,click here
