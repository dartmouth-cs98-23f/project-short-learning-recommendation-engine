second,duration,transcript
7.84,6.16,"REST is the most common communication standard 
between computers over Internet. What is it? Why  "
14.0,7.2,"is it so popular? Let's take a look. API stands 
for Application Programming Interface. It is  "
21.2,6.08,"a way for two computers to talk to each other. 
The common API standard used by most mobile and  "
27.28,6.88,"web applications to talk to the servers is called 
REST. It stands for REpresentational State Transfer. "
34.8,6.88,"It is a mouthful. What does that mean? REST is not 
a specification. It is a new set of rules that  "
41.68,6.8,"has been the common standard for building web API 
since the early 2000s. An API that follows the REST  "
48.48,7.92,"standard is called a RESTful API. Some real-life 
examples are Twilio, Stripe and Google Maps.  "
56.96,7.84,"Let's look at the basics of REST. A RESTful API 
organizes resources into a set of unique URIs, or  "
64.8,6.08,"Uniform Resource Identifiers. The URIs 
differentiate different types of resources  "
70.88,9.04,"on a server. Here are some examples. The resources 
should be grouped by noun and not verb. An API to  "
79.92,7.68,"get all products should be slash products and not 
slash getAllProducts. A client interacts with a  "
87.6,7.12,"resource by making a request to the endpoint for 
the resource over HTTP. The request has a very  "
94.72,7.12,"specific format, as shown here. The line contains 
the URI for the resource we'd like to access.  "
101.84,6.72,"The URI is preceded by an HTTP verb which tells 
the server what we want to do with the resource.  "
109.28,5.92,"A POST request means we want to create a 
new resource. A GET means we want to read  "
115.2,7.28,"the data about an existing resource. A PUT is 
for updating an existing resource. A DELETE is  "
122.48,6.48,"for removing an existing resource. You might have 
heard the acronym CRUD. This is what it stands for.  "
130.08,5.76,"In the body of these requests, there could be 
an optional HTTP request body that contains  "
135.84,7.68,"a custom payload of data, usually encoded in 
JSON. The server receives a request, processes it,  "
143.52,7.68,"and formats the result into a response. The first 
line of the response contains the HTTP status code  "
151.2,6.8,"to tell the client what happened to the request. 
A well-implemented RESTful API returns proper  "
158.0,7.76,"HTTP status codes. The 200-level codes mean the 
request was successful. The 400-level codes means  "
165.76,6.56,"something was wrong with our request. For example 
the requests contain incorrect syntax. At the 500- "
172.32,5.36,"level, it means something went wrong at the server 
level. For example, the service was unavailable.  "
179.04,6.4,"A well-behaved client could choose to retry a 
failed request with a 500-level status code. We  "
185.44,7.04,"said ""could choose to retry"" because some actions 
are not idempotent, and those require extra care  "
192.48,6.88,"when retrying. When an API is idempotent, making 
multiple identical requests has the same effect  "
199.36,5.84,"as making a single request. This is usually not the 
case for a POST request to create a new resource.  "
206.24,6.32,"The response body is optional and could contain 
the data payload and is usually formatted in JSON.  "
214.16,3.44,"There's a critical attribute of 
REST that is worth discussing more.  "
218.16,6.24,"A REST implementation should be stateless. It 
means the two parties don't need to store any  "
224.4,5.12,"information about each other, and every request 
and response (cycle) is independent from all others.  "
230.4,6.96,"This leads to web applications that are easy to 
scale and well behaved. There are two final points  "
237.36,7.52,"to discuss to round out a well-behaved RESTful API. 
If an API endpoint returns a huge amount of data,  "
245.44,6.96,"use pagination. A common pagination scheme 
uses ""limit"" and ""offset"" as parameters. Here is  "
252.4,8.08,"an example. If they are not specified, the server 
should assume sensible default values. Lastly,  "
260.48,7.04,"versioning of an API is very important. Versioning 
allows an implementation to provide backward  "
267.52,6.24,"compatibility, so that if we introduce breaking 
changes from one version to another, consumers  "
273.76,7.04,"can get enough time to move to the next version. 
There are many ways to version an API. The most  "
280.8,5.76,"straightforward is to prefix the version before 
the resource on the URI. For instance, like this."
288.8,5.2,"RESTful API is simple and effective when 
applied sensibly. It may not be the best  "
294.0,6.24,"choice for all companies, but it is simple and 
good enough, and that's why it is so widely used.  "
300.8,6.88,"There are other popular API options like GraphQL 
and gRPC. We'll discuss those and compare them in  "
309.6,5.04,"separate videos. If you would like to learn more about system 
design, check out our books and weekly newsletter.  "
314.64,5.68,"Please subscribe if you learned something new. 
Thank you so much, and we'll see you next time."
