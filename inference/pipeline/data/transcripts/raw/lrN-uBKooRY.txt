second,duration,transcript
8.48,4.8,hello and welcome to the seventh
11.44,4.159,exciting chapter of digital design and
13.28,4.16,computer architecture
15.599,3.44,in this chapter the whole course is
17.44,3.759,going to come together
19.039,4.641,so in the first part of the course
21.199,5.84,we began with zero and one and worked
23.68,6.4,our way up to logic design to being able
27.039,4.961,to design things like alus memories and
30.08,4.159,multiplexers
32.0,4.88,then we jumped up to the high level we
34.239,5.761,looked at software and worked our way
36.88,5.6,down to computer architecture the native
40.0,3.92,instructions run by the computer
42.48,3.84,and now we're going to meet in the
43.92,4.799,middle to connect these two threads
46.32,4.16,in topic of micro architecture we're
48.719,4.0,going to look at how to put together
50.48,3.84,hardware blocks to actually build a
52.719,3.201,microprocessor
54.32,3.2,so we'll use all the components we
55.92,3.439,developed in logic
57.52,3.199,and connect them together in a way that
59.359,2.72,we can run the machine language
60.719,2.64,instructions
62.079,4.561,of our risk
63.359,3.281,risk microprocessor
66.88,5.04,so
68.479,5.601,as we look at a processor one of the key
71.92,5.6,issues will be how fast it is
74.08,5.28,so we'll talk about performance analysis
77.52,3.599,then we'll look at three different
79.36,3.68,possible implementations three different
81.119,3.201,micro architectures or a risk five
83.04,3.04,processor
84.32,3.839,the first one is a single cycle
86.08,4.8,processor where all the work takes place
88.159,4.401,in one clock cycle
90.88,3.44,because of this the clock cycle has to
92.56,4.08,be long enough to accommodate the most
94.32,3.92,complicated instruction
96.64,3.439,next we'll look at a multi-cycle
98.24,4.879,processor where we break up the
100.079,5.04,instruction into multiple simpler steps
103.119,3.04,and that will allow each step to run
105.119,4.64,faster
106.159,5.6,and also allow us to reuse some hardware
109.759,3.36,and we'll compare how that performance
111.759,3.441,shapes up against a single cycle
113.119,4.0,processor finally we'll look at the
115.2,4.16,pipeline processor
117.119,4.561,earlier we'd talked about a pipelining
119.36,4.16,example of doing laundry and in the same
121.68,4.399,way we can overlap the execution of
123.52,3.84,various instructions to make them run a
126.079,3.361,lot faster
127.36,4.0,so all modern
129.44,3.28,processors where performance matters are
131.36,2.8,pipelined
132.72,3.519,finally we'll survey some of the
134.16,5.68,advanced micro architecture techniques
136.239,3.601,used in current processors
140.72,4.08,so as we said microarchitecture is the
143.12,3.04,way you implement the architecture and
144.8,2.88,hardware
146.16,3.36,the architecture is the programmer's
147.68,3.44,view of the machine
149.52,3.92,and the micro architecture is the
151.12,4.72,hardware designer's view
153.44,5.04,so we'll take our processor and divide
155.84,5.039,it into a data path and a controller the
158.48,5.28,data path has the functional blocks that
160.879,4.801,work on words of themes
163.76,5.119,words of data
165.68,4.96,and the controller is going to make
168.879,5.281,control signals to tell the data path to
170.64,3.52,do the right things at the right time
175.04,3.04,as i mentioned we'll look at three
176.64,3.36,different implementations three
178.08,3.92,different microarchitectures of the same
180.0,4.0,architecture all of them will do the
182.0,3.36,same thing they'll all be risk 5
184.0,3.599,processors
185.36,4.159,but they'll have different trade-offs
187.599,5.761,among how fast they work
189.519,3.841,and how much hardware they take
194.64,4.48,so to measure speed
196.879,4.241,we look at the program execution time
199.12,4.64,the ultimate measure of how fast the
201.12,5.039,processor is is how long it takes to run
203.76,4.72,a program of interest to us
206.159,4.241,and that execution time is the number of
208.48,3.839,instructions in the program
210.4,3.839,times the average number of clock cycles
212.319,3.761,needed for each instruction
214.239,3.92,times the number of seconds in a clock
216.08,5.04,cycle
218.159,5.041,so let's define cpi to be the cycles per
221.12,3.72,instruction
223.2,4.72,the clock
224.84,4.759,period also known as tc
227.92,2.879,is the number of seconds in a clock
229.599,3.84,cycle
230.799,4.72,and sometimes we'll look at ipc
233.439,5.121,instructions per cycle
235.519,3.041,that's the
238.84,7.24,reciprocal the cycles per instruction
243.12,4.08,and our challenge is to satisfy some
246.08,4.0,constraints
247.2,5.679,of cost power and performance or get the
250.08,6.24,best performance we can under
252.879,6.561,cost or power constraints
256.32,5.439,as we're building this processor to keep
259.44,4.08,things tractable let's consider a subset
261.759,4.16,of the most interesting risk five
263.52,5.04,instructions we'll look at the r-type
265.919,3.761,instructions add subtract and or set
268.56,2.8,lesson
269.68,3.68,we'll look at the memory instructions
271.36,4.559,load word and store word the branch
273.36,4.48,instruction beq and we'll build up a
275.919,3.601,processor that handles these
277.84,4.4,later on we'll look at how to add other
279.52,4.72,instructions such as had eye or jump and
282.24,5.76,link but once you get the fundamental
284.24,3.76,ones the rest are very similar
289.199,4.0,so the next important notion on
291.28,4.72,microarchitecture is the architectural
293.199,5.761,state the architectural state determines
296.0,4.72,everything that you need to know what a
298.96,4.0,processor is doing
300.72,4.24,so if you took a processor
302.96,3.92,and well in science fiction movie
304.96,4.799,imagine taking somebody and freezing
306.88,5.52,their brain and then 100 years later
309.759,5.521,reimplanting it in a body and warming it
312.4,4.72,back up and the person is there again
315.28,3.759,we could do the same thing of freezing
317.12,2.88,the brain of our processor
319.039,3.201,if we
320.0,3.68,record the architectural state then we
322.24,2.64,could even turn off the power to the
323.68,3.28,computer
324.88,4.0,eventually we turn it back on and if we
326.96,4.16,restore the architectural state the
328.88,4.08,processor will keep going just as it was
331.12,3.84,before
332.96,4.239,so in the risc 5 processor the
334.96,4.72,architectural state we need are the
337.199,4.641,contents of the 32 registers
339.68,4.16,the value for program counter
341.84,4.16,and the contents of the memory
343.84,3.919,if we restore those registers and
346.0,3.68,restore what was in memory and then put
347.759,3.681,the program counter back where it was
349.68,3.92,the program will continue running just
351.44,4.72,as it had
353.6,4.56,so any implementation a risk five
356.16,3.84,processor needs to have that
358.16,4.879,architectural state
360.0,6.24,here's the program counter
363.039,6.081,here is the register file
366.24,5.44,with 32 registers
369.12,4.4,and the memory
371.68,4.48,we may break up into an instruction
373.52,4.88,memory and a data memory to separately
376.16,4.159,hold those two parts of the program in
378.4,3.2,the data
380.319,4.561,so
381.6,5.52,in the upcoming sections we will connect
384.88,4.8,this architectural state together with
387.12,5.76,things like arithmetic logic units
389.68,5.12,to do operations on the registers
392.88,2.96,and multiplexers to select the desired
394.8,2.08,result
395.84,3.359,and
396.88,4.64,put that together to build our data path
399.199,4.0,and then we'll make a controller that
401.52,5.399,asserts the control signals to the data
403.199,3.72,path at the right time
