second,duration,transcript
0.469,6.1,hello friends and welcome to this video
3.54,5.19,in which we will learn about some of the
6.569,4.65,techniques using which we can easily
8.73,6.69,calculate time complexity of algorithms
11.219,9.421,without complex calculations so let's
15.42,8.699,get started one thing to be noted is
20.64,6.809,that time complexity is analyzed for
24.119,8.671,very large input size and worst-case
27.449,7.141,scenarios now let's take an example and
32.79,6.69,try to come calculate its time
34.59,12.3,complexity so we have TN which is equal
39.48,9.599,to 2 n square plus 3 n plus 1 the first
46.89,11.219,step is to drop the lower order terms
49.079,15.451,that are 3 and plus 1 in this case next
58.109,10.741,we drop the constant that is 2 so we get
64.53,9.78,the time complexity as Big O of n square
68.85,7.74,for this particular polynomial now let's
74.31,6.059,look at some rules for finding out the
76.59,5.76,time complexity in algorithms first let
80.369,8.131,us look at how do we calculate the time
82.35,10.46,complexity of a single loop so this is
88.5,7.049,our for loop which runs from 1 to N and
92.81,6.01,we have this expression inside the for
95.549,7.86,loop X equal to y plus Z which takes
98.82,7.979,constant time to execute now the time
103.409,6.0,complexity will be n times time taken
106.799,8.371,for this expression which is a constant
109.409,11.941,let's say C so the time complexity will
115.17,8.78,come out to be C times n and in Big O
121.35,6.0,terms we can neglect this constant and
123.95,9.34,simply write the time complexity as Big
127.35,11.219,O of n now let's look at nested
133.29,8.52,oops as you can see we have two loops
138.569,6.12,which are nested let's try to find out
141.81,5.459,the time complexity so this is the
144.689,6.121,expression which takes constant time to
147.269,6.81,execute now we simply multiply the time
150.81,9.95,complexity of each loop so this is the
154.079,9.901,outer loop which will run n times and
160.76,11.8,for each run of the outer loop this
163.98,11.46,inner loop will also run n times so the
172.56,7.56,total running time will be some constant
175.44,9.57,time multiplied by n into n which is
180.12,10.31,equal to n square so we can say that the
185.01,5.42,time complexity is Big O of n square
191.81,6.819,next are the sequential statements let's
195.51,6.089,say that we have an expression which
198.629,7.381,takes constant time to run let me denote
201.599,7.651,it by c1 after that we have this for
206.01,11.25,loop which we have seen before and it
209.25,10.949,will take c2 times n time to run then we
217.26,8.22,have another for loop which takes c3
220.199,7.921,into and time to run so when we have
225.48,4.619,sequential statements like these we
228.12,6.589,simply add the time taken for each
230.099,4.61,statement so let me do that
241.7,8.74,in Big O terms we can ignore these
245.489,12.211,constants c1 c2 and c3 and we have the
250.44,9.06,time complexity as Big O of n next let
257.7,4.23,us look at how do we find out time
259.5,7.68,complexity when we have conditional
261.93,8.19,statements such as if-else we evaluate
267.18,5.1,the situation when values in if-else
270.12,5.67,conditions cause maximum number of
272.28,6.3,statements to be executed so let's say
275.79,6.27,that inside this if condition we have a
278.58,8.52,for loop whose time complexity is Big O
282.06,7.41,of n and inside this else condition we
287.1,7.289,have a nested for loop whose time
289.47,8.009,complexity is Big O of n square so we
294.389,6.03,consider the else condition as it has a
297.479,5.281,greater time complexity and hence the
300.419,8.521,overall time complexity will come out to
302.76,12.48,be Big O of n square now let's look at
308.94,10.05,the comparison of time complexities so
315.24,11.149,we have Big O of 1 which is the smallest
318.99,7.399,and the best then we have Big O of log n
326.57,13.9,then comes Big O of n then it is Big O
333.18,12.39,of n log n then we have exponential time
340.47,12.72,complexities and finally we have Big O
345.57,10.65,of n factorial which is the worst this
353.19,5.58,is a chart of time complexity of various
356.22,5.28,sorting algorithms it is highly
358.77,8.34,recommended to learn them by heart as it
361.5,7.979,comes very handy alright
367.11,4.77,so till now we have only talked about
369.479,4.951,time complexity of a program
371.88,4.77,however there is another factor which
374.43,6.42,affect the execution of a program which
376.65,6.36,is space space complexity of an
380.85,4.71,algorithm quantifies the amount of space
383.01,5.39,or memory taken by an algorithm to run
385.56,5.16,as a function of the length of input
388.4,8.98,let's quickly understand it with an
390.72,10.44,example assuming that an integer takes 4
397.38,7.29,bytes of storage in memory and in this
401.16,8.61,piece of code we have four integers a b
404.67,11.49,c and z so the total space will come out
409.77,10.14,to be 4 into 4 plus 4 this additional 4
416.16,7.35,is for the return statement hence this
419.91,9.39,comes out to be 20 bytes so this is a
423.51,8.58,constant space running algorithm there
429.3,5.3,is usually a trade-off between optimal
432.09,5.46,memory use and runtime performance in
434.6,5.95,general for an algorithm space
437.55,5.94,efficiency and time efficiency reach at
440.55,4.83,opposite ends and each point in between
443.49,5.19,them has a certain time and space
445.38,6.03,efficiency so the more time efficiency
448.68,7.14,you have the less space efficiency you
451.41,8.19,have and vice versa for example merge
455.82,7.29,sort is exceedingly fast but requires a
459.6,5.94,lot of space to do the operations on the
463.11,5.22,other hand the bubble sort algorithm is
465.54,7.77,exceedingly slow but it requires the
468.33,7.02,minimum space so by now you should be
473.31,5.7,easily able to calculate the time or
475.35,8.27,space complexity of a program that's all
479.01,4.61,for this video thank you for watching
