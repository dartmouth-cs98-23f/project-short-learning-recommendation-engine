here's a stack of books from the library
now sort them in alphabetical order
computers have to do stuff like this all
the time it's a seemingly simple
requirement that can be accomplished
with dozens of different sorting
algorithms all of which have trade-offs
with no one optimal approach modern
languages have built-in functions to do
the heavy lifting for you but you won't
always have that luxury on a technical
interview or when doing low-level
systems programming in today's video
we'll not only Implement seven different
sorting algorithms and code but also see
and hear them in action thanks to an
amazing project called the sound of
sorting if you're preparing for a
technical interview these visualizations
and audibilizations will absolutely
change your life
major props to Teemo Bing men were
releasing these videos under Creative
Commons so we can use them in videos
like this I'm going to implement my
algorithms in JavaScript and then
Benchmark them at the end and you can
find the source code on GitHub but first
I want to check out an amazing product
from our sponsor jetbrains MPS to the
average developer building a custom
programming language sounds like an
impossible challenge however with this
open source IDE from jetbrains anyone
can build their own domain-specific
language like meta R which is a highly
specialized language for biomedical
students who would otherwise have to
learn how to program in R jetbrains MPS
is a logical editor as opposed to a text
editor allowing end users to interact
with the code visually this allows
non-programmers to easily integrate
their own domain logic then MPS will
generate the code for the underlying
platform like C JavaScript or any other
language that means anyone in the
organization can harness the power of
code in a safe easy to learn environment
along with all the awesome tooling you
would expect like code completion
debuggers and more to get started simply
download it for free and give it a try
now back to the program the first album
Rhythm will Implement is bubble sort
which in my opinion is the easiest one
to wrap your head around it works by
comparing adjacent elements then swaps
them if they're in the wrong order which
allows smaller elements to Bubble to the
top of the list first we'll set up a for
Loop for the length of the array inside
of which we'll Nest another loop that
Loops over the array minus the current
index in this Loop we can do swapping by
comparing the current index to the one
next to it if the left side is greater
than the right side then they'll need to
trade places if the process continues
until we go through the entire outer
loop and here's what it looks like
oh
bubble sort is intuitive but not very
performant its average time complexity
is O of N squared or quadratic time
which gets slower and slower as the list
grows longer this won't cut it in the
real world another fairly easy option to
implement is insertion sort which builds
up a sorted array one element at a time
but once again we start with a loop but
this time we start at index 1 or the
second value in the array we then set up
variables for the current value and
previous index and while the previous
index is greater than the current value
we move the previous value to the right
then we move to the left until we find a
previous value that is smaller at which
point we can insert the current element
here's what it looks like in action
foreign
once again we have a nested Loop here
which results in quadratic time
complexity but in practice it can still
be pretty fast if the input data is
already mostly sorted another similar
approach is selection sort it works by
finding the smallest element in the
array and exchanges it with the element
at the beginning then repeats this
process until it's fully sorted once
again we Loop over the entire array and
then add a nested Loop inside of it but
this time we're looking for the minimum
value in the subarray in this nested
Loop if the minimum value doesn't equal
the current value then we swap them out
which will effectively put the smallest
element in the proper position then
repeat that process across the entire
array but let's check it out
foreign
[Applause]
also results in quadratic time next up
we have merge sort which is a divide and
conquer algorithm that's been around
since the 1940s the idea is to break the
main array into subarrays sort them and
then merge them back together unlike the
other examples we've looked at this one
is implemented recursively first the
recursive function finds the midpoint of
the array then we have a base case here
that will stop the loop when the array
length is less than two we then break
the array in half at the midpoint using
splice and then we call the same
function on both halves but in order for
that to work we'll also need to
implement a merge function that does the
actual sorting it Loops over both arrays
simultaneously Compares their values and
adds them in order to a new array then
finally it merges everything back
together here's how it looks
oh
it's a bit more complex to implement but
performs much better at quasi-linear
time that's why a variation of merge
sort is the algorithm implemented under
the hood for array sort in JavaScript as
well as many other languages and
applications one drawback though is that
it doesn't sort in place and requires
extra memory if that's a problem a
similar alternative option is quick sort
it's also a divide and conquer algorithm
that uses a pivot element to create
subarrays that are sorted recursively
with quicksort the array isn't
necessarily split in half and works with
any ratio to sort the array in place
we'll first create a function called
Partition its job is to divide the array
into two parts to separate the elements
smaller than the pivot from the values
greater than the pivot in this case the
pivot value is set to the element at the
right index of the array from there we
Loop over the portion of the array
between the left and right values if a
value is less than the pivot value then
we swap it with the element at the
partition index from there we can create
a recursive function called quick sort
to divide and conquer both the left and
right side of the array this is the more
proper way to implement quicksort but we
can illustrate the concept A little
better by cheating in this more
simplified function notice how I'm first
determining a pivot point on the array
then we divide and conquer by filtering
out items that are less than the pivot
on the left side and items that are more
than the pivot on the right side now
call that recursively to sort the entire
array that works but it won't perform as
well as the previous implementation in
any case let's go ahead and watch it on
TV
thank you
[Music]
next up we have Radix sort which was
created all the way back in the 1800s
for tabulating machines it's still used
today on values like integers or binary
strings because it takes a unique
approach where it groups items that
share the same significant position or
place value the implementation is a bit
more complex but basically it works like
this it splits the elements of the array
into 10 buckets one for each digit 0
through 9. it then Loops over those
buckets and has a nested Loop for the
array itself get digit will then find
the number at that place going from 0 to
9 which provides a bunch of sorted
buckets that are combined back into the
original array what's interesting here
is that there's no direct comparison
going on we're only looking at the
underlying digits this implementation is
called LSD or least significant digit
but it's also possible to work in the
other direction with most significant
digit that's pretty cool let's check it
out
oh
[Music]
and finally I saved the worst for last
BOGO sword also known as stupid sword
this would be like if you had a deck of
cards and kept shuffling them over and
over again and just hope that one time
they're in perfect order it's totally
random to implement it I have a helper
function called Shuffle that takes the
array and randomizes all the elements
with the math random function then I
have another helper function that Loops
over the array to determine if it's
sorted or not then we simply put those
two together in a while loop until we
get a sorted array not surprisingly it
looks pretty wonky
to finish things up I made a quick
Benchmark just to test these
implementations and here's how
everything played out bubble sword and
cocktail shaker sort were near the
bottom well Heap shell and quicksort
were near the top but it really depends
on what you're sorting this graphic from
Top towel illustrates how different
types of input data change the
performance characteristics of these
algorithms a10x engineer needs to
understand the trade-offs and implement
the optimal algorithm luckily for most
of us we can get by with a race sword so
basically everything you learn in this
video is completely useless on a
practical level thanks for watching and
I will see you in the next one
