second,duration,transcript
1.31,4.65,"The goal of encryption is to garble data is
such a way so that no one who has the data"
5.96,1.919,"can read it unless they’re the intended
recipient."
7.879,4.051,"And the encryption of pretty much all private
information sent over the internet relies"
11.93,5.03,"immensely on one numerical phenomenon - as
far as we can tell, it’s really really hard"
16.96,5.5,"to take a really big number and find its factors
using a normal, non-quantum computer."
22.46,3.79,"Unlike multiplication, which is very fast
(just multiply the digits together and add"
26.25,4.189,"them up ), finding the prime numbers that
multiply together to give you an arbitrary,"
30.439,4.731,"big, non-prime number appears to be slow - at
least, the best approach we currently have"
35.17,4.35,"that runs on a normal computer - even a very
powerful one - is very slow."
39.52,5.14,"Like, to find the factors of this number , it
took 2000 years of computer processor time!"
44.66,4.31,"Now, it’s not yet proven that we won’t
eventually find a fast way to break encryption"
48.97,4.6,"just with normal computers, but it’s certain
that anybody with a large working quantum"
53.57,5.18,"computer today would pose an immediate privacy
and security threat to the whole internet."
58.75,2.91,"And that’s due to something called “Shor’s
Algorithm.”"
61.66,3.93,"Well actually it’s due to quantum superposition
and interference; they’re just taken advantage"
65.59,5.55,"of by an algorithm developed by Peter Shor,
which I’m now going to attempt to explain."
71.14,5.259,"The kind of encryption we’re talking about
garbles or “locks” messages using a large"
76.399,4.64,"number in such a way that decrypting or “unlocking”
the data requires knowing the factors of that"
81.039,4.61,"number . If somebody doesn’t have the factors,
either they can’t decrypt the data, or they"
85.649,4.18,"have to spend a really really long time or
a huge amount of investment in computing resources"
89.829,1.6,finding the factors.
91.429,4.0,"Our current best methods essentially just
guess a number that might be a factor, and"
95.429,3.491,"check if it is . And if it isn’t, you try
again."
98.92,1.1,And again.
100.02,1.0,And again.
101.02,1.389,It’s slow.
102.409,4.681,"There are so many numbers to check that even
the fast clever ways to make really good guesses"
107.09,1.059,are slow.
108.149,5.301,"For example, my computer took almost 9 minutes
to find the prime factors of this number."
113.45,4.599,"So if you used this number to encrypt your
data, it would only be safe from me for 9"
118.049,1.0,minutes.
119.049,3.691,"If, on the other hand, you used a number like
the one that took 2000 years of computer processor"
122.74,4.19,"time to factor , your data would definitely
be safe from me and my laptop, but not from"
126.93,4.079,"somebody with access to a server farm .
This is similar to how putting a lock on your"
131.009,4.37,"door and bars on your windows doesn’t guarantee
you won’t have stuff stolen from your house,"
135.379,2.861,but does make it take more time and more work.
138.24,4.52,"Encrypting data isn’t a guarantee of protection
- it’s a way of making it harder to access;"
142.76,3.119,"hopefully enough harder that no one thinks
it’s worth trying."
145.879,5.081,"But quantum computation has the potential
to make it super super easy to access encrypted"
150.96,4.33,"data - like having a lightsaber you can use
to cut through any lock or barrier, no matter"
155.29,1.24,how strong.
156.53,3.19,Shor’s algorithm is that lightsaber.
159.72,3.5,"Roughly speaking, to factor a given number
Shor’s algorithm starts with a random crappy"
163.22,4.17,"guess that might share a factor with your
target number, (but which probably doesn’t),"
167.39,3.8,"and then the algorithm transforms it into
a much better guess that probably DOES share"
171.19,1.0,a factor!
172.19,3.92,"There’s nothing intrinsically quantum mechanical
about this - you can, in fact, run a version"
176.11,4.66,"of Shor’s algorithm on a regular computer
to factor big numbers, but perhaps unsurprisingly"
180.77,4.07,"the “turning your bad guess into a better
guess” part of the process takes a very"
184.84,2.41,very long time on a normal computer.
187.25,4.799,"On the other hand, this key step happens to
be ridiculously fast on quantum computers."
192.049,4.991,"So, our task is to explain how Shor’s algorithm
turns a crappy guess into a better guess (which"
197.04,4.74,"is purely mathematics), and why quantum computers
make that fast (which is where the physics"
201.78,1.0,comes in).
202.78,4.11,"It all starts with a big number, N, that you’ll
need to find the factors of to break into"
206.89,1.319,some encrypted data.
208.209,3.98,"If you don’t know what the factors are (which
you don’t), you can make a guess; just pick"
212.189,4.25,"some number g that’s less than N . We actually
don’t need the guess to be a pure factor"
216.439,3.97,"of N - it could also be a number that shares
some factors with N, like how 4 isn’t a"
220.409,2.3,"factor of 6, but shares a factor with it."
222.709,3.221,"Numbers that share factors are ok because
there’s a two-thousand-year-old method to"
225.93,4.199,"check for and find common factors - it’s
called Euclid’s algorithm and it’s pretty"
230.129,1.001,darn efficient.
231.13,4.919,"All this is to say that to find a factor of
N, we don't have to guess a factor of N - guessing"
236.049,4.19,"numbers that share factors with N works, too,
thanks to Euclid."
240.239,4.161,"And if Euclid’s algorithm found any shared
factors with N, then we’d be done!"
244.4,4.41,"You could just divide N by that factor to
get the other factor and break the encryption."
248.81,4.629,"But for the big numbers used in encryption,
it’s astronomically unlikely that any single"
253.439,2.091,guess will actually share a factor with N.
255.53,4.84,"Instead, we’ll use a trick to help transform
your crappy guess into a pair of guesses that"
260.37,4.93,"are way more likely to share factors with
N. The trick is based on a simple mathematical"
265.3,4.69,"fact: for any pair of whole numbers that don’t
share a factor, if you multiply one of them"
269.99,4.061,"by itself enough times, you’ll eventually
arrive at some whole number multiple of the"
274.051,5.759,"other number, plus 1 . That is, if a and b
are integers that don’t share factors, then"
279.81,7.37,"eventually a^p will be equal to m times b
+ 1, for some power p and some multiple m"
287.18,4.049,". We don't have the time to get into why this
is true, but hopefully a few illustrations"
291.229,1.801,can at least give you a feeling for it.
293.03,2.11,"For example, 7 and 15."
295.14,4.499,"While seven squared isn’t one more than
a multiple of 15, and neither is seven cubed,"
299.639,1.851,seven to the fourth is.
301.49,5.73,"Or take 42 and 13 - 42 squared isn’t one
more than a multiple of 13 , but 42 cubed"
307.22,1.0,is.
308.22,3.02,"This same kind of thing works for any pair
of numbers that don't share factors, though"
311.24,1.0,the power p might be ridiculously large.
312.24,4.54,"So, for the big number, N, and your crappy
guess, g, we’re guaranteed that some power"
316.78,5.78,"of g is equal to some multiple of N, plus
1 . And here’s the clever part - if we rearrange"
322.56,9.39,"this equation by subtracting the 1 from both
sides, we can rewrite g^p-1 as (g^p/2 + 1)(g^p/2"
331.95,4.38,"- 1) . You can multiply that back together
to convince yourself that it works."
336.33,3.93,"And now we have an equation that almost looks
like “something” times “something”"
340.26,4.71,"is equal to N, which is exactly what we’re
trying to find - factors of N!"
344.97,5.379,"These two terms are precisely the new and
improved guesses that Shor’s algorithm prescribes:"
350.349,5.731,"take the initial crappy guess, multiply it
by itself p/2 times, and either add or subtract"
356.08,1.0,one!
357.08,3.44,"Of course, since we’re dealing with a multiple
of N rather than N itself, the terms on the"
360.52,4.609,"left hand side might be multiples of factors
of N, rather than the factors themselves."
365.129,9.561,"Like how 7^4/2+1 = 50, and 7^4/2-1 = 48, neither
of which is a factor of 15."
374.69,4.949,"But we can find shared factors by using Euclid’s
algorithm again, and once we do, we’ll have"
379.639,1.601,broken the encryption!
381.24,2.12,So is this all Shor’s algorithm is?
383.36,1.0,Where’s the quantum mechanics?
384.36,2.25,"Why can’t we use this to break encryption
right now?"
386.61,5.559,"Well, indeed, there are three problems with
these new and improved guesses."
392.169,3.991,"First, one of the new guesses might itself
be a multiple of N, in which case the other"
396.16,4.129,"would be a factor of m and neither would be
useful to us in any way."
400.289,5.061,"And second, the power “p” might be an
odd number , in which case p/2 isn’t a whole"
405.35,4.319,"number and so our guess taken to the power
of p/2 probably isn’t a whole number either,"
409.669,1.741,which is no good.
411.41,5.2,"However, for a random starting guess, it turns
out that at least 3/8ths of the time neither"
416.61,6.309,"of these problems happens and p does generate
guesses that share factors with N and break"
422.919,1.351,the encryption!
424.27,5.149,"This is worth repeating - for ANY initial
guess that we make, at least 37.5% of the"
429.419,6.81,"time g^p/2 ±1 will lead to a factor of N,
decrypting the garbled message."
436.229,4.781,"Which means we’re 99% likely to break the
encryption with fewer than 10 guesses."
441.01,2.74,"However, problem number three is the big one."
443.75,4.401,"Remember, to turn a crappy guess into a good
guess we need to know how many times you have"
448.151,4.229,"to multiply our guess by itself before we
get a multiple of N, plus 1."
452.38,4.939,"And for a normal computer, the act of finding
that power p takes a ton of work and time."
457.319,4.461,"It’s not hard for small numbers like 42
and 13, but if our big number is a thousand"
461.78,5.109,"digits long, and our crappy guess is 500 digits
long, then trying to figure out how many times"
466.889,3.65,"you have to multiply our guess by itself before
you get some multiple of the big number, plus"
470.539,4.291,"one, takes a ridiculous amount of trial and
error on a normal computer - more effort than"
474.83,3.709,"it would have taken to just factor N by brute
force in the first place!"
478.539,5.941,"So finally, this is where quantum mechanics
comes in and speeds things up an INSANE amount."
484.48,4.69,"Unlike a normal computation which gives only
one answer for a given input, a quantum computation"
489.17,4.809,"can simultaneously calculate a bunch of possible
answers for a single input by using a quantum"
493.979,4.66,"superposition - but you only get one of the
answers out at the end, randomly, with different"
498.639,1.59,probabilities for each one.
500.229,5.34,"The key behind fast quantum computations is
to set up a quantum superposition that calculates"
505.569,4.41,"all possible answers at once while being cleverly
arranged so that all of the wrong answers"
509.979,1.881,destructively interfere with each other.
511.86,3.58,"That way when you actually measure the output
of the calculation, the result of your measurement"
515.44,2.08,is most likely the right answer.
517.52,3.42,"In general it can be really hard to figure
out how to put any particular problem into"
520.94,4.03,"a quantum form where all the wrong answers
destructively interfere, but that’s what"
524.97,3.88,"Shor’s algorithm does for the problem of
factoring large numbers - well, actually,"
528.85,2.12,"it does it for the problem of finding the
power “p”."
530.97,4.67,"Remember, at this point we've made a crappy
guess g, and we're trying to find the power"
535.64,7.4,"p so that g to the p is one more than a multiple
of N. A p that does that also means that g^p/2"
543.04,4.84,±1 is very likely to share factors with N.
547.88,3.699,"So to begin the quantum computation, we need
to set up a quantum mechanical computer that"
551.579,3.911,"takes a number x as input, and raises our
guess to the power of x."
555.49,4.49,"For reasons we'll see later, we need to keep
track of both the number x, and our guess"
559.98,1.0,to that power.
560.98,3.76,"The computer then needs to take that result
and calculate how much bigger than a multiple"
564.74,1.0,of N it is.
565.74,3.55,"We'll call that the ""remainder"", and we'll
write it as plus “something"" for whatever"
569.29,4.0,"something the remainder is (remember, we want
a remainder of 1)."
573.29,2.32,"So far, no different from a normal computer."
575.61,3.599,"But since it’s a quantum computer, we can
send in a superposition of numbers and the"
579.209,4.201,"computation will be done simultaneously on
all of them, first resulting in a superposition"
583.41,3.7,"for each p of all possible powers our guess
could be raised to , and then a superposition"
587.11,3.5,"for each p of how much bigger each of those
powers are than a multiple of N."
590.61,3.63,"We can’t just measure this superposition
to get the answer - if we did, we’d get"
594.24,4.5,"a single random element of the superposition
as output, like “our guess squared is 5"
598.74,3.969,"more than a multiple of N” . Which is no
better than just randomly guessing powers,"
602.709,1.631,which we can do with a normal computer.
604.34,5.17,"No, we need to do something clever to get
all the non-p answers to destructively interfere"
609.51,4.44,"and cancel out, leaving us with only one possible
answer: p."
613.95,3.97,"Which it turns out we can do, based on another
mathematical observation."
617.92,4.09,"This mathematical observation isn’t particularly
complicated, but it is a tad subtle and it"
622.01,2.55,may not be immediately clear why we care.
624.56,4.76,"However, it’s the key idea that allows us
to turn the problem of finding p into one"
629.32,3.62,"that works well on a quantum computer, and
so in some ways it’s the crux of Shor’s"
632.94,2.73,"algorithm - which is to say, it’s worth
the effort!"
635.67,4.53,"Ok, so remember that IF we knew what p was,
we could raise our guess to that power and"
640.2,3.85,"get one more than a multiple of N. On the
other hand, if we take our guess to a random"
644.05,4.44,"power , it’s probably going to be some other
number more than a multiple of N - say, 3"
648.49,4.909,"more . But check this out - if we raise our
guess to that random power plus p, it’s"
653.399,3.861,"again 3 more than a multiple of N . If we
raise our guess to that random power plus"
657.26,4.51,"2 p, it’s again 3 more than a multiple of
N. And so on."
661.77,3.379,"It’s pretty straightforward to show why
this works by multiplying out “something"
665.149,4.81,"times N plus 1” with “something else times
N plus 3”; you get “a different something"
669.959,5.761,"times N, again plus 3” . And this works
for any power x - if g^x is r more than a"
675.72,5.82,"multiple of N, then g^(x+p) will also be r
more than a multiple of N (though a different"
681.54,1.0,multiple).
682.54,3.5,"So the power p that we’re looking for - the
one that allows us to improve our crappy guess"
686.04,4.03,"and find factors of N and break encryption
- it has a repeating property where if we"
690.07,4.38,"take another power and add (or subtract) p
to it, the amount more than a multiple of"
694.45,1.65,N stays the same.
696.1,3.239,"This repeating property isn’t something
you could figure out from taking our guess"
699.339,4.461,"to just one power - it’s a structural relationship
between different powers, and we can take"
703.8,4.05,"advantage of it since quantum computations
can be performed on superpositions of different"
707.85,1.109,possible powers.
708.959,4.391,"Specifically, if we take the superposition
of all possible powers and JUST measure the"
713.35,4.31,"“amount more than a multiple of N“ part,
then we’ll randomly get one of the possible"
717.66,3.6,"“amounts more than a multiple of N” as
the output - say, 3."
721.26,3.269,"The specific number doesn’t matter to us,
but what does matter is that this means we"
724.529,4.49,"must be left with a superposition of purely
the powers that could have resulted in a remainder"
729.019,1.0,of 3.
730.019,4.141,"This is one of the special properties of quantum
computation - if you put in a superposition"
734.16,3.549,"and get an answer that could have come from
more than one element of the superposition,"
737.709,3.111,"then you'll be left with a superposition of
just those elements!"
740.82,4.4,"And in our case, because of the repeating
property, those powers are all numbers that"
745.22,1.51,are “p” apart from each other.
746.73,4.26,"To recap, we’re trying to find p because
it will allow us to turn our crappy guess"
750.99,3.77,"into a good guess for a number that shares
factors with N, which will allow us to break"
754.76,1.0,the encryption.
755.76,4.139,"And we now have a quantum superposition of
numbers that repeat periodically with a period"
759.899,5.801,"of p, or equivalently, they repeat with a
frequency of 1/p . If we can find the frequency,"
765.7,2.08,we can find p and break the encryption!
767.78,5.13,"And the best tool to find the frequencies
of things is called a Fourier transform."
772.91,4.28,"Fourier transforms are what allow you to input
an audio signal as a wave and convert it into"
777.19,3.339,"a graph showing the different frequencies
that the wave is made up of."
780.529,4.17,"And there’s a quantum version of the Fourier
transform, which we can apply to our superposition"
784.699,4.741,"that repeats with a frequency of 1/p to cause
all the different possible wrong frequencies"
789.44,9.93,"to destructively interfere, leaving us with
a single quantum state: the number 1/p."
799.37,2.74,"So how does the quantum Fourier transform
perform this magic?"
802.11,3.52,"Well, if you input a single number into the
quantum Fourier transform, it will give you"
805.63,4.01,"a superposition of all other numbers - but
not any old superposition."
809.64,3.48,"A superposition where the other numbers are
all weighted by different amounts, and those"
813.12,3.46,"weights look roughly like a sine wave with
the frequency of the single number we put"
816.58,1.0,in.
817.58,3.64,"If you put in a higher number, you get a sine
wave-style superposition of all other numbers,"
821.22,1.87,but with a higher frequency.
823.09,4.47,"And the magic is that when you put IN a superposition
of numbers, you get out a superposition of"
827.56,4.62,"superpositions and the sine waves add together
- or subtract and cancel out."
832.18,3.61,"And it happens that if you put in a superposition
of numbers that are all separated by an amount"
835.79,3.82,"p, all those sine waves interfere so that
what you get out (and I’m oversimplifying"
839.61,4.02,"a touch), is the single quantum state representing
1/p."
843.63,5.569,"Which we can finally measure to get the output
of the computation: 1/p!"
849.199,4.841,"Which we invert to find p, and as long as
p is even we can now finally raise our guess"
854.04,3.799,"to the power p over two and add or subtract
one, and as long as we don’t get an exact"
857.839,4.871,"multiple of N, we are guaranteed to have a
number that shares factors with N. And therefore"
862.71,4.59,"we can use Euclid’s algorithm to quickly
find those factors, and thus we can finally"
867.3,3.039,take the encrypted data and decrypt it.
870.339,1.0,And thus we will have broken the encryption.
871.339,3.521,"And that is Shor’s algorithm - the lightsaber
that can be used to cut through locks on the"
874.86,1.0,internet.
875.86,4.14,"As complicated as this clearly is in practice...
(and we've glossed over a ton of details),"
880.0,4.82,"it’s surprising to me how simple the core
structure of Shor's algorithm actually is:"
884.82,4.93,"for any crappy guess at a number that shares
factors with N, that guess to the power p/2"
889.75,4.25,"plus or minus one is a much much better guess,
if we can find p."
894.0,5.79,"And we CAN find p almost immediately with
a single (if complex) quantum computation."
899.79,4.47,"A normal computer would have to go one by
one through all possible powers, which would"
904.26,4.29,"take an incredible amount of time for any
really really big number like the ones used"
908.55,5.469,"in encryption, since p could be almost any
number up to N. The quantum version is ridiculously"
914.019,5.32,"ridiculously faster, and if a big enough quantum
computer is ever built, then Shor’s algorithm"
919.339,4.421,"would allow the user to very easily decrypt
any data encrypted with a large-number factoring"
923.76,3.77,"based system - which would pretty much ruin
the entire internet."
927.53,4.72,"At this point, however, the biggest actual
quantum implementations of Shor’s algorithm"
932.25,3.649,"don’t have enough memory to hold more than
a few bits, which only allows factoring of"
935.899,6.321,"numbers like 15, 21, and 35 . Now, there are
other methods of factoring using quantum computations"
942.22,3.97,"that are a bit more advanced, and have factored
numbers as big as a few hundred thousand using"
946.19,4.91,"just a few quantum bits of memory . But they
would still need 2000 times more quantum memory"
951.1,4.51,"to factor even some of the smaller of the
really big numbers used in modern encryption"
955.61,6.14,". So, no need to worry about quantum computers
just yet."
961.75,4.27,"If all this talk of breaking encryption makes
you a bit nervous and worried about your online"
966.02,3.689,"safety, well, there’s something you can
do to improve your internet security right"
969.709,4.06,"now - I’ve been a long time user of the
password manager Dashlane who are sponsoring"
973.769,4.43,"this video, and if you’ve never used a password
manager before, Dashlane is amazing."
978.199,4.01,"It generates and remembers a long, unique
password for each site or service that I use"
982.209,2.721,"so that I don’t have to worry about remembering
passwords; and of course all of my data and"
984.93,3.43,"passwords are stored encrypted with very very
large numbers."
988.36,3.169,"And Dashlane is more than just a password
manager - it lets you know when your passwords"
991.529,3.411,"are old or weak or when a site or app you
use has been hacked so you can change your"
994.94,4.269,"passwords, it encrypts and lets you securely
share passwords with family and coworkers,"
999.209,3.391,"it can be used to securely store or share
your address, credit card info, and banking"
1002.6,3.489,"info, with just the people and sites you want
to, it can be used as a VPN, and more."
1006.089,6.11,"Oh, and Dashlane uses 2048 bit numbers for
its encryption - numbers that big are estimated"
1012.199,4.32,"to take a trillion times more effort to factor
than any that have so far been factored by"
1016.519,1.0,brute force.
1017.519,3.981,"And of course Dashlane is free for up to 50
passwords for as long as you like, so you"
1021.5,1.53,have nothing to lose checking it out.
1023.03,4.04,"But, if you want the very useful features
of unlimited passwords, encrypted syncing"
1027.07,5.1,"of passwords, VPN, remote account access,
and more, the first 200 people get 10% off"
1032.17,4.92,"Dashlane premium by going to dashlane.com/minutephysics
and using promo code minutephysics."
1037.09,4.13,"Again, that’s dashlane.com/minutephysics
with promo code minutephysics to simplify"
1041.22,1.88,and encrypt your online life.
1043.1,3.92,"Dashlane has legitimately improved my online
security and changed my password habits for"
1047.02,1.03,the better.
1048.05,1.09,What could it do for you?
