- Hey, if you scroll down slightly further
there is a picture of me(laughs)
- [Man] Use that as the
beginning of this episode please.
(upbeat music)
Welcome back to coding with Qiskit.
I'm your host, Jin.
If you're new to the series,
we cover topics in quantum
algorithms each week.
So be sure to like and subscribe.
Today we are gonna be learning
how to install a Qiskit
and use a very specific Circuit Library
in order to build our
first quantum algorithm.
In order to access this library
we're gonna have to install
a Qiskit locally first.
So let's go through really
quickly how to do this.
So Qiskit is an open source SDK,
use for programming quantum
computers using Python.
And don't worry if your Python
skills aren't there yet.
We'll work through things slowly.
So the first thing I'm gonna do
is navigate to Qiskit.org
this will tell me exactly
how to install Qiskit on my machine.
And there is generally two
options for running Qiskit,
you can either run it on
IBM's hosted jupyter notebooks
or you can install it locally.
And the first thing I wanna do
is if I don't have Python installed yet
is to just install Anaconda
and this will install
all the things I need
for Python, click download
I have a Mac,
so I'll just do the 64 bit
graphical installer and download.
And like always, if you have a windows
or Linux just choose the
appropriate downloader.
Okay, so now that Anaconda has downloaded
I'll just open this up.
(soft music)
And I'll install.
(soft music)
So what I'm gonna do first
is set up my Python environment
which just is a good way
for me to organize my Python packages
so that I have all the correct versions
of all the packages in one place.
So what I'll do is Conda create dash
and name of my environment
which will be coding with Qiskit or cwq.
I'll set my Python version equal to three
and the Anaconda distribution.
Okay, and I'm just gonna
watch this little thing spin.
Okay, now it's done.
Okay, so I'm gonna proceed,
yes.
And that thing is gonna spin some more
this might take a minute.
So now that I have my environment set up
I'm gonna enter my environment
by going to Conda activate
the name of my environment
which is coding with Qiskit
and I'm going to now install
Qiskit into my environment.
So from the Qiskit.org site
just following these
instructions start locally
I'm gonna choose the
Qiskit stable installation.
I have Mac so I will choose Mac
but it's the same if you
have Linux or windows
just choose the correct distribution
and then I'll copy this
and PIP install Qiskit
into my environment.
So now I have Qiskit installed
and I'm just gonna open
up a jupyter notebook
so we can get started with our algorithm.
Perfect.
So I'm gonna open up a
new Python 3 Notebook
and let's get started with our algorithm.
So let's build our first algorithm
from the circuits library now
in order to do this we need a few parts
some data to input, a circuit
to run the calculation
and then an output.
In physics we often talk about signals
and signals represent the
transmission of information.
And generally we use basis
or units such as frequency or time
to represent what kind of information
that we're transmitting.
I'm gonna show you a quick
example of an algorithm
that's already built in
Qiskit Circuit Library
called the Fourier Checking Circuit.
A Fourier Checking circuit
is an important tool used
from the signal processing domain.
And as a fundamental circuit used
in many other quantum algorithms,
for example, Shor's algorithm
which we'll cover in a future episode
these circuits can be run
on a real quantum back-end
or on one of the high
performance simulators
that are available through Qiskit.
All right, so let's get
started with the algorithm.
So the first thing I'm
gonna do is do my imports.
I'm going to import
qiskit.quantum_info as qi
and this is going to be
doing the calculation.
I'm going to import
from the Circuit Library
the Fourier Checking Circuit
and I'm going to import my visualizer,
qiskit.visualization
import plot histogram.
Okay.
Shift+ Enter to execute that.
So for this, algorithm, I'm
gonna define two functions.
They're just lists,
f is equal to one minus
one minus one minus one
and g is equal to one,
one minus one minus one.
So now that we have our
two functions f and g
the Fourier Checking Circuit will tell us
how correlated the Fourier transform of g
is to our function f.
And it turns out that a
quantum computer can perform
this calculation much faster
than a classical computer can.
So the circuit will output a probability
for the zero zero state.
And if the probability
is greater than 0.05
then the Fourier transform our function g
is correlated with our function f.
Okay.
So I'm gonna set up my circuit equals
Fourier checking and I'll
put in my two functions
f is equal to f
and g is equal to g,
circ.draw
See what this looks like.
Okay.
This is what my quantum circuit
will actually look like.
So let's run this,
zero equals
qi.state vector
from label zero zero
is going to evolve this,
state vector is equal to zero.evolve.circ
and I'm gonna get my
probabilities back here.
probs equals sv.probabilities
Okay and then I'm gonna plot
what this looks like.
And remember I'm only interested
in the zero zero probability.
Okay, perfect.
So I get back a histogram
here am only interested
in the zero zero probabilities
which I get 0.25
so what this means is
the Fourier transform
of my g function is
correlated with my f function.
So you can try to circ it yourself
and see how the output
changed depending on
your input functions.
This is where we'll stop for today.
But hopefully now you
have Qiskit installed
you're familiar with the Circuit Library
and you're able to run your
first quantum algorithm.
Make sure to like and subscribe
because next time we're gonna be talking
about what it actually means
to be a slur algorithm
and why certain algorithms are better
for quantum computers
versus classical computers.
Jin out.
(laughs)
Can you just have a jump cut
where I like tap it away (laughs)
- [Man] Absolutely
(upbeat music)
