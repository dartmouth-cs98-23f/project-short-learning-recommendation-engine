second,duration,transcript
0.0,4.62,hey everyone my name is vishwas and
2.399,5.46,welcome to what I hope is the first of
4.62,5.04,many AI related videos on this channel
7.859,4.381,if you're curious about building your
9.66,4.559,own AI powered applications but don't
12.24,3.54,know where to start let me tell you
14.219,4.201,you're not alone
15.78,4.74,AI powered apps are all the reach these
18.42,3.42,days but getting started can seem
20.52,3.66,overwhelming
21.84,4.439,that is where I come in
24.18,5.339,this video I'm going to show you how to
26.279,5.701,use the open AI API to build a vanilla
29.519,3.54,Javascript app that responds to your
31.98,3.419,prompts
33.059,3.781,think of it as a very simple AI
35.399,3.66,assistant
36.84,4.2,this video will provide you with a solid
39.059,3.541,foundation to kick-start your journey in
41.04,4.039,building your own AI powered
42.6,2.479,applications
45.42,5.76,the first step to working with open AI
47.64,6.259,API is to obtain an Epi key
51.18,7.28,if you haven't already head to
53.899,4.561,platform.openai.com sign up
58.5,4.559,and create an account
61.44,4.26,once you're logged in
63.059,4.74,go to your profile
65.7,5.419,view API keys
67.799,5.881,and create a new secret key
71.119,5.461,give it a name and click on create
73.68,2.9,secret key
76.92,5.699,make sure to copy and securely store
79.68,6.92,this API key as it will be required for
82.619,8.401,accessing open ai's API services
86.6,7.54,once you have your API key for Step 2
91.02,4.38,in vs code create a folder called AI
94.14,4.88,JavaScript
95.4,5.759,and within this folder create an
99.02,6.76,index.html file
101.159,7.621,and an index.js file
105.78,5.64,the HTML file will contain the HTML and
108.78,4.019,CSS for our application while a
111.42,3.479,Javascript file will contain the
112.799,4.981,functions to communicate with the openai
114.899,5.341,API and update the UI with the fetched
117.78,5.76,response
120.24,5.239,next for step 3 let's build the user
123.54,5.88,interface for the application
125.479,6.521,since HTML and CSS are Technologies we
129.42,4.92,are familiar with I am going to copy
132.0,4.14,paste the necessary code to save us some
134.34,3.66,time
136.14,3.54,please take a look at the link in the
138.0,3.86,pinned comment if you want to pause the
139.68,5.58,video and do the same
141.86,6.099,now the UI is built using HTML and
145.26,5.1,Tailwind CSS but please feel free to use
147.959,5.161,a styling solution of your choice
150.36,5.879,you can write simple CSS classes or use
153.12,4.08,something like bootstrap completely up
156.239,2.761,to you
157.2,4.98,but let me walk you through a few parts
159.0,5.64,in the code of copy pasted
162.18,6.9,in the head section we link to the table
164.64,5.76,in CSS CDN and index.js in the body
169.08,4.2,section
170.4,6.24,we have a title that says streaming
173.28,6.06,openai completions in JavaScript
176.64,3.739,an input element to accept the user's
179.34,3.899,prompt
180.379,4.301,a button to start generating the AI
183.239,3.78,response
184.68,4.94,and a button to stop the generation
187.019,2.601,process
189.78,4.2,above the input element
191.76,4.559,we have an empty section where the
193.98,3.72,content retrieved from the API will be
196.319,5.521,populated
197.7,6.86,the section has an ID of result text
201.84,4.86,now please make a note that
204.56,4.959,cdn.tailwindcss.com should not be used
206.7,6.56,in production but is suitable for quick
209.519,6.72,prototyping like our AI assistant app
213.26,5.979,moving on to step 4 let's start our
216.239,5.28,application by setting up a Dev server
219.239,4.92,if you're using vs code you can install
221.519,4.981,the live server extension which will
224.159,4.22,allow you to open the HTML file with a
226.5,5.22,live server
228.379,7.78,so go to extensions
231.72,7.379,search for live server and install it
236.159,6.36,after installation
239.099,7.741,simply right click the HTML file
242.519,6.121,and select open with live server
246.84,5.179,you should now be able to view the UI
248.64,3.379,without any issues
252.06,5.399,we have the title
254.64,5.4,a label that says generated text
257.459,3.96,empty space where the AI response will
260.04,4.2,be populated
261.419,4.34,an input for the prompt a generate and a
264.24,4.679,stop button
265.759,5.741,now you might be wondering why we need a
268.919,5.041,Dev server instead of just double
271.5,4.02,clicking on the HTML file to open it in
273.96,4.679,the browser
275.52,5.16,the reason is that fetch requests which
278.639,5.161,we will be using in our Javascript file
280.68,4.92,do not work with the file protocol due
283.8,4.56,to security restrictions
285.6,4.62,therefore having a Dev server is
288.36,3.96,essential to properly run our
290.22,4.62,application
292.32,5.96,now that we have the HTML in place let's
294.84,6.66,proceed with the JavaScript code
298.28,6.34,for step 5 let's start by defining
301.5,4.74,constants for openai API endpoint and
304.62,4.5,the key
306.24,6.54,const API key
309.12,7.019,is equal to a string and we paste in the
312.78,6.66,key that we created a few minutes ago
316.139,6.241,the API endpoint
319.44,5.94,you can find under API reference
322.38,3.0,chat
326.1,3.3,Under The Heading create chart
327.84,4.22,completion
329.4,2.66,copy
332.46,5.94,and paste it
335.12,5.859,again I want to reiterate that you
338.4,4.2,should generate your own API key as the
340.979,3.601,one shown in this video will not work
342.6,5.4,for you
344.58,5.58,for step 6 query the Dom elements and
348.0,4.62,get hold of the prompt input the
350.16,4.379,generate and stop buttons and the result
352.62,4.38,section
354.539,5.461,The const Prompt input is equal to
357.0,3.0,document.getelementbyid
360.36,5.119,and the ID of the input is prompt input
366.419,5.101,similarly
368.82,6.54,we have generate button
371.52,5.1,with the same ID stop button with the
375.36,6.679,same ID
376.62,5.419,and result text with the same ID
382.259,7.5,the IDS correspond to the ID attribute
385.62,7.26,of all the HTML elements
389.759,5.521,for step 7 handle the click and enter
392.88,4.319,events to submit the prompt to the chat
395.28,4.199,API
397.199,5.581,so generate button dot add event
399.479,4.921,listener the event is Click
402.78,4.5,and we're going to call a function
404.4,4.859,called generate
407.28,5.88,similarly
409.259,7.461,prompt input dot add event listener
413.16,3.56,the event is key up
416.88,5.46,we specify a callback function and if
419.94,5.039,event dot key
422.34,4.199,is equal to enter
424.979,4.761,recall
426.539,3.201,the generate function
429.78,3.9,the open AI completion request should be
432.12,3.96,triggered on click of the generate
433.68,4.5,button or when the user presses the
436.08,3.0,enter key when the prompt input is in
438.18,3.54,focus
439.08,5.7,we execute a function called generate
441.72,6.12,which we will Define next
444.78,5.34,for step 8 we will write the Crux of
447.84,4.68,this application we will Define the
450.12,4.56,generate function which will establish a
452.52,4.619,connection with the openai API endpoint
454.68,5.48,and generate a completion for the given
457.139,3.021,prompt input value
460.199,5.301,const generate
462.18,5.459,and this is an async function
465.5,5.699,within the function we're going to begin
467.639,3.56,with a try catch block
471.599,5.22,within the try block We Begin by making
474.06,6.96,a fetch request to the open AI API
476.819,6.961,endpoint the const response is equal to
481.02,7.26,a weight fetch
483.78,6.74,the first argument is the Epi URL
488.28,5.039,which is our constant
490.52,4.119,the second argument is the options
493.319,5.72,object
494.639,4.4,we specify method as post
499.139,6.68,headers which is an object
502.379,3.44,with content type
505.979,7.641,set to application slash Json
510.36,6.66,and authorization
513.62,7.2,set to Bearer
517.02,3.8,followed by the API key
521.159,6.18,again a constant
523.44,6.42,without this the request will fail
527.339,5.281,the final option we specify the body of
529.86,7.68,the post request
532.62,9.3,we set this to Json Dot stringify
537.54,7.16,an object an object contains model
541.92,6.539,which is going to be GPT
544.7,6.1,3.5 Turbo
548.459,5.341,and the prompt message that needs to be
550.8,5.4,sent to open AI for completion
553.8,4.38,the format for specifying The Prompt is
556.2,3.24,as follows
558.18,4.92,array
559.44,5.28,with an object rule is the key set to
563.1,4.14,user
564.72,4.619,and content is the key
567.24,4.08,set to prompt input
569.339,6.44,dot value
571.32,4.459,prompt input is our text field
575.88,5.1,this code will fetch the completion for
578.76,5.96,the given prompt let's convert the
580.98,7.38,response into a Json format
584.72,6.48,const data is equal to a weight response
588.36,2.84,dot Json
591.24,6.36,let's log data to the console
595.14,7.22,for the catch block we receive error as
597.6,4.76,parameter and we log it to the console
604.92,4.22,I'm going to move the event listeners to
607.56,4.14,the bottom
609.14,4.3,let's head to the browser and test this
611.7,4.68,out
613.44,4.74,you can enter any prompt you want to but
616.38,4.38,I am going to keep it simple for the
618.18,6.56,demo my prompt is
620.76,3.98,three word sentence
625.2,4.86,click generate
627.899,3.841,and we see the data logged in the
630.06,4.14,console
631.74,4.92,the completion itself though is nested
634.2,5.46,deep inside the object
636.66,5.16,within data we have choices which is an
639.66,4.919,array of objects
641.82,5.82,at zeroth position we have an object
644.579,6.601,with a message property this is an
647.64,5.879,object with a Content property
651.18,4.26,and this content is the completion from
653.519,4.44,open AI API
655.44,4.86,let's log it to the console instead of
657.959,6.541,data
660.3,6.84,so data dot choices of zero
664.5,5.399,Dot message
667.14,4.62,dot content
669.899,4.021,let's head to the browser and test this
671.76,6.3,out
673.92,6.84,The Prompt is three word sentence
678.06,6.36,I'm going to press enter this time
680.76,5.4,and we have the response I am here
684.42,3.539,of course you might see a different
686.16,5.1,response
687.959,6.721,but that completes step number eight
691.26,6.0,for step 9 let's update the UI with the
694.68,5.04,response
697.26,4.44,to display the completion in the UI we
699.72,5.28,need to assign this log statement value
701.7,5.52,to the inner text of the result element
705.0,7.26,so result text
707.22,6.239,Dot inner text is equal to
712.26,7.199,data
713.459,7.861,dot choices of 0 Dot message dot content
719.459,3.901,let's head to the browser and test this
721.32,3.48,out
723.36,4.32,once again
724.8,6.14,three word sentence is the prompt
727.68,3.26,click on generate
731.1,5.88,and this time we see the response in the
733.56,6.2,UI I am busy we have successfully
736.98,5.46,integrated the open AI API
739.76,5.139,but we are not quite done
742.44,5.22,for the 10th and final step let's
744.899,4.94,improve the user experience of our tiny
747.66,2.179,assistant
750.06,5.64,first if no prompt has been filled in by
752.94,3.72,the user we don't make the open AI API
755.7,6.62,call
756.66,5.66,so if there is no prompt input dot value
762.36,5.0,let's alert
764.22,6.5,please enter a prompt
767.36,3.36,and return
770.88,4.68,next when the fetch request is in
773.279,4.62,progress let's disable the generate
775.56,4.26,button and add a loading text to
777.899,4.62,indicate the fetch request is being
779.82,4.5,processed
782.519,4.021,so generate button
784.32,5.1,dot disabled
786.54,6.799,is equal to true so we disable the
789.42,3.919,generate button and we update
793.38,3.84,the result text
795.3,4.7,to the string
797.22,2.78,generating
800.04,4.62,for the next Improvement let's display
802.32,5.1,an error message to the user if there
804.66,5.96,was an error in our try block
807.42,3.2,So within the catch block
810.959,5.761,result text Dot inner text
815.22,3.419,is equal to
816.72,5.299,error occurred
818.639,3.38,while generating
822.839,6.44,finally irrespective of try or catch
826.26,3.019,block being executed
829.38,8.0,we need to enable the generate button
833.519,6.361,disabled is equal to false
837.38,4.54,let's head to the browser and test this
839.88,4.019,out
841.92,5.64,this time I'm going to enter the prompt
843.899,5.821,20 word sentence
847.56,4.44,I want you to closely observe the
849.72,4.919,generating text indicator in the result
852.0,5.1,section as well as the generate button
854.639,4.021,being disabled
857.1,4.02,click generate
858.66,4.619,and we see the button is disabled
861.12,4.98,the loading indicator was also displayed
863.279,5.461,well the completion was being fetched
866.1,4.76,we have our chat completion also working
868.74,5.219,as expected
870.86,5.919,so these are the 10 steps you need to
873.959,4.68,integrate the open AI API in a vanilla
876.779,5.041,JavaScript project
878.639,5.781,to summarize fill the UI
881.82,5.819,to accept a prompt
884.42,6.64,make a post request using that prompt to
887.639,5.401,the chat completion endpoint
891.06,3.6,update the UI with the received
893.04,3.9,completion
894.66,5.34,these are the steps to get started with
896.94,5.1,open AI in JavaScript
900.0,4.139,at this point I'm guessing you might
902.04,4.2,have a couple of questions
904.139,5.241,first you might be wondering about the
906.24,5.82,title streaming open AI completions
909.38,3.88,second you might be wondering about the
912.06,3.959,stop button
913.26,4.86,what exactly is its purpose
916.019,4.521,third you might have noticed that the
918.12,5.82,completion process takes a bit of time
920.54,7.12,especially for longer completions and is
923.94,5.94,not as fast as chat GPD completions
927.66,4.859,now these are great questions to address
929.88,5.04,in part two of this topic on the openai
932.519,4.62,API in vanilla JavaScript
934.92,4.68,join me in the next video where we will
937.139,5.581,learn how to stream openai completions
939.6,5.58,similar to chat GPD and implement the
942.72,5.7,stop button functionality to build out
945.18,5.159,from a completion thank you for watching
948.42,3.419,and please do consider subscribing to
950.339,3.961,the channel for more beginner friendly
951.839,4.641,content on AI I'll see you in the next
954.3,2.18,one
