second,duration,transcript
5.2,5.84,the four fundamental concepts
7.68,7.52,of object-oriented programming are
11.04,7.36,abstraction encapsulation inheritance
15.2,4.48,and polymorphism before considering what
18.4,5.44,they mean
19.68,7.759,first consider what is an object
23.84,7.839,an object is a thing from the real world
27.439,6.241,it could be a car a boat or a book
31.679,3.601,but it might not be something physical
33.68,4.48,that you can touch
35.28,4.72,it could be a dental appointment a seat
38.16,4.76,reservation for the cinema
40.0,4.879,or a bank account in the realm of object
42.92,5.159,object-oriented programming
44.879,4.721,an object is anything of interest to the
48.079,2.64,software application that you're
49.6,3.76,building
50.719,3.201,it's anything that you want to store and
53.36,4.8,process
53.92,7.2,data about another name for an object
58.16,2.96,is an entity
63.44,3.039,this leads us to the first fundamental
65.68,4.0,concept
66.479,6.801,of object-oriented programming namely
69.68,6.4,abstraction abstraction means to
73.28,6.0,simplify reality
76.08,4.56,for example a person is an object
79.28,3.36,but if you were designing a new
80.64,4.56,application to process data
82.64,3.44,about a person it's unlikely that you'd
85.2,2.8,be interested
86.08,3.2,in everything there is to know about a
88.0,3.52,person
89.28,3.12,rather you would only concern yourself
91.52,3.12,with the data
92.4,5.84,that are relevant and the tasks that you
94.64,3.6,want to perform with those data
98.56,3.28,to create objects programmatically you
101.36,3.6,need
101.84,4.48,a class a class is a template for
104.96,4.32,creating objects
106.32,4.56,a class is code written by a programmer
109.28,4.159,to define the attributes
110.88,4.559,and the operations of an object
113.439,4.161,attributes describe the object
115.439,3.921,they're sometimes referred to as fields
117.6,4.559,because they contain data
119.36,4.96,most programmers know them as properties
122.159,4.481,properties are coded within the class
124.32,4.719,either as public variables or as
126.64,4.88,property procedures
129.039,3.041,operations are actions that can be done
131.52,3.12,to
132.08,4.64,or performed by the object they're
134.64,3.92,sometimes referred to as behaviors
136.72,3.519,but more commonly they're known as
138.56,4.08,methods
140.239,4.64,methods are programs within the class
142.64,6.56,that are coded either as procedures
144.879,6.72,or functions a class is a template
149.2,4.48,for creating objects and it's often
151.599,4.64,compared with a pastry cutter
153.68,4.72,because once it's been written it can be
156.239,5.681,used to create many objects
158.4,4.96,of the same type in fact a class is
161.92,4.56,sometimes referred to
163.36,5.599,as a type each object
166.48,4.32,is an instance of a class in the
168.959,3.841,computer's memory
170.8,3.64,creating an object from a class is
172.8,5.04,therefore known as
174.44,4.439,instantiation once these objects have
177.84,3.84,been created
178.879,5.28,their properties can be assigned values
181.68,6.4,making each object of the same type
184.159,6.0,a unique entity each property is defined
188.08,4.4,in the class by a property procedure
190.159,3.36,which may include code to validate a
192.48,4.08,property value
193.519,4.561,while it's being assigned this helps to
196.56,4.16,ensure the integrity of the data
198.08,4.159,contained within the object
200.72,3.68,the property values that have been
202.239,2.801,assigned to an object are collectively
204.4,4.16,known as
205.04,5.68,the state of the object
208.56,3.039,it's also possible to assign values to
210.72,3.92,properties
211.599,6.081,while an object is being instantiated by
214.64,7.44,means of a special method called new
217.68,4.4,this method is known as the constructor
225.2,4.08,the second fundamental concept of
227.2,5.679,object-oriented programming
229.28,5.92,is encapsulation this means to hide the
232.879,3.201,complexity of the inner workings of an
235.2,2.88,object
236.08,4.719,from the programs and the programmers
238.08,3.2,that make use of it it's often referred
240.799,2.881,to as
241.28,4.0,information hiding because the data
243.68,3.199,contained within an object
245.28,3.76,and the functions that manipulate the
246.879,5.961,data are bound together
249.04,5.6,and therefore safe from outside
252.84,4.28,interference
254.64,3.599,in some big software development
257.12,2.959,projects
258.239,4.24,it's common for more experienced
260.079,4.161,programmers to write the classes
262.479,3.521,that will be used by the junior
264.24,3.76,programmers
266.0,3.12,a class might be made available in the
268.0,5.199,form of a class
269.12,4.88,library indeed some software development
273.199,3.28,companies
274.0,3.52,specialise in developing new classes to
276.479,4.481,be used by
277.52,4.48,other software developers compiled class
280.96,4.56,libraries protect
282.0,3.52,their intellectual property
285.6,4.0,to write code that will create an object
288.32,3.2,from a class
289.6,3.76,then set its properties and call its
291.52,3.84,methods it's not
293.36,3.92,necessary to understand the inner
295.36,4.24,workings of the class
297.28,3.6,all the programmer needs to know is the
299.6,3.439,name of the class
300.88,4.08,the properties and methods available and
303.039,3.281,any data that need to be supplied when
304.96,3.679,they're called
306.32,4.0,in other words all our programmer really
308.639,4.721,needs to know about
310.32,5.04,is the interface of the class the
313.36,2.72,implementation code of those properties
315.36,3.76,and methods
316.08,4.8,can remain a mystery this greatly
319.12,3.6,simplifies the use of objects
320.88,4.24,and helps to ensure that the data and
322.72,4.96,operations encapsulated within
325.12,2.56,are safe
329.36,4.16,the third fundamental concept of
331.44,5.28,object-oriented programming
333.52,5.36,is inheritance this means that a class
336.72,5.68,can derive its methods and properties
338.88,5.759,from another class inheritance can
342.4,4.96,result in a hierarchy of classes
344.639,4.161,for example this person class defines
347.36,4.48,the methods and properties
348.8,6.08,of a person object
351.84,4.079,an employee in a business is also a
354.88,4.159,person
355.919,5.441,so through inheritance an employee class
359.039,4.081,derives the methods and properties of
361.36,5.52,the person class
363.12,6.0,an employee is a type of person
366.88,3.2,a customer of the business is also a
369.12,4.16,person
370.08,6.0,so through inheritance a customer class
373.28,4.8,also derives the methods and properties
376.08,6.239,of the person class
378.08,4.239,a customer is a type of person
382.479,4.961,an employee class can have some extra
384.8,6.959,properties and methods of its own
387.44,4.319,it can extend the person class
392.08,3.76,and so can a customer
397.12,6.96,but it need not stop there a programmer
400.88,4.08,is a type of employee and so is a
404.08,4.64,manager
404.96,7.359,and a cleaner inheritance defines
408.72,5.039,type of relationships
412.319,3.681,the class at the start of the
413.759,5.921,inheritance hierarchy is called
416.0,4.96,the base class any class that derives
419.68,4.88,from another class
420.96,5.12,is called a sub class any class that is
424.56,5.199,derived from
426.08,3.679,is called a superclass
432.72,4.319,the final fundamental concept of
434.72,5.759,object-oriented programming
437.039,5.681,is polymorphism polymorphism
440.479,3.601,means that a class can implement an
442.72,5.199,inherited method
444.08,5.2,in its own way the person class at the
447.919,3.921,base of this hierarchy
449.28,3.28,has a method which will save details of
451.84,3.359,any object
452.56,4.56,created from the person class perhaps to
455.199,4.161,a database
457.12,3.6,thanks to inheritance all of the classes
459.36,5.279,in this hierarchy
460.72,6.319,do exactly the same thing but
464.639,3.201,it may be necessary for a customer's
467.039,3.921,details
467.84,5.359,to be saved differently perhaps to a
470.96,5.2,different database
473.199,4.081,polymorphism allows for this the
476.16,3.84,customer class can
477.28,3.44,override the workings of any method or
480.0,3.12,property
480.72,4.24,that it inherits with a new version of
483.12,4.0,its own
484.96,3.84,different forms of the same type of
487.12,5.44,object with the same
488.8,9.04,interface can behave in different ways
492.56,5.28,polymorphism literally means many forms
498.639,4.96,to recap the fundamental concepts of
501.199,5.44,object-oriented programming
503.599,6.081,abstraction means to simplify reality
506.639,4.881,and focus only on the data and processes
509.68,4.039,that are relevant to the application
511.52,5.36,being built
513.719,5.56,encapsulation means that data and the
516.88,5.12,programs that manipulate those data
519.279,5.041,are bound together and their complexity
522.0,5.04,is hidden
524.32,4.959,inheritance means that a class can
527.04,5.359,derive its methods and properties
529.279,4.801,from another class this might result in
532.399,5.361,an extensive hierarchy
534.08,6.0,of superclasses and subclasses
537.76,3.28,polymorphism means that different
540.08,3.439,subclasses
541.04,4.239,of the same superclass which therefore
543.519,4.241,share the same interface
545.279,3.521,can implement those interfaces in their
547.76,3.6,own ways
548.8,8.24,by overriding the code of the methods
551.36,5.68,they inherit
