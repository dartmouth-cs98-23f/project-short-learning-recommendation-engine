second,duration,transcript
0.88,4.56,"Architecture is the process and the product of 
planning designing and constructing buildings  "
5.44,5.68,"or other structures. A good design can make 
a structure survive and be admired for years  "
12.8,5.28,"or fail even to stand. It's the job of 
the architect to join both art and science  "
18.08,3.44,"to make sure all the pieces of a building 
come together in a good solution.  "
22.8,4.64,"Similar to architects as a software engineer 
you will also need to mix art and science  "
27.44,6.88,"to deliver solutions in a satisfactory way but 
instead of bricks you will solve them with code"
38.96,4.24,"Hi there I'm christian and you're watching the 
A Dev' Story. Today I will be starting a new  "
43.2,4.56,"series of videos covering software architecture 
in a practical way. In this series of videos I  "
47.76,5.92,"will be covering many concepts and fundamentals of 
software architecture so hopefully by the end of  "
53.68,6.32,"it you will be more prepared to tackle software 
design challenges, have better discussions  "
60.0,4.56,"and even be more prepared for a technical 
interview. So without further ado let's start"
67.84,4.56,"Software architecture has many definitions one 
of the most famous one is from Ralph Johnson  "
72.4,4.16,"where he says: ""architecture is about 
the important stuff, whatever that is""  "
77.92,3.76,"but... what is important stuff? In the 
software architecture we focus more on the  "
81.68,5.28,"structure more than implementation details. 
Software architecture is also about making  "
86.96,5.12,"the expensive choices that are costly to change 
after they are implemented. It's also about making  "
92.08,5.12,"explicit the core decisions that will allow 
the software to have high quality. Concepts  "
97.2,3.92,"are better understood in practice, so let's 
build an e-commerce site and see how that looks"
105.76,4.72,"So, for example in our e-commerce site we need to 
allow our users to do certain things like search  "
110.48,6.4,"the inventory, check reviews, buy a product, 
review past orders and maybe other features  "
116.88,5.12,"as well. These are the functional requirements 
of the application. Besides of what the system  "
122.0,4.96,"should do we also need to focus on how should 
the system behave. These are also called the  "
126.96,4.8,"non-functional requirements. These are sometimes 
defined as the ""-ilities"" that the system can have  "
131.76,5.68,"like: functionality, reliability, usability, 
efficiency, these kind of things. For example,  "
137.44,4.24,"in our e-commerce site let's say that we wanted it 
to be maintainable for several years and this is  "
141.68,5.36,"a maintainability requirement; we also want to be 
able to serve millions of users: in this case it's  "
147.04,6.0,"scalability; we also want to make it available 
24/7: which is a reliability to make sure that the  "
153.04,6.48,"system is very stable. We also want to have good 
response latency: which is efficiency; and we can  "
159.52,4.4,"have many others. Finally, besides functional 
and non-functional requirements you may also  "
163.92,4.48,"have additional restrictions that will limit the 
options that you will have for your architecture.  "
168.4,6.24,"So, for example, we could have some legal 
compliance, costs, time to market, standards, etc.  "
174.64,5.52,"several restrictions that will limit the number 
of options that we will have to design our system.  "
180.16,3.68,"Let's say in our e-commerce site we need 
to comply with the European Privacy Law:  "
184.56,4.72,"GDPR. So, with that we need to take into 
consideration architecture how to handle that."
192.16,3.6,"So after you get the context, you know all 
the things that the system needs to do,  "
195.76,5.6,"how it should behave and what restrictions are in 
place that you need to take into consideration. So  "
201.36,4.32,"after you have all of these things, you need 
to prioritize them. S ome requirements and  "
205.68,4.16,"restrictions will conflict between them. For 
example, if you have a strict time to market,  "
209.84,3.92,"maybe you need to drop some features. There 
can also be other things like non-functional  "
213.76,4.64,"requirements that need to be prioritized. So for 
example, in our case of the e-commerce site, we  "
218.4,5.12,"might not care too much about portability because 
we will have a strong control of where it's going  "
223.52,4.8,"to be deployed the application and after it's 
deployed in there we don't plan to move it to  "
228.32,6.56,"other platforms. So we could drop portability in 
favor of scalability or maintainability. So after  "
234.88,4.4,"you have prioritized the list and you have made 
this trade-off you need to think about if it's  "
239.28,4.96,"acceptable or not so after it's acceptable 
then you start designing the architecture.  "
247.2,5.76,"How do you start designing the system? So the 
first thing is once you have it prioritized start  "
252.96,4.56,"with one important thing at a time. If you try 
to tackle everything at the beginning and trying  "
257.52,4.56,"to think about all the possible scenarios in the 
future, you might end up having an over-engineered  "
262.08,5.68,"solution and this is not good because it is an 
unnecessarily complex system. There is also an  "
267.76,5.6,"acronym for that is YAGNI: You Ain't Going to Need 
It. So if you are not sure about something or if  "
273.36,6.0,"it's not prioritized then try not to tackle at 
first. Try to postpone it to when you have better  "
279.36,5.52,"context and can make a better decision about it. 
Now that you have this you might start thinking  "
284.88,5.12,"about what are the possible architectures that 
might fit your system. For that, a good book  "
290.0,6.24,"that I recommend and that is useful for me, is 
this free ebook from O'Reilly that is: ""Software  "
296.24,4.72,"Architecture Patterns"". It is a good book to get 
a grasp of different architectural approaches  "
301.52,9.84,"and you can see several architectural patterns 
like: Layered, Event Driven, Microkernel,  "
314.8,0.96,Microservices  
318.56,6.56,"and Space based. This book shows pros and cons 
of each of these patterns and might help you at  "
325.12,4.08,"the beginning when you're designing the system 
what to look for and what would be best for your  "
329.2,5.68,"system based on your current requirements. So we 
have decided what are some of the features that  "
334.88,4.48,"we want to have our system implemented. We have 
also mentioned that maintainability is one of the  "
339.36,4.96,"non-functional requirements that is very important 
for us, so with that we can start designing our  "
344.32,4.88,"system and we can take for example a Layered 
approach. We could have a Database or a Storage  "
349.2,6.08,"Layer where we would sort data; then we will 
have a Logic Layer where we will have the backend  "
355.28,4.96,"servers that will be taking care of handling 
any business logic that we want to handle;  "
360.24,5.6,"and then the Visualization part or UI, where we'll 
be allowing the users to interact with the system"
370.08,2.0,and this is how we get to the Layered Architecture
374.72,4.0,"So here we have defined the architecture 
with the structure that the system will have.  "
378.72,4.08,"The features can then be implemented following 
this layered architecture. And if you want to  "
382.8,5.84,"learn a little bit more about how to implement the 
features in a scalable nice way then I recommend  "
388.64,7.84,"you to check out my other video about design 
patterns. It's very typical in web applications  "
396.48,4.88,"to use a layered architecture but it's not the 
only architectural pattern that we can use.  "
401.36,4.32,"There is no silver bullet so make sure that in 
your context you look to different approaches and  "
405.68,5.36,"pick the architecture pattern that would better 
fit your use case. It's also normal that the  "
411.04,6.08,"architecture would evolve over time and sometimes 
even in unintended ways that would make expensive  "
417.12,5.84,"changes to the architecture. So you need to make 
a balance about foreseeing the certain things  "
422.96,4.96,"that you will need to cover versus the things 
that you need to prioritize in the short term.  "
427.92,3.68,"If you try to tackle everything then you can 
end up having an overengineered solution.  "
432.72,4.48,"One of the most expensive things can be scaling. 
So, in our case, we already have the architecture:  "
437.2,3.68,"How can we make it scale to serve 
millions and millions of user requests?  "
441.44,3.92,"For that check out my next video. And 
that's it for today! Thank you very much  "
445.36,3.6,"for watching and if you liked the video don't 
forget to click the like button, subscribe,  "
448.96,3.92,"share it. And if I missed something, or you want 
me to explain something a little bit better don't  "
452.88,10.96,"forget to mention it in the comments [section] 
below thank you very much see you next time."
