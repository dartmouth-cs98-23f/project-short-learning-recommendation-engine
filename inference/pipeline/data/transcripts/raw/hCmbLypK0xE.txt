second,duration,transcript
9.02,7.27,okay so the last talk is a Ramona now a
14.1,4.74,moneys currently professor at the
16.29,6.6,weights money institute he received his
18.84,6.239,PhD in 1989 from the University of
22.89,3.869,California at Berkeley and the
25.079,4.371,interesting fact is that it was done
26.759,5.491,under the supervision of mono and bloom
29.45,4.93,he works in various fields of computer
32.25,5.22,science mainly the foundation of
34.38,6.02,cryptography and especially notable for
37.47,6.51,creating non-malay above cryptography
40.4,6.94,visual cryptography with adi shamir and
43.98,5.58,suggesting various methods for verifying
47.34,8.37,that users for computer systems are
49.56,10.44,human he was named an IAC are a fellow
55.71,5.7,in 2008 for fundamental contributions to
60.0,4.29,the scientific foundation of
61.41,6.419,cryptography and for sustained
64.29,9.15,educational leadership in cryptology so
67.829,8.461,this is what I found in Wikipedia thank
73.44,6.71,you so thank you for the invitation and
76.29,9.66,for the opportunity to speak in such a a
80.15,7.81,company so I'll talk as you heard i'll
85.95,7.47,talk about cryptography data structures
87.96,7.019,and match made in heaven so cryptography
93.42,4.43,is a very old subject but it really
94.979,6.93,started as an academic subject only in
97.85,8.53,the mid seventies of course we keep
101.909,7.681,papers of difficult and the RSA a insane
106.38,5.46,and I also started around that time is
109.59,4.98,like the earlier is computational
111.84,4.86,complexity theory and there is a very
114.57,5.399,tight relationship between the two
116.7,6.779,the key idea of the cryptography you can
119.969,5.491,say to use the intricate ability of some
123.479,3.631,problems to the adventure your advantage
125.46,3.24,the bad news of one area of the good
127.11,4.59,news of the other he really in order to
128.7,6.23,construct securities in based of that
131.7,8.43,and this theme there's been a great
134.93,6.76,great results the areas of complexity
140.13,5.1,and the cryptography is really
141.69,7.019,stimulated each other and there just to
145.23,6.69,mention the whole PCP a sprung from
148.709,5.011,started from a very from a question of
151.92,4.44,what happens when you want to get zero
153.72,3.78,knowledge without any conclusion you
156.36,4.969,won't have perfect zero knowledge
157.5,7.709,without any computational assumptions
161.329,6.641,and key results in one area and were
165.209,5.06,applied in the other in that played
167.97,6.47,against traffic old message in your
170.269,6.821,paper which is already pretty old by now
174.44,6.91,paper did an address which he gave to
177.09,6.299,Fox in Fox 97 to had the racer in the
181.35,5.16,subtitle of cryptography and complexity
183.389,5.371,match made in heaven so in homage to
186.51,6.21,this title we'll talk about a data
188.76,5.879,structure but before that news Shafie
192.72,5.19,Goldwasser and silver Macaulay are they
194.639,12.57,Turing Award winners of this year it was
197.91,11.34,just announced anyway and anyway the
207.209,4.471,fishes of this talk is that actually
209.25,6.09,cryptography data structures the area of
211.68,8.36,data structures are quite familiar they
215.34,7.649,really have enjoyed a very fertile a
220.04,4.63,connection now but I'm unlike the
222.989,3.84,computation completing the connection
224.67,4.679,with complexity which was usually
226.829,5.611,celebrated here are some how people hear
229.349,5.61,it and did not celebrate the fact that
232.44,4.74,you know i'm using this end and vice
234.959,4.471,versa and there are actually many
237.18,4.38,examples and then what I'll do in this
239.43,5.25,talk is give you some examples which of
241.56,6.95,course are very biased sample of a of
244.68,3.83,such developments
248.61,5.83,so let's start with the first example
252.67,3.45,it's not the first example that exists
254.44,3.359,but the first example I want to talk
256.12,6.54,about that's hellmann's time-space
257.799,7.381,trade-offs so a helmet a when other
262.66,4.59,another important development in the
265.18,3.72,mid-70s in terms of cryptography in
267.25,3.33,addition to the invention of public key
268.9,5.04,cryptography was the fact the
270.58,5.75,introduction of the d/s the data
273.94,4.979,encryption standard because there was
276.33,5.95,something that the standard of
278.919,6.871,encryption of shared key encryption that
282.28,5.52,was considered good and suddenly you
285.79,3.84,know this problem well not clear whether
287.8,5.04,it was all but at least was it something
289.63,6.09,to talk about however what was the
292.84,5.61,problem to have very short key 56 bits
295.72,4.4,today it's definitely very short but
298.45,6.15,even back then it sounded like
300.12,6.93,borderline in helmand but distilled to
304.6,5.16,256 if you want to do exhaustive search
307.05,5.23,who is a pretty high number so what
309.76,5.1,Hellman pointed out is that actually you
312.28,5.37,can do much better then spend two to the
314.86,7.41,56 all over again for each each time you
317.65,6.63,want to break a d/s and he asked the
322.27,5.399,question suppose I have a function and I
324.28,5.49,want to invert it how costly so if you
327.669,3.691,aware your allow pre-processing so your
329.77,4.26,pre processing and then you you're
331.36,6.51,looking at how the cost of the vision of
334.03,5.49,any additional breaking so if for
337.87,4.62,instance if you build a table a large
339.52,5.7,inversion table then of course it's a
342.49,5.429,roughly order 12 to invert it depending
345.22,4.47,how costly it is to access the table but
347.919,6.391,that requires a huge amount of storage
349.69,6.479,so we probably want to have less storage
354.31,5.94,and are willing to work a little anymore
356.169,5.761,and so we we have some sort of limited
360.25,3.72,space so then we are asking what is the
361.93,5.52,best we can do in terms of time with you
363.97,5.36,stay so what Hellman showed a 19 a key
367.45,5.49,is if you want to invert a permutation
369.33,7.3,then you need storage s and time T 3
372.94,6.33,times s which is the N and if you want
376.63,3.659,to invert functions it three times a
379.27,3.72,squared
380.289,6.541,n squared so we'll think of T&S being
382.99,6.81,let's say n to the two-thirds and your
386.83,5.1,capillaries their size is two to the
389.8,6.509,little and that is the capital n is the
391.93,8.31,size of their of the universe the number
396.309,8.04,of a total number of keys that you can
400.24,10.069,have so how did he work how did that
404.349,8.761,work so let's say we have a permutation
410.309,6.431,so then we have a permutation pile only
413.11,7.979,hint how you do it for a permutation so
416.74,6.449,we have a permutation pie you can let's
421.089,3.901,for simplicity also think of it as one
423.189,6.69,cyclic permutation doesn't really matter
424.99,7.289,and so you can definitely go forward
429.879,4.77,that's the advantage that you have you
432.279,5.28,can go forward so in order to invert the
434.649,5.7,permutation you can go all the way
437.559,5.07,around you can apply to itself many many
440.349,4.05,cups so if for instance instead of being
442.629,4.77,a cyclic permutation it had only small
444.399,6.06,cycles to do it would be very easy to
447.399,5.281,invert the problem tation so the hardest
450.459,4.411,case seems to be when there is a cyclic
452.68,6.75,permutation so what did he suggest he
454.87,10.71,suggested adding shortcuts ok so you add
459.43,8.4,every T steps you add a shortcut ok so
465.58,6.209,the shortcut tells you if you get him to
467.83,6.089,go back a n minus the x in order to
471.789,4.38,instead of going all this way this will
473.919,4.52,think this would be a shortcut so this
476.169,4.86,means that when you are going forward
478.439,4.27,you only have to get to these special
481.029,6.09,points so that you can make a shortcut
482.709,6.21,and then the time to invert would be by
487.119,4.711,going forward in using the shortcuts the
488.919,5.911,time to invert would only be T so what
491.83,5.039,you get is this sort of expression and
494.83,4.859,this is true for permutations for
496.869,6.181,functions things are a bit more complex
499.689,5.07,and we we have the worst times i'm
503.05,4.56,actually it's a very interesting open
504.759,4.291,problem to just to try to improve these
507.61,3.18,things there are some lower bound in
509.05,4.44,some models in
510.79,5.0,is these lower bounds today there is a
513.49,4.77,slightly different method the rainbow
515.79,5.379,rainbow table method which is very
518.26,5.61,popular but these are still very this is
521.169,6.421,that these things are the most probably
523.87,5.7,the most important thing a time memory
527.59,6.45,trade-offs style if you want to have
529.57,6.57,online real-time style is a attacks and
534.04,6.42,crypto system then probably you'll be
536.14,6.03,using something of that nature okay so
540.46,4.05,this is hellmann's the time-space
542.17,6.39,trade-offs what is what is the
544.51,6.33,connection to data structures okay so
548.56,4.23,let's talk about the problem suppose
550.84,4.38,that you have a bunch of books that you
552.79,4.26,more many books and you want to arrange
555.22,4.59,them on your on your shelf so that
557.05,5.19,you'll be able to search under both
559.81,4.32,under title and under offer so you don't
562.24,3.9,have any this is sort of an implicit
564.13,3.96,date it's an implicit data structure you
566.14,4.41,don't have any other storage except
568.09,5.19,their items themselves and you can
570.55,5.13,already access them using a comparisons
573.28,4.71,you cannot pay we're not talking about
575.68,4.59,Ashley at this point later on we'll talk
577.99,4.38,a lot about as you so we can only
580.27,4.47,compare to you can compare the author
582.37,5.19,and you see whether it's larger or
584.74,5.13,smaller you can compare the title so
587.56,5.31,definitely the best you can hope for is
589.87,4.86,order log in here and the issue is can
592.87,3.69,you arrange so of course if you want to
594.73,5.67,just offer it would be very easy if you
596.56,5.49,want to just titled it would be very
600.4,9.35,easy but the question is can you do both
602.05,11.94,and one of my first papers while I was
609.75,7.27,minerals Bradley student with fear and
613.99,5.76,super-g much meat email encino we we
617.02,5.1,came up with an order log in solution
619.75,4.14,and i'm not going to show it and
622.12,4.1,actually it's true from many of the
623.89,4.5,results just try to show the idea the
626.22,4.75,relationship between the crypto and
628.39,7.26,their data structure anyway so we came
630.97,6.72,up with an IDF so first you you split
635.65,4.35,the records into katie's if you have k
637.69,5.85,not just two but you have k
640.0,9.9,types of a split the records in 2k keys
643.54,9.45,in 2k sets and what you want is that
649.9,5.43,each set would be a nearly perfect
652.99,4.74,sample for that key so you split
655.33,4.35,according to let say title is some of
657.73,3.96,the books are considered title books
659.68,4.65,some of the books are considered off the
661.69,5.46,books and it's a very good sample so if
664.33,5.25,you know where where you the book is if
667.15,6.24,you say book if your book is not the
669.58,6.3,book you're looking for is not according
673.39,5.4,to it was not chosen as part of the
675.88,5.31,title bouquet according to the title
678.79,4.38,step you'll know what where it should
681.19,5.27,have been to within one or two locations
683.17,6.39,and you can do such a you can do such a
686.46,5.71,partitioning using whole sphere anyway
689.56,4.77,so now the problem is of course you do
692.17,4.14,you know roughly where it should be but
694.33,4.47,it's not sitting in the right place so
696.31,4.65,what you have among the other books you
698.8,4.53,have some sort of permutation of the
700.96,5.67,original layer order so you want to
703.33,4.68,search in this permutation hey now you
706.63,4.47,don't have you know you don't know
708.01,5.579,things exactly but that's okay you can
711.1,4.68,actually add a few bits and then show
713.589,4.321,how to store them so I'm not going to
715.78,3.9,talk about all these things at all I'll
717.91,3.39,just mention that you still have you
719.68,5.79,have you have the problem that you have
721.3,6.24,a permutation where where the books say
725.47,3.6,went with if your book was not in the
727.54,4.59,thing you are looking for is not in
729.07,4.56,there if you're looking for a book by
732.13,4.32,title in the book that you're looking
733.63,5.78,for is actually the author section so
736.45,6.09,it's it's a order in some since um
739.41,5.44,according to some permutation of what it
742.54,5.07,should be and you can actually compute
744.85,4.17,the permutation you can commute the
747.61,8.729,forward presentation and you're trying
749.02,10.34,to invert it and what did we use we use
756.339,6.091,this sort of whatever Hellman had
759.36,6.04,exactly the helmet Drake except that T
762.43,6.6,here should be constant and we we were
765.4,5.52,able to store a like some small constant
769.03,3.499,some small constant times and pointers
770.92,4.76,and then
772.529,5.04,then store them in then show how to so
775.68,4.769,we have exactly we could use exactly the
777.569,7.13,idea of fair helmet and come up with a
780.449,7.231,solution which took only where each
784.699,6.01,computer will reach forward computation
787.68,7.319,with its backward computation where it
790.709,6.151,could be done in actually long time so
794.999,5.371,we could search for the book all
796.86,5.729,together in a long time so here we see
800.37,5.819,an example an idea that came up in the
802.589,8.36,crypt of literature shona in the a data
806.189,7.59,structure one okay so let's move on and
810.949,7.0,ask so if we look back at hellmann's
813.779,6.66,work kiss his analysis the way he wrote
817.949,3.901,it assumed a lot of randomness on the
820.439,3.45,function the function that you are
821.85,5.159,trying to invert he assumed was very
823.889,5.55,random and even if you take various
827.009,7.14,projections of it it it still remains
829.439,6.33,random and it's better to to work in a
834.149,3.961,worst-case style i have a function f
835.769,4.92,maybe i am assuming some computer
838.11,4.62,tutorial properties that it's say either
840.689,5.791,permutation or it doesn't have too many
842.73,5.49,a doesn't have too high integrate things
846.48,3.299,like that but we don't want to assume
848.22,4.289,that we're trying to invert a random
849.779,5.67,function because it's not it's a
852.509,7.26,function related to das it's not a
855.449,6.651,random function so and what the question
859.769,5.67,was whether you can come up with them
862.1,7.709,with an analysis of hell hellmann's work
865.439,7.861,without assuming anything about it and
869.809,5.801,would work with amis fear we have a way
873.3,5.94,of composing of the function if with a
875.61,5.849,que ways independent a function G and
879.24,5.01,and of course now if you have to if you
881.459,5.61,want to invert f composed with G it's
884.25,4.709,right you'll get from it something very
887.069,3.87,similar to inverting if I mean in terms
888.959,5.61,of if you can invert F composed with G
890.939,6.481,you'll also be able to invert if and the
894.569,4.83,problem is that k now each time to
897.42,2.61,evaluate the function you also have to
899.399,4.831,value
900.03,6.6,gee okay what should kb k should be
904.23,4.83,roughly I mean I didn't show you the
906.63,4.14,actual helmand construction but Kate but
909.06,3.81,k is going to be pretty large it's going
910.77,5.39,to be something like a capital N to the
912.87,8.91,one third so it's going to be very large
916.16,7.78,value and we want to for each time we
921.78,4.17,have to spend if we'll have if you look
923.94,4.02,at the sort of traditional construction
925.95,4.68,of K words independence using
927.96,4.17,polynomials or whatever then that's very
930.63,3.18,expensive then each time you want to
932.13,5.52,evaluate the function you have to invest
933.81,5.34,time into the one third so we were faced
937.65,3.27,with this problem and I'm not going to
939.15,6.12,tell you how we solve it back then but
940.92,6.57,actually today there is a I will hint of
945.27,4.29,how you can solve it today today there
947.49,4.92,with relationship to data structures
949.56,4.53,there are actually solutions of K ways
952.41,6.62,independent functions that can be
954.09,10.35,evaluated very quickly in order one okay
959.03,7.72,so so let's switch to the dynamic
964.44,4.62,dictionary to Hashem problems so we we
966.75,5.61,have there and we want to come up with a
969.06,10.65,data structure for representing a set of
972.36,8.82,words s from universe you and I guess
979.71,5.67,the red you don't seem either or
981.18,6.36,something anyway so the size of the set
985.38,4.23,s will denote with red line and the size
987.54,4.86,of the universe is little you and we
989.61,7.65,want to be able to do look up in insert
992.4,7.71,and delete and the performance we we
997.26,6.08,look will consider look up time update
1000.11,9.39,time and the space the amount of space
1003.34,8.89,and so we want to actually constant time
1009.5,7.26,operation and minimal space consumption
1012.23,8.39,this is of course a very problem that's
1016.76,6.48,been investigated for guess the first
1020.62,4.66,analysis interesting analysis is clear
1023.24,3.99,fluids of linear probing breaking news
1025.28,3.119,but still the trade-offs are not
1027.23,4.839,faithfully
1028.399,7.06,this is closed from that time to the
1032.069,7.74,time aerobic which i think in homes they
1035.459,6.391,had a you mentioned the canoe from 66
1039.809,8.09,but you had a picture of him from much
1041.85,9.63,later and is closer in spirit anyway and
1047.899,8.01,so in work with my students you are
1051.48,7.439,between and Gil Segev we came up with a
1055.909,4.9,solution with for any polynomial number
1058.919,5.25,of sequence and look up insert and
1060.809,5.401,delete all operations take a constant
1064.169,5.64,time and the probability is over the
1066.21,6.0,initial randomness and it this segment
1069.809,5.61,is true that it all operations take
1072.21,7.169,constant time so fix concern with some
1075.419,5.25,probability 1 minus 1 over palm so again
1079.379,2.67,I'm not going to show you the whole
1080.669,9.09,thing I'm going to show you a few ideas
1082.049,9.271,which are related to crypto so you so
1089.759,2.85,first you may ask why are we so
1091.32,4.65,interested in worst case and not
1092.609,5.971,amortized or whatever so first if you
1095.97,4.829,are have some sort of you're using it in
1098.58,3.959,heart the hard way hardware type
1100.799,4.051,environment it may be very important
1102.539,5.431,because you're building it you don't
1104.85,4.679,want to waste too much a you don't want
1107.97,3.839,to waste the amount of hardware you need
1109.529,7.791,to invest is connected to the worst case
1111.809,8.19,so you don't want that another reason is
1117.32,6.579,comes actually from cryptography suppose
1119.999,6.481,you you somebody is trying to to perform
1123.899,4.47,a timing attack on you so you have
1126.48,3.779,clocked adversaries they look how long
1128.369,4.111,it takes you to respond and act
1130.259,5.941,accordingly so they can learn your
1132.48,5.49,internal randomness ok so you they can
1136.2,3.449,actually learn your return randomness
1137.97,4.11,and reconstruct the hash function from
1139.649,4.65,we saying which operations take a long
1142.08,5.099,time in which operations take little chi
1144.299,5.671,and there and therefore they can find
1147.179,4.71,bad inputs so if you're in any sort of
1149.97,6.809,adversarial environment it's bad to use
1151.889,6.51,such such hash functions in general even
1156.779,4.941,if you're less more benign environment
1158.399,5.371,if it somehow inside an operating
1161.72,4.12,according to the time it takes to
1163.77,4.62,perform the operations Lee the next
1165.84,5.1,operation is affected something like
1168.39,4.26,that you're losing the fact that the
1170.94,6.0,assumption that the adversary is
1172.65,6.36,oblivious to your randomness so we want
1176.94,9.66,to have the worst case type things all
1179.01,12.23,operations take exactly the same okay so
1186.6,9.39,in terms of space we may want now really
1191.24,6.61,the minimal amount of space so you want
1195.99,7.04,if you're storing every element out of
1197.85,8.87,the universe of size you you don't see
1203.03,6.4,some universe which I guess we can't see
1206.72,5.29,so there is a universal size you you'll
1209.43,4.65,have a set of size and infirm a few are
1212.01,6.93,actually storing each element explicitly
1214.08,6.87,it takes you and log you a bits but you
1218.94,7.08,need we need less than that we need just
1220.95,11.07,a log you choose n bits to represent the
1226.02,9.9,set sign another out of you so you are
1232.02,7.05,wasting roughly n log n bits in when you
1235.92,6.86,is small when you is small polynomial
1239.07,6.03,event then this will be significant and
1242.78,4.12,for instance if you're doing bloom
1245.1,4.08,filters so bloom filter not the blunt
1246.9,3.96,filters you're doing a blood trail can
1249.18,6.3,show you want to solve the proximate set
1250.86,7.59,menu problem and so you have a subset
1255.48,5.43,again same type of subset we don't see
1258.45,9.84,the universe due to coloring problems
1260.91,9.09,and so you want to say yes on elements
1268.29,3.63,in the set you want to say no and I
1270.0,5.37,edelman sudden the set but you're
1271.92,6.66,willing to suffer some my error of gamma
1275.37,7.29,if it's not in the same and here you can
1278.58,7.37,show if gamma is a sub constant amount
1282.66,5.73,of space you need is M blog 1 over gamma
1285.95,4.6,we don't know exactly for the dynamic
1288.39,3.3,case we don't know exactly when the set
1290.55,2.999,can change dynamically
1291.69,3.959,you don't know exactly how it behaves
1293.549,8.041,when gamma is a constant but certainly
1295.649,8.851,when when gamma sub constant and this
1301.59,9.079,becomes very significant and blog a 1
1304.5,10.799,over gamma so this is the famous say
1310.669,9.34,they bloom data structure from 1970
1315.299,7.98,solves this problem to a certain extent
1320.009,5.13,and but we can actually use dictionaries
1323.279,6.541,to solve it and get a slightly better
1325.139,6.9,solution at least again when the case
1329.82,7.29,for a gala which is constant simply by
1332.039,8.49,hashing hashing too small said hashing
1337.11,5.789,to a set of size n over gamma okay so
1340.529,6.48,you started from University you actually
1342.899,9.0,set of size n over gamma and you to
1347.009,7.861,insert X you need to store G of X and
1351.899,8.52,instead of a storing extra story Reggie
1354.87,7.259,of x + m in order to check whether it's
1360.419,3.931,in you check whether G of X is in the
1362.129,4.41,dictionary so now the problem that you
1364.35,5.37,have is during your universe is of size
1366.539,5.22,n over gamma and you don't have enough
1369.72,4.14,bits to to represent each element
1371.759,6.03,separately that would be very way from
1373.86,6.51,you'll be getting something which is you
1377.789,4.081,wanna get getting such an expression the
1380.37,4.529,other hand if you have an optimal
1381.87,5.61,solution into optimal in terms of memory
1384.899,4.561,to the dictionary problem then you would
1387.48,4.409,have an expression like in may log 1
1389.46,6.77,over gamma so just for comparison with a
1391.889,9.451,original bloom filter that will be kind
1396.23,17.199,another constant times they lost a loved
1401.34,15.39,one of the blog eat a so so what's the
1413.429,5.011,source of waste why how can you waste
1416.73,3.899,space in the hash table what is if it's
1418.44,4.68,not full and apparel is not full so
1420.629,4.68,there are empty entries are really
1423.12,5.37,wasted we're not going out going to
1425.309,6.181,describe how we solve that problem the
1428.49,6.809,other is you're using too much in order
1431.49,6.99,to represent an element it's really if I
1435.299,6.24,you're using to represent an element log
1438.48,5.1,u bits but really there there is already
1441.539,4.35,if I'm searching for an element in
1443.58,4.41,location I there is a lot of information
1445.889,5.701,on the fact that I mean location lie it
1447.99,6.269,means that somehow the element led me to
1451.59,6.48,location I so don't really need to store
1454.259,8.25,all these things ok and we're going to
1458.07,6.359,use this idea we're going to use the
1462.509,8.821,idea that you we can get rid of some of
1464.429,9.271,these days so hey I think for some some
1471.33,5.88,of you will if you start the analogy if
1473.7,6.78,I'm if I'm up if if I'm standing and the
1477.21,4.949,fridges open it means that I'm hungry so
1480.48,3.569,I don't need to remember that I'm hungry
1482.159,4.89,right i can throw away this baby come
1484.049,6.061,hungry so this is the same thing if i'm
1487.049,5.49,looking at location if I i will music
1490.11,6.09,will be using our hash functions will be
1492.539,6.12,a permutation and we'll be using and a
1496.2,7.22,PI of X is the new identity of things
1498.659,7.971,and the prefix of the
1503.42,5.49,the new name is going to be the identity
1506.63,6.03,of the cell of where we're going to
1508.91,5.82,search for me okay so when the cell is
1512.66,4.5,being probed we know the prefix there
1514.73,5.28,isn't any point in remembering you so
1517.16,4.68,essentially and so if we're storing
1520.01,3.72,elements and benzene let's say then
1521.84,4.92,we're searching inside the bills it is
1523.73,4.83,the second level level they're really
1526.76,4.89,there isn't any point in storing all of
1528.56,5.94,this information inside the bin instead
1531.65,6.12,we can get rid of that part that tells
1534.5,5.52,us that this is a lettuce to want to go
1537.77,8.3,into point so too so we can store less
1540.02,8.13,information M so let me talk about
1546.07,3.97,cuckoo hashing because that will be
1548.15,5.49,important both for this and for for the
1550.04,6.09,next day application SoCo caching is a
1553.64,4.11,wonderful a scheme if you don't know it
1556.13,4.29,you should definitely you definitely
1557.75,4.71,should I think it's one of the great
1560.42,5.55,inventions in computer science of the
1562.46,8.04,century it was suggested by your pine
1565.97,8.49,Radler in 2001 and it's extremely simple
1570.5,6.21,what they're suggesting is your you have
1574.46,6.63,two tables he wanted me to each of size
1576.71,7.26,but if roughly larger than in and you
1581.09,4.47,have to hash functions h1 and h2 in
1583.97,3.86,order to do look up you have to look up
1585.56,7.77,in t1 and you have to look up in key to
1587.83,8.17,so you compute h1 to search for X what
1593.33,6.3,you do is you compute H 1 of X and woke
1596.0,8.64,up in a t1 you compute H 2 of X and you
1599.63,7.47,look up t to to see where it's you these
1604.64,6.12,are the only two possible locations were
1607.1,6.3,a or egg neck skin be okay so look up is
1610.76,5.87,extremely simple to hash computations in
1613.4,3.23,two air lockers and
1617.69,6.67,and the nice trick is the insertion is
1621.24,5.31,also pretty simple and hence the name a
1624.36,6.68,Coco it comes from their hookah bird it
1626.55,8.07,kicks away the eggs of other bird I
1631.04,5.8,suppose a North Americans need this
1634.62,6.78,explanation because it only happens in
1636.84,6.21,Europe in this area not in the North
1641.4,5.37,America the cuckoo birds don't behave
1643.05,7.61,like that so that's perhaps why I'm
1646.77,10.86,Ridley from Denmark anyway still are
1650.66,10.15,anyway so in order to put a look you put
1657.63,5.67,an X a location i h 1 of x if it's if
1660.81,4.68,it's empty great it wasn't empty you
1663.3,4.44,need to find a place for the guy that
1665.49,4.19,was there why and your insert it into
1667.74,6.57,the other table and again you kick out
1669.68,7.78,whoever was there etc so just do a
1674.31,7.35,simple example you're trying to insert a
1677.46,7.61,you you go to h1 of a is equal to h1
1681.66,7.92,okay so you kick out a a goes through
1685.07,9.37,h2o it's h2 of a why was there we need
1689.58,10.01,to find a place for NY h 1y was empty so
1694.44,5.15,you put it there and that the fing
1699.95,4.78,finishes so this is very simple though
1702.99,4.2,of course the question is why does it
1704.73,4.68,work and it doesn't always work but it
1707.19,6.6,works with reasonably high probability
1709.41,10.02,and it works if you look at the cook of
1713.79,9.48,graph then you have a set s defining
1719.43,5.79,such as you have here you have the you
1723.27,5.34,have a bipartite graph each location
1725.22,5.1,here corresponds to locations in the
1728.61,5.1,memory their worlds corresponds to 2
1730.32,5.19,locations of the memory the edges
1733.71,3.46,correspond to elements and you have an
1735.51,4.54,edge connecting a
1737.17,7.83,edge connecting for each element X you
1740.05,8.46,have an edge h 1 of X iconic HDX and now
1745.0,5.43,the nice thing is the SS successfully
1748.51,4.23,stored if and only if every connected
1750.43,6.36,component in the cocoa graph has at most
1752.74,10.26,one cycle okay and the insertion
1756.79,8.22,algorithm achieves this so so this is
1763.0,3.9,pretty good except that you're wasting
1765.01,4.98,it well right you need a little more
1766.9,5.42,than twice as many elements so it
1769.99,5.28,roughly half for this thing to work
1772.32,5.77,roughly half the locations will need to
1775.27,6.23,be empty so there are various ways a
1778.09,6.27,very getting it to be denser and denser
1781.5,5.95,and in particular in our work we showed
1784.36,7.11,how you can actually work in bins and
1787.45,7.82,get improvable results but the point is
1791.47,6.09,that that's not enough in order to get a
1795.27,5.56,1 plus a little o of one of the
1797.56,5.64,information theoretic now we need to get
1800.83,6.81,to to to use these permutations with
1803.2,7.56,image so in particular right you as I
1807.64,5.88,said you use the permutation and your
1810.76,5.34,partition you jump into part look at the
1813.52,7.83,Pyxis partitioning compiles the first
1816.1,8.49,part tells you a what build it should go
1821.35,7.74,okay the left part tells you to what Ben
1824.59,6.84,it should go and the second part is sort
1829.09,4.26,of the new identity will incur the new
1831.43,3.39,identity of the elements if it's going
1833.35,5.97,to be in a certain bit there isn't any
1834.82,6.84,point in story so if we know that we
1839.32,4.29,know that it's going to be in this
1841.66,4.86,billion been corresponding that we can
1843.61,7.74,throw away this part and install just
1846.52,6.73,fairness okay so we just scored this
1851.35,7.059,valued and can get
1853.25,10.509,so how do we get permutations so here we
1858.409,7.541,use again crypto we look at the
1863.759,7.951,construction of a feistel permutation
1865.95,10.14,that was in the construction of des used
1871.71,6.75,chrysler permutation they're more the
1876.09,3.87,construction of mubarak of the pseudo
1878.46,5.79,random permutations using feist
1879.96,7.14,implementation and essentially what we
1884.25,6.72,have here is we petition to left parking
1887.1,6.539,right point we apply a function here
1890.97,4.439,which should be pretty random we know
1893.639,3.66,how to construct remember our problem is
1895.409,4.921,we have good constructions of pseudo elf
1897.299,5.521,ok where's independent functions but not
1900.33,6.39,we don't have great constructions of the
1902.82,9.89,gateways independent permutations so
1906.72,9.0,what we do let's say is a step or or
1912.71,4.299,this we can do this isn't for it's a
1915.72,3.99,little bit more involved but let's think
1917.009,6.15,of it as just pay one step you to apply
1919.71,6.51,a carriage independent function X or it
1923.159,7.531,with a left park and this tells us the
1926.22,8.61,pin number and our can remain unchanged
1930.69,7.5,this there's a new ID this is and what
1934.83,6.059,we have here is some sort of a highly
1938.19,8.55,independent cash for the blood to I so
1940.889,13.561,that we can still represent it in sub
1946.74,9.24,linear space and so how so how do we get
1954.45,4.64,something that is close to okay wise
1955.98,10.919,independent permutation so we do this
1959.09,11.919,like so let me do it here we can get PI
1966.899,6.181,1 and i 2 can be and just pairwise
1971.009,4.761,independent communications but here
1973.08,5.45,inside leave these two
1975.77,5.3,to these two permutations are
1978.53,5.25,constructed exactly as I showed before
1981.07,4.9,okay in each one of these functions f1
1983.78,3.75,and f2 are going to be highly
1985.97,3.38,independent but there are functions or
1987.53,7.44,irritation the whole thing the whole
1989.35,10.72,result is a permutation and we get a we
1994.97,6.69,this we can get a collection of Delta
2000.07,4.08,dependent permutation where they'll
2001.66,5.28,carry something like k squared over
2004.15,6.84,square root with you and you can compose
2006.94,6.72,a few of them and reduce the error so
2010.99,5.46,here we've used herein a basic idea of
2013.66,5.16,crypto of constructing pseudo random
2016.45,5.91,permutations in order to come up with
2018.82,6.9,the analog of the K was independent
2022.36,8.67,permutation that we we still don't know
2025.72,7.86,how to construct a so we still need so
2031.03,5.16,this is both in the work that I told you
2033.58,5.28,on making the helmets result rigorous
2036.19,5.07,and here we still need the ability to
2038.86,6.18,perform to come up with k wise
2041.26,7.59,independent a functions which can be
2045.04,9.81,evaluating the order one and have
2048.85,16.53,reasonably synced a representation so eh
2054.85,13.62,eh so let's go to our final application
2065.38,5.46,and also the construction later they
2068.47,6.06,still are you and that's hashing for
2070.84,6.839,domain extension so suppose that we have
2074.53,4.98,a pseudo-random function that operates
2077.679,4.411,on a fixed domain site so let's say it
2079.51,6.72,operates on n bits from n bits to embed
2082.09,5.85,some it's like a super education so we
2086.23,4.199,want to construct a certain oral
2087.94,7.41,function on any domain size from M bits
2090.429,7.231,to a so we have one and fixed it maps n
2095.35,5.33,bits to n bits and we want to map am
2097.66,5.43,bits to anything so what can we do and
2100.68,5.05,we measure such construction by the
2103.09,4.92,domain now how large a new domain is the
2105.73,6.89,security is a simple random functions in
2108.01,4.61,general a win
2120.76,6.52,okay in general and we measure security
2125.63,4.64,of a server amel function by the number
2127.28,5.31,of queries you it can answer the time
2130.27,4.3,the time they tackle can attack it
2132.59,6.18,absolutely the distinguishing
2134.57,6.09,probability so we have a construction
2138.77,3.6,with Katie and epsilon and we want to
2140.66,3.75,come up with a construction with k prime
2142.37,7.11,keep riding epsilon prime which are as
2144.41,8.61,good as possible ok so we measure the
2149.48,6.69,construction by how the deterioration of
2153.02,5.7,the security how worse ours are play
2156.17,5.4,prime V prime minister on prime or ours
2158.72,4.38,are compared to kten epsilon and the
2161.57,3.54,number of calls made to the underlying
2163.1,3.93,pseudo-random function so even if you
2165.11,4.05,look at the original gold right world
2167.03,5.13,vessel Macaulay paper pseudo-random
2169.16,4.89,where functions construction of several
2172.16,4.92,functions you can apply and get it in
2174.05,6.06,such a reduction but it wouldn't be so
2177.08,5.25,good in terms of the number of a calls
2180.11,3.93,to the function wouldn't be a constant
2182.33,8.0,number of calls to the underlying
2184.04,10.41,pseudo-random function so what can we do
2190.33,7.78,luckily a Levin had the idea and I think
2194.45,6.9,it's already in the original paper paper
2198.11,5.1,in the original GG or maybe all paper
2201.35,4.05,but actually it's explicitly described
2203.21,5.76,it in one of weddings paper much more so
2205.4,7.14,than many other ideas that are only
2208.97,5.76,hinted anyway so what you do is you in
2212.54,3.84,order to do to extend the domain you
2214.73,4.08,hash you use pairwise independent
2216.38,6.66,hashing go on the older nude large
2218.81,7.53,domain and you have to do the original
2223.04,5.97,domain what's the problem the problem is
2226.34,5.07,birthday so if you have few queries
2229.01,4.14,after something like use you cannot use
2231.41,6.57,it for more than Q squared over 2 to the
2233.15,7.65,N applications because after a kiss
2237.98,4.5,after this many the probability of a
2240.8,3.66,collision is Kim's point of entry to the
2242.48,4.84,end so
2244.46,6.04,deterioration in terms of distinguish
2247.32,5.16,ability is Q squared over 2 to the N the
2250.5,3.6,question is whether so that's it's a
2252.48,4.29,very good constructions in terms of the
2254.1,4.71,number of applications right we applying
2256.77,3.66,just one hash function one hash function
2258.81,4.65,would you pay away so that could be very
2260.43,4.8,efficient and then then we are applying
2263.46,4.23,the original pseudo-random function so
2265.23,5.25,that's great in these terms but in terms
2267.69,5.01,of the security deterioration it doesn't
2270.48,4.44,work and you cannot do apply to to you
2272.7,11.88,cannot to do more than square root of 2
2274.92,12.69,to the N name any queries so okay so
2284.58,5.1,what a we saw there have been various
2287.61,7.41,constructions trying to achieve it and
2289.68,7.32,in recent work with a tiger Bearman the
2295.02,4.65,heightened and the inner villain lair
2297.0,5.19,Komarovsky we came up with a
2299.67,5.58,construction that needed to call the
2302.19,8.88,original function the underlying
2305.25,8.22,function two times hey and this is of
2311.07,6.36,course reversed right security number of
2313.47,8.54,courses like this is the number of calls
2317.43,10.71,and this is the security in any way ah
2322.01,8.86,this also gives you suddenly strange
2328.14,5.87,anyway and I can't even blame the fact
2330.87,7.43,that it's not my computer in this case I
2334.01,6.85,guess it's my own doing anyway so they
2338.3,6.52,what happens in terms of security we can
2340.86,7.88,get we can get the security this should
2344.82,6.15,be here we can make the security they
2348.74,4.3,distinguish anon security to be as small
2350.97,4.65,as we which you can have two calls and
2353.04,4.2,other work to call so the underlying
2355.62,4.68,pseudo-random function plus other work
2357.24,5.07,and the security can be open from q 0 /
2360.3,5.04,2 to them but it can be even smaller if
2362.31,6.6,you are willing to spend more work but
2365.34,7.23,not cryptographic work so how did we get
2368.91,6.36,it we did it by using other people's
2372.57,4.11,work the best type of result you let
2375.27,4.98,other people do the work and then you
2376.68,6.26,just a snatch it in applied so the
2380.25,6.5,people who did the work we're fine pop
2382.94,8.71,against blam blam another only one zoo
2386.75,6.55,could work together and they came up
2391.65,3.24,with a construction of highly
2393.3,4.17,independent functions that can be easily
2394.89,10.76,evaluated in the spirit of very cuckoo
2397.47,13.29,hashing so a then you need a happy well
2405.65,7.3,you need that their point was this is
2410.76,4.23,their construction so you have functions
2412.95,9.48,f1 and f2 which are going to be
2414.99,9.21,essentially a f1 and f2 are going to be
2422.43,4.41,think of f1 and f2 is truly random
2424.2,4.29,functions but where can you have to run
2426.84,4.2,a random function if you have a table if
2428.49,11.19,it's just a table lookup so their domain
2431.04,10.98,is limited so so we will be applying h1
2439.68,6.39,h1 is going to be something like login
2442.02,6.63,or blog or in our notation here NY is
2446.07,3.96,independent h2 is also going to be
2448.65,3.81,something like anyways independent
2450.03,6.24,remember anything the original
2452.46,8.58,number of bids we're going to apply a h1
2456.27,7.98,is going to map to a relatively small FF
2461.04,6.0,one man maps to 22 it is whatever
2464.25,6.66,independence we want so we're going to
2467.04,5.91,bite so in order to evaluate the our
2470.91,4.17,hash function you have to apply they
2472.95,4.71,have to compute H 1 of X F to compute H
2475.08,6.06,2 of X then apply f 10 to them if the pi
2477.66,5.16,f 22 them X or the result then the whole
2481.14,3.93,thing would be exhorted with another
2482.82,4.68,something like anyways independent
2485.07,4.44,function so n n is the number of bits
2487.5,4.83,when they say ni need the number of bits
2489.51,7.079,or in the rigid in whatever application
2492.33,5.73,whether in your and sorry it makes sense
2496.589,3.661,to talk about end when we're talking
2498.06,3.72,about the crypto application and if
2500.25,2.97,we're talking about they the data
2501.78,4.89,structure application will talk about
2503.22,4.95,login so Rogan is still pretty little
2506.67,8.449,high but we can deal with that as well
2508.17,10.26,and not virgin until know in half and so
2515.119,5.171,so this is this is another way this is a
2518.43,4.56,pictorial way of viewing it again you
2520.29,4.26,have a large domain you apply the hash
2522.99,4.859,function you get a small domain you
2524.55,4.92,apply if you apply it from here you get
2527.849,4.591,your ex or the two results plus you're
2529.47,7.05,using another g for sort of those that
2532.44,8.669,didn't make it in what we showed with
2536.52,8.9,bypass road was a make sure this type of
2541.109,8.76,result if H the H a G these a functions
2545.42,8.439,these families if these families are a
2549.869,6.961,que wise independent an F is truly
2553.859,5.821,independent then the resulting family
2556.83,6.33,that we get is K over 2 to the K
2559.68,9.39,indistinguishable from random by any
2563.16,9.09,cake query non-adaptive distinguish ok
2569.07,7.08,so non-adaptive you seem so it's not
2572.25,6.24,quite what we want we want if we're
2576.15,4.949,trying to use it for whatever
2578.49,5.09,application both in the hashing both in
2581.099,4.591,the destruction occasion and in the
2583.58,7.6,domain extension application
2585.69,8.25,I think the adversary can be adaptive I
2591.18,6.69,mean certainly if you think of of
2593.94,5.49,adversaries in the context of silver and
2597.87,4.74,the functions they are adaptable think
2599.43,6.12,of them as a nap p so luckily the way
2602.61,6.99,the proof is written can you can easily
2605.55,7.65,get from it a stronger result and you
2609.6,6.78,can actually show that it holds for
2613.2,6.72,adaptive distinguishes as well again you
2616.38,6.03,can use their work in and get a this
2619.92,3.99,quite general statement that tells us
2622.41,4.23,that if you prove it in a certain
2623.91,5.07,combinatorial way you will be able to
2626.64,6.6,translate it and obtain a result that is
2628.98,11.01,good against a adaptive adversaries as
2633.24,12.6,well so the the way the domain extension
2639.99,10.74,would look like is something like what
2645.84,7.17,we saw before we will get will use an F
2650.73,4.98,would be the original children under
2653.01,5.31,like pseudo random function will have G
2655.71,6.09,and H which go which are k ways
2658.32,6.15,independent and the result would be we
2661.8,4.23,lose what don't lose anything in qu we
2664.47,3.66,lose a little in the time because we
2666.03,4.77,still need to evaluate Lee the hash
2668.13,6.0,function and in terms of the
2670.8,5.67,deterioration in the epsilon when we get
2674.13,7.8,an expression of the form K over 2 2day
2676.47,8.79,a Omega AQ over to today a to the K so
2681.93,5.91,once once k is larger than log kill we
2685.26,5.94,started to getting a reasonable results
2687.84,6.06,and we can this is what I told you
2691.2,8.4,before we can make it as small as we
2693.9,7.68,wish okay so and this is it these are
2699.6,7.2,roughly the examples I wanted to show
2701.58,7.86,and I would end up with just one
2706.8,4.47,question is there a general theory that
2709.44,4.77,explains these tight relationship how
2711.27,4.89,come we're getting so many were able to
2714.21,6.36,you to go back and forth between crypto
2716.16,6.9,and a data structure so easily is there
2720.57,19.83,it's just a general explanation for the
2723.06,20.58,way this phenomenal Thank You G takes
2740.4,5.19,care that the probability isn't smaller
2743.64,5.28,the probability of failure is something
2745.59,5.64,like 1 over the table size G takes care
2748.92,4.85,of failures makes the probability much
2751.23,2.54,much smaller
2759.15,9.51,oh then okay this film inger talking
2764.04,7.2,about a okay digital finger got rid of
2768.66,6.32,like Oh glory still the original its
2771.24,3.74,finger fulfill your talking about that
2776.57,5.56,okay you are talking about a very old
2779.28,6.54,papers okay now that they're not a space
2782.13,6.92,optimal but no but some of the work you
2785.82,9.06,did for bigger and Volvo have a mean
2789.05,7.72,that they extended the pine / result to
2794.88,4.41,get rid of Tony you can get rid of the
2796.77,4.08,the fact that you have law login
2799.29,3.45,independence that you can actually get
2800.85,4.86,it to order one independence you never
2802.74,4.56,have to work more than one order one so
2805.71,5.75,that's actually because it follows from
2807.3,4.16,work of this with this will be involved
