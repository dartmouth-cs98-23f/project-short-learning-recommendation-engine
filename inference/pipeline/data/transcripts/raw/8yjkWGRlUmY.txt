second,duration,transcript
0.342,3.08,Hey guys this is part one of my introduction to
3.421,3.221,classes and objects and in this video I'm going to
6.641,3.86,talk about what are classes and objects and then what
10.502,3.78,"are attributes, methods, and constructors and at the end of"
14.282,2.399,this video I'm going to give you some code samples
16.691,2.8,in Java but this video is going to be mostly
19.492,2.84,language independent so you'll be able to use what you
22.332,3.579,learn in this video in whatever language you're using.
25.911,3.431,Classes and objects are actually one of the most fundamental topics
29.351,2.94,"when it comes to data structures and algorithms, so let's get started."
32.292,3.849,So what are classes and objects? I think
36.141,2.3,the best way to explain what they are would be
38.441,2.89,to give you a really concrete example. So let's say
41.332,3.86,"as an example, you're thinking about making a website where"
45.192,5.308,people can visit and talk to a bunch of robots. So what you have in mind is
50.571,2.94,when people feel lonely or something they can come visit
53.511,2.67,your website and say hi to one of the robots there.
56.181,6.539,"So when a user comes to your website they might see a list of robots like this,"
62.76,5.151,and here you see two of those robots and they're called Tom and Jerry.
67.911,4.1,Aside from their names they have some obvious differences.
72.132,4.069,"First of all Tom's color is red, while Jerry's color"
76.231,4.12,is blue as you can see and Tom is slightly
80.352,4.68,lighter in weight than Jerry with thirty pounds of weight while
85.032,4.25,Jerry is forty pounds and they both have the same
89.292,4.18,"functionality. When you click this button ""Introduce"", Tom"
93.472,4.48,"will say ""my name is Tom"" and Jerry will say"
97.972,2.509,"my name is Jerry"" and that's all you have for"
100.481,2.8,now and it's pretty basic but that's all you want
103.422,1.978,at the beginning when you create this website.
105.4,4.222,"Now, to create a system like this you basically need a way"
109.622,4.41,to represent these different entities or these different robots in
114.032,4.24,"whatever programming language you're using whether it's Python, Java, or"
118.272,3.028,Javascript and that's where classes and objects come in.
122.3,3.6,"Now, to represent each of these robots Tom and Jerry that"
125.9,3.7,we saw earlier in whatever programming language you're using you
129.6,3.78,need to store two sets of information. The first set
133.38,3.35,of information that you need to store is the properties
136.8,3.44,that each robot has. So for example the first robot
140.24,4.73,"we saw had these properties: its name was Tom, the"
144.97,4.48,"color was red, and the weight was thirty pounds. And"
149.45,2.47,the second set of information you need to store for
151.93,3.34,each of these robots is the set of functionalities it
155.28,3.34,"has. As we saw earlier, it had only a single"
158.62,3.85,functionality in this particular case and that was to introduce
162.47,3.96,itself and that might be represented as a function in
166.44,3.16,whatever programming language you're using and let's just call it
169.84,3.6,introduceSelf() here for now. At this point you might
173.44,3.83,"say ""is there any convenient way to organize these properties"
177.27,4.11,"and functions together?"" There is, and that's called an object."
181.97,4.58,An object is basically a collection of properties which can
186.55,4.58,"be expressed as variables and some functions, and with that"
191.14,5.39,"collection of information an object can represent some ""thing"", whatever that"
196.53,4.09,"thing"" is. So in this particular case this particular object"
200.85,4.2,"is representing this particular robot, Tom, but you can make"
205.05,3.6,"an object so that it represents a particular person, or"
208.65,3.43,"a particular dog, or anything else for that matter."
212.08,3.8,If you decide to represent a particular person with an object
216.24,4.14,"let's say Lady Gaga just as an example, you might have"
220.37,3.46,a different set of variables and a different set of functions
223.97,3.33,"to represent that person. So for example, you might still"
227.3,3.3,"have ""name"", but you might also have ""height"" and"
230.6,4.91,"weight"", ""eye color"" and ""ethnicity"" and so on and your object"
235.55,2.88,"will probably have a different set of functions too, to"
238.43,3.2,show what kind of actions that person can take. It
241.63,5.56,"could be for example things like walk, sleep, talk, or"
247.19,3.38,"anything a person might do. OK, let's backtrack here a"
250.57,3.85,little bit. Once you create an object to express this
254.42,3.9,"particular robot Tom, you'll be able to put this object"
258.32,4.4,"in a variable just like that let's say ""r1"
262.87,3.43,just as an example. You'll be able to use this
266.3,4.1,variable that contains this whole set of information.
270.4,3.51,The properties or the variables and the functions just
273.91,3.19,like any other variables for example to pass it into
277.1,3.11,"a function as one of the arguments. OK, let's now"
280.21,2.56,"take a look at how the second robot we saw,"
282.89,3.88,"Jerry, can be represented with an object. It's gonna look"
286.78,2.86,pretty similar to the first one it's gonna have the
289.64,4.03,"same set of properties but different values this time ""Jerry"","
293.67,4.54,"blue"", and ""40"", and the same function as well,"
298.22,3.69,"introduceSelf() and of course once you create this object, you'll"
301.91,2.51,be able to put it in a variable as well
304.61,3.85,"let's call that one ""r2"", and because you have two"
308.46,4.46,"distinct variables containing two different objects, you'll be able to"
312.92,3.7,distinguish them very easily in your code and just quickly
316.62,5.34,"about terminology, these variables within an object are called"
322.09,5.11,"either ""instance variables"" or ""attributes"" and these functions within"
327.21,3.56,"an object are called ""methods"". OK, so when you"
330.77,3.5,see these two objects you might say well they're pretty
334.27,4.11,"similar, they have the exact same set of variables or"
338.39,3.7,attributes and they have the exact same set of functions
342.26,2.63,only one function in this case so you might
344.89,3.46,"say ""is there any convenient way to organize that somehow?"
348.84,3.82,"There is, and that's what a class is essentially. Now"
352.66,3.85,what's a class? A class is basically like a blueprint
356.67,3.57,from which you can make objects so just imagine for
360.24,4.052,"a second someone telling you ""please make a robot"". If"
364.292,2.59,"someone tells you something like that, you say"
366.882,2.77,what kind of robot do you want? What should it
369.652,2.79,"look like, and what kind of properties should it have, and"
372.442,4.09,"what kind of functionalities should it have?"" So basically, if"
376.532,1.97,you want to make a robot in sort of the
378.502,3.45,"real world, you need a blueprint to make that from"
382.232,2.78,to know what the robot should look like and that's
385.012,3.28,sort of how it works with programming with objects and
388.292,3.48,"classes too. So when you make an object, you want"
391.772,2.98,"to know what kind of properties, what kind of attributes"
394.992,2.77,"it'll have, and what kind of functions it'll have and"
397.762,3.46,you can use a class to specify exactly that.
401.222,2.76,"OK, let's now see what this particular class might look like"
404.272,3.63,"for these two objects, these two robots. It'll probably"
407.902,3.15,"look like this. As you can see, it has the"
411.052,4.53,"same set of properties as the objects themselves ""name"", ""color"","
415.972,3.82,"and ""weight"", but the values for these three properties are"
419.792,3.91,not defined yet and that's because the class doesn't refer
423.702,3.83,"to any particular object. It doesn't refer to this robot,"
427.612,4.0,"or this robot, in particular. It just refers to this"
431.682,3.2,category of robots or this type of robot in general.
435.472,3.32,Then when you create a specific object using this
438.792,3.79,"class then you can specify what the name should be,"
442.592,3.0,"what the color should be, and what the weight should"
445.592,3.95,be and also notice here that we already have the
449.552,2.59,introduceSelf() function in this class.
452.572,3.19,You can actually implement it already when you define this
455.762,4.94,class by writing something like this. So this is just
460.712,3.66,"an example from Java. In Java, for printing something on"
464.372,3.825,"your computer we have ""System.out.println()""."
468.197,3.995,It's similar to the print function or the printf
472.352,4.83,function in other languages and then inside the input
477.712,3.048,"of this function we have ""My name is "" as a string,"
480.76,5.002,"plus ""name"" and this name will refer to whatever"
485.762,3.84,the value of the name is for that particular object.
489.992,3.64,So for example if you run this function in this
493.642,4.26,"object it's going to print out ""My name is Tom"","
498.362,3.5,"because that's the name of this particular object, and"
501.862,3.74,"if you run this function here in this object instead, it's"
505.602,3.1,"going to print out ""My name is Jerry"" instead."
509.292,2.29,And one more thing to note here is that when
511.582,3.38,you define a class like this one you need to
514.962,2.89,"give it a name. It could be anything, but let's"
517.852,3.06,"call it ""Robot"" here and as you can see the"
520.912,3.33,"first letter ""R"" is capitalized and that's a pretty"
524.242,3.54,"common convention when you name a Class. OK, let's now take"
527.782,2.64,a look at how this whole thing might look like
530.432,2.14,in code. We're going to take a look at some
532.572,4.13,code in Java here but other languages are typically pretty
536.702,3.93,similar. Let's first assume that we already have our class
540.632,3.98,"defined. Like we said, it's going to be called Robot, but"
544.612,1.28,we're going to take a look at what's going to
545.892,3.0,go inside later and once you define
548.892,2.99,"this class Robot, you'll be able to use this class"
551.992,3.24,of course to create an object out of it. And
555.232,3.56,"you can do that like this. We have ""Robot"
558.792,4.99,"r1 = new Robot()"", and this ""new Robot()"" says"
563.822,3.93,"create a new object with this class Robot, and then"
567.752,4.25,we're assigning that object to r1 and then we
572.002,3.84,have the word Robot here again because a class is
575.842,3.52,used not just to create an object but also as
579.372,3.22,"a type too you know just like we say ""string"
582.612,2.8,"r1"" if we want to create a string, we"
585.412,4.47,"can say ""Robot r1"" to create a reference to"
589.892,3.65,"a Robot object. OK, let's move on. When you create"
593.552,3.36,a new object this way this new object doesn't have
596.912,4.1,"the properties, doesn't have its instance variables set yet"
601.712,2.99,so you need to set them after that just like
604.712,3.91,"that. Here we have ""r1.name = 'Tom"
609.052,3.4,and that sets the name attribute of this object or
612.452,4.05,the name instance variable of this object to Tom and
616.502,1.59,then you need to do the same thing for the
618.102,2.798,other two instance variables by saying
620.9,4.512,"r1.color = 'red'"" and ""r1.weight = 30"", so"
625.412,2.84,"that's the first object r1, let's see how we"
628.252,2.67,can create a second object here. As you can see
630.932,2.93,the second block of code here is pretty similar to
633.862,3.938,the first block. We have Robot r2 = new Robot();
637.8,2.422,to create a new object and then we have
640.362,3.15,"r2.name = 'Jerry'"" and so on to set"
643.732,3.17,the instance variables of that object. So that's how you
646.902,4.09,can create two objects of the Robot class here but
650.992,3.78,"what about the functionality we saw earlier, introduceSelf()? To"
654.782,3.46,run the function for each of these objects the syntax
658.242,3.02,for that is actually pretty simple. It's going to look
661.262,5.22,"like this. We have r1.introduceSelf(), this"
666.482,4.39,just says run this function introduceSelf() on this object
670.882,3.58,r1. So when you run this line it's going
674.462,3.74,"to print out ""My name is Tom"" because this robot's"
678.202,2.2,name is Tom and then you could do the same
680.402,3.798,"thing for r2 by writing r2.introduceSelf(),"
684.2,3.092,"and that's going to run this function, introduceSelf(), for"
687.302,1.898,r2 and then it's going to print out
689.2,3.762,"My name is Jerry"". OK let's now see how you can"
692.972,3.96,"actually define this class. First of all, to define what"
696.942,3.34,"instance variables this class will have, you can just write"
700.332,3.83,these. This of course says the instance variables that this
704.162,2.87,"class will have are ""name"", which is going to be"
707.032,2.89,"a string, ""color"", which is a string as well, and"
709.922,2.66,"weight"", which is an integer. And when you see other"
712.582,3.74,"sample code in Java, you might see words like ""public"","
716.482,4.72,"private"", or something else before each of these attributes but"
721.212,2.01,just to keep this simple I'm not going to talk
723.222,3.17,about what they are in this particular tutorial and when
726.392,2.87,you run this code it will just work just fine
729.372,2.85,"without adding these words too. OK, the next thing you"
732.222,4.01,need to define and implement is this function introduceSelf(). And
736.232,3.4,"for that you can write this. Here, we're defining a"
739.632,4.25,"function called introduceSelf() and we have the ""void"" prefix"
743.882,2.92,here to show that this function is not going to
746.802,4.29,return anything and notice that this function definition is still
751.092,3.36,inside this class and then the implementation is as we
754.452,3.44,"saw earlier: System.out.println(), ""My name"
757.892,3.36,"is this.name"". Actually we could just have name"
761.252,3.5,"here, but I wrote this.name instead just"
764.752,4.77,"for emphasis. So what's this here? ""This"" refers to whatever"
769.532,4.21,"object, whatever particular object, that you're running this function on."
774.332,2.98,"So if you write r1.introduceSelf(), you're"
777.312,3.33,"running this function on r1 so ""this"" will be"
780.642,2.51,equivalent to r1. So it's going to be
783.152,3.24,"sort of like saying System.out.println(), ""My"
786.392,3.2,"name is r1.name"", which is going to"
789.592,2.72,be Tom of course. And then when you run
792.312,4.25,"r2.introduceSelf(), this will refer to ""this"" key"
796.562,3.82,word will refer to r2 instead so when you
800.382,2.32,run r2.introduceSelf() it's going to print
802.702,3.26,"out ""My name is r2.name"", which is"
805.972,4.05,Jerry. OK so that's the basics of classes and objects
810.032,2.88,"in Java, but when you look at these two blocks"
812.912,3.77,of code you might say well they're pretty repetitive... you
816.682,2.16,"know, you need to repeat the same things over and"
818.842,3.48,over again and then it's pretty cumbersome to remember to
822.322,3.54,"set these attributes every time too, every time you create"
825.862,2.48,"an object. So you might say ""is there any way"
828.342,3.97,"to simplify that?"" There is, and it's called a constructor."
832.652,3.34,A constructor is basically a function that allows you to
835.992,3.66,create an object from a class and then you'll
839.652,2.62,be able to use the constructor to you know do
842.272,3.65,things like set the attributes for yourself. And actually you
845.922,3.07,"already used a constructor, you know this line right here,"
849.002,4.35,"new Robot()"" that's a constructor but that's a default constructor"
853.362,3.77,that Java defines for you and this constructor doesn't set
857.142,2.81,any of the attributes. So let's see how we can
859.952,3.59,create our own constructor that does set the attributes for
863.542,4.55,you. So that constructor might look like this. So if
868.092,2.88,you see this function you'll notice that you know
870.982,2.54,it looks like a regular function except for that we
873.522,3.92,"don't have any prefix here like ""void"" or ""string"" for"
877.442,3.81,"the return value. Instead, this constructor is just"
881.252,3.51,called Robot. Notice that that name is exactly the same
884.762,3.5,as the class name and then it has three arguments:
888.652,3.83,"String n"", ""String c"", and ""int w"". And then inside"
892.482,3.118,"this function we're setting ""this.name"" to n,"
895.6,4.272,"this.color"" to c, and ""this.weight"" to w. As we saw"
899.872,4.15,"earlier, ""this"" refers to the particular object that we're talking"
904.022,3.24,"about here, in this case the particular object that has"
907.272,3.33,"just been created, and then we're saying that object's name"
910.612,3.33,"should be n, which is the given argument, and then"
913.952,2.31,that object's color should be c which is the given
916.262,3.1,"argument and so on. And then here, the common"
919.362,4.19,practice here is to name these arguments exactly the same
923.552,4.24,"as these attributes, ""name"", ""color"", and ""weight"", and with that"
927.792,2.808,"this part is going to look like ""this.name = name"","
930.6,2.4,"this.color = color"","
933.0,5.522,"this.weight = weight"", but with that naming this function, this constructor,"
938.672,2.94,is doing exactly the same thing as this one so
941.612,3.33,"that's really just a style issue. OK moving on, we're"
944.942,2.78,almost done here... let's see how we can actually use
947.722,3.93,"this constructor. Actually when you define your own constructor, your"
951.652,5.38,"own custom constructor, the default constructor stops working. So these"
957.032,3.01,two blocks of code no longer works and then you
960.042,3.802,"can use this new constructor to create new objects, just"
963.844,6.876,"like this. This one says ""Robot r1 = new Robot(""Tom"", ""red"", 30)""."
970.76,3.2,"So these three arguments, ""Tom"","
973.974,3.92,"red"", and ""30"", will be passed on to this constructor"
978.484,2.55,and then this block of code is going to be
981.034,4.36,run and so r1's name is going to be
985.394,2.75,"given ""n"" which is ""Tom"" and then the color will"
988.144,3.29,"be ""red"" and then ""weight"" will be 30. So this"
991.434,3.74,piece of code will actually be equivalent to the
995.174,3.52,"whole block of code we had earlier right here. Basically,"
998.694,3.78,create a new object and then set the attributes to
1002.474,3.21,the given arguments. And then we can do the same
1005.684,3.196,thing for r2 as well by writing
1009.04,4.76,"Robot r2 = new Robot(""Jerry"", ""blue"", 40)"". This creates"
1013.804,4.83,"a new Robot object with the name Jerry, color blue,"
1018.644,3.94,and weight 40. And after creating these two objects you'll
1022.584,3.01,be able to use r1 and r2 just
1025.594,3.02,like before by writing r1.introduceSelf() and
1028.624,3.85,"r2.introduceSelf(). OK, again this was just"
1032.474,2.94,"sample code in Java, but it's pretty similar to other"
1035.414,2.89,languages too and you'll be able to find links to
1038.304,4.15,sample code in both Java and Python in the description
1042.454,3.39,"below. All right, if anything was unclear in this video"
1046.054,2.33,please let me know in a comment below so maybe
1048.384,2.2,I can talk about it in the next video. In
1050.584,3.23,the next video I'm also going to talk about how
1053.914,3.02,"you know multiple classes and objects can interact with each other,"
1056.934,3.03,and with that knowledge you'll be able to finally
1059.964,4.13,start building some data structures like linked lists. I'm also
1064.094,3.69,planning to create a new Python tutorial video on classes
1067.784,2.95,"and objects, so look out for that as well. And"
1070.734,2.85,special thanks to brilliant.org for sponsoring this
1073.584,2.616,"video. You know, some of you may already be"
1076.2,3.464,familiar with data structures and algorithms and maybe you're watching
1079.664,3.42,"my videos as sort of a refresher. If that's the case,"
1083.204,2.775,brilliant.org might just be the right website for
1085.979,3.11,you to learn more advanced concepts in computer science. So
1089.089,2.9,"personally, I used this computer memory course to get a"
1091.989,3.43,better understanding of how memory works in a computer. For
1095.419,3.57,"example, previously I didn't really know how structs in C"
1098.999,2.52,are stored on memory... I mean I had a vague
1101.519,2.92,"idea but I didn't really know, and I found this"
1104.439,3.48,course was really helpful for understanding that. Personally what I
1107.919,2.27,"like about Brilliant is, first of all, the fact that"
1110.189,2.96,"they have really nice visuals like this one, you know"
1113.149,2.76,"much nicer than mine I would say, and they're helpful"
1115.909,3.72,for understanding different concepts visually. Another thing I like
1119.639,3.22,is the fact that they sometimes combine multiple concepts
1122.919,2.35,"in a single problem. What I mean by that is,"
1125.269,3.24,"for example, for this particular problem you need to understand"
1128.509,4.44,"different things like binary expressions, and how structs in C"
1132.949,4.05,"are stored on the computer, and how short and char"
1137.009,2.8,and different types of data are stored on memory too.
1140.039,3.76,"And in my experience in general I have found that, you"
1143.799,3.08,"know, solving problems is a really good way to review"
1146.879,2.8,different concepts at the same time and also learn new
1149.679,4.29,concepts and brilliant.org definitely does a good job of
1153.969,2.61,coming up with good problems to solve and they even
1156.579,2.24,have pretty advanced courses like this
1158.829,3.87,"Artificial Neural Networks"" course on top of their standard computer"
1162.699,2.14,science fundamentals and algorithms courses.
1165.229,2.671,You can just go to brilliant.org/csdojo
1167.9,3.409,to start checking out these courses yourself and you
1171.309,4.271,can get 20% off their annual subscription through that link as well.
1175.7,3.14,"All right, as always I'm YK from CSDojo"
1178.96,3.1,and you know I'm working really hard here to make
1182.069,3.74,"CSDojo better and better so that hopefully, eventually,"
1185.82,2.38,it's going to be in a class of its own.
1188.62,1.38,All right I'll see you in the next video.
