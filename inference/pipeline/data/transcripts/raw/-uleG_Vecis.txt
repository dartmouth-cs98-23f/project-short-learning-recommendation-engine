second,duration,transcript
0.08,3.359,what's the first thing you should do
1.36,3.76,when your code throws an error obviously
3.439,3.36,you should change nothing and try to run
5.12,3.04,it again a few times if that doesn't
6.799,2.961,work you're gonna need a computer
8.16,3.12,science degree the awesome thing about
9.76,3.6,software engineering is that you can
11.28,3.84,learn to code and get a high paying job
13.36,3.2,while literally having no idea how
15.12,3.76,anything actually works it all just
16.56,3.76,feels like magic like a pilot driving a
18.88,4.64,giant metal tube in the sky while
20.32,4.4,knowing nothing about aerodynamics
23.52,3.2,[Music]
24.72,3.68,welcome to computer science 101 in
26.72,2.879,today's video you'll learn the science
28.4,3.199,behind the garbage code you've been
29.599,4.161,writing by learning 101 different
31.599,4.161,computer science terms and concepts this
33.76,3.92,is a computer it's just a piece of tape
35.76,3.76,that holds ones and zeros along with a
37.68,3.44,device that can read and write to it
39.52,3.52,it's called a turing machine and in
41.12,3.84,theory it can compute anything like the
43.04,3.6,graphics in this video or the algorithm
44.96,3.52,that recommended that you watch it at
46.64,3.759,the core of modern computers we have the
48.48,3.68,central processing unit if we crack it
50.399,3.761,open we find a piece of silicon that
52.16,3.76,contains billions of tiny transistors
54.16,3.28,which are like microscopic on off
55.92,3.2,switches the value at one of these
57.44,3.439,switches is called a bit and is the
59.12,4.16,smallest piece of information a computer
60.879,4.24,can use however one bit by itself is not
63.28,3.519,very useful so they come in a package of
65.119,4.481,eight called a byte one byte can
66.799,4.241,represent 256 different values like all
69.6,3.199,the characters that you type on your
71.04,3.439,keyboard in fact when you type into your
72.799,3.761,keyboard the character produced is
74.479,4.721,actually mapped to a binary value in a
76.56,4.8,character encoding like ascii or utf-8
79.2,4.0,binary is just a system for counting
81.36,3.68,like the base 10 system you normally use
83.2,4.0,when counting on your fingers but it
85.04,4.0,only has two characters one and zero
87.2,3.919,humans have a hard time reading binary
89.04,4.64,so most often it's represented in a
91.119,4.801,hexadecimal base 16 format where ten
93.68,4.079,numbers and six letters can represent a
95.92,3.36,four bit group called a nibble as a
97.759,3.121,developer when you write code in a
99.28,3.44,programming language it will eventually
100.88,4.08,be converted into machine code which is
102.72,4.32,a binary format that can be decoded and
104.96,3.68,executed by the cpu what it doesn't do
107.04,3.52,though is store data for your
108.64,4.4,applications for that computers have
110.56,4.48,random access memory or ram it's like a
113.04,4.24,neighborhood and inside of every house
115.04,4.56,lives a byte every location has a memory
117.28,4.4,address which the cpu can read and write
119.6,3.76,to you can think of the cpu and ram as
121.68,3.52,the brain of the computer but in order
123.36,4.0,for a computer to be useful it needs to
125.2,3.839,handle input and output an input device
127.36,3.2,might be the keyboard and mouse while an
129.039,3.121,output device might be your monitor
130.56,2.96,luckily most developers don't need to
132.16,3.04,worry about how this hardware fits
133.52,3.52,together because we have operating
135.2,3.44,system kernels like linux mac and
137.04,4.0,windows that control all hardware
138.64,4.08,resources via device drivers now to
141.04,3.52,start hacking on the operating system
142.72,3.599,your first entry point is the shell
144.56,3.84,which is a program that exposes the
146.319,3.761,operating system to the end user it's
148.4,3.919,called a shell because it wraps the
150.08,4.239,kernel it takes a line of text as input
152.319,4.0,and produces an output this is called a
154.319,3.601,command line interface not only can it
156.319,3.521,connect to your own computer but with
157.92,3.679,the secure shell protocol it can also
159.84,3.36,connect to remote computers over a
161.599,3.28,network now that you have access to the
163.2,3.36,mainframe it's time to pick a
164.879,3.601,programming language which is a tool
166.56,3.52,that uses the abstraction principle to
168.48,3.6,make computers practical to work with
170.08,4.0,for humans by simplifying different
172.08,4.0,systems layer by layer some languages
174.08,3.84,like python are interpreted that means
176.08,3.68,there's a program called an interpreter
177.92,4.319,that will execute each line of code one
179.76,4.8,by one other languages like c plus are
182.239,4.561,compiled they use a compiler to convert
184.56,4.24,the entire program into machine code in
186.8,4.079,advance before the cpu attempts to
188.8,3.92,execute it this results in an executable
190.879,4.0,file that can be run by the operating
192.72,3.84,system without any extra dependencies
194.879,3.761,now every programming language has a
196.56,3.759,variety of built-in data types to
198.64,3.44,represent the data we're working with in
200.319,3.2,our code instead of bytes we work with
202.08,3.12,more human-friendly things like
203.519,3.36,characters and numbers now the most
205.2,4.0,fundamental way to use data in your
206.879,4.241,application is to declare a variable
209.2,3.759,this attaches a name to a data point
211.12,4.0,allowing you to reuse it somewhere else
212.959,3.84,in your code python is a dynamically
215.12,3.679,typed language which means we don't need
216.799,4.0,to tell the program exactly which data
218.799,3.921,type is assigned to a variable it just
220.799,4.0,figures it out automatically however
222.72,3.84,other languages like c are statically
224.799,3.841,typed and that means you need to specify
226.56,4.08,the data type of a variable in your code
228.64,3.44,when you define a variable its value is
230.64,3.28,stored somewhere in memory on the
232.08,3.28,hardware and you may need to allocate
233.92,3.84,and free up memory throughout the
235.36,4.56,program a pointer is a variable whose
237.76,4.399,value is the memory address of another
239.92,4.319,variable which can be used for low-level
242.159,4.08,memory control many languages don't want
244.239,3.601,to deal with low-level memory management
246.239,3.601,and instead implement a garbage
247.84,4.08,collector which automatically allocates
249.84,6.0,and de-allocates memory when an object
251.92,3.92,is no longer referenced in the program
256.06,5.22,[Music]
259.759,3.201,now the data types available are
261.28,3.12,different in every programming language
262.96,3.36,but typically you'll find int to
264.4,4.239,represent whole numbers which may or may
266.32,4.0,not be signed or unsigned to represent
268.639,3.601,negative numbers as well when numbers
270.32,3.76,require a decimal point they typically
272.24,3.36,use the floating point type it's called
274.08,3.44,a float because there's only enough
275.6,3.76,memory to represent a certain range of
277.52,3.84,numbers at a certain precision and is
279.36,3.76,basically a form of scientific notation
281.36,3.6,to make computers faster if you need
283.12,3.519,more range or precision many languages
284.96,3.36,also have a double that doubles the
286.639,3.041,amount of memory used for the number now
288.32,3.04,when it comes to characters you'll
289.68,3.6,typically find the char data type to
291.36,4.24,represent a single character or more
293.28,4.0,commonly a string to represent multiple
295.6,3.2,characters together ultimately these
297.28,2.96,characters get stored in a memory
298.8,3.36,address somewhere but they need to be
300.24,3.44,stored in a certain order when the order
302.16,3.12,starts with the most significant byte
303.68,3.92,and the smallest memory address it's
305.28,3.919,called big endian or vice versa if the
307.6,3.36,least significant byte is stored in the
309.199,3.361,smallest address it's called little
310.96,2.959,endian when it comes to practical
312.56,3.28,software engineering one of the most
313.919,4.081,fundamental things we do is organize
315.84,4.079,data into data structures the most
318.0,4.56,useful data structure is probably the
319.919,4.641,array or list just like a shopping list
322.56,4.479,it organizes multiple data points in
324.56,4.88,order however it also maintains an index
327.039,4.481,of integers that starts at zero and goes
329.44,3.599,up for every new item in the list that
331.52,3.6,can be useful but you don't actually
333.039,3.921,need an index to create a list of items
335.12,4.0,another option is a linked list where
336.96,4.48,each item has a pointer to the next item
339.12,4.32,in front of it another option is a stack
341.44,3.68,that follows the last in first out
343.44,3.36,principle it's like stacking a set of
345.12,3.919,plates then when you want to access the
346.8,4.32,data you pop the last one off the top
349.039,4.0,the inverse option is a queue which is
351.12,3.6,first in first out just like when you
353.039,3.6,get into the red line the first person
354.72,3.759,there is the first one to be fed now
356.639,4.0,another extremely useful data structure
358.479,4.321,is the hash which might also be called a
360.639,4.0,map or dictionary it's like an array but
362.8,3.36,instead of an index of integers you
364.639,3.84,define the keys that point to each
366.16,4.64,individual item giving you a collection
368.479,4.401,of key value pairs in many cases though
370.8,3.92,it's not efficient to organize data in a
372.88,3.92,linear way to address that problem we
374.72,3.919,have trees which organize nodes together
376.8,3.2,in a hierarchy that can often be
378.639,2.961,traversed more quickly this can
380.0,3.6,sometimes be too rigid of a data
381.6,3.76,structure though so instead a graph can
383.6,3.68,be created to connect multiple nodes
385.36,4.24,together in a virtually unlimited number
387.28,4.32,of ways a graph has a node for the data
389.6,3.68,and an edge for the relationship between
391.6,3.36,the data points data structures are
393.28,3.68,essential but they don't do anything by
394.96,3.679,themselves to do something useful you'll
396.96,3.92,need to code up an algorithm which is
398.639,3.68,just code that solves a problem i took
400.88,3.2,the initiative in
402.319,3.6,creating the internet in our code we
404.08,3.6,have several mechanisms for implementing
405.919,3.921,algorithms the most fundamental of which
407.68,4.4,is a function which is a block of code
409.84,4.479,that takes an input then does something
412.08,4.08,and returns an output like a variable a
414.319,3.361,function has a name and it can be called
416.16,3.12,from other parts of your code with
417.68,3.2,different input parameters called
419.28,3.68,arguments one thing you might do in the
420.88,4.319,function body is compare one value to
422.96,4.72,another every language has a variety of
425.199,4.4,built-in operators like equality greater
427.68,4.0,than and less than that you can use to
429.599,4.72,compare two values if a is greater than
431.68,4.239,b then it forms a value of true but if b
434.319,3.681,is greater than a then the value is
435.919,3.921,false true false is what's known as a
438.0,3.84,boolean data type and whenever your code
439.84,3.919,produces a value like this it's known as
441.84,3.6,an expression but not all code will
443.759,3.681,produce a value sometimes your code will
445.44,4.08,simply do something which is known as a
447.44,3.92,statement a good example is the if
449.52,3.92,statement which handles conditional
451.36,4.32,logic for example if the condition is
453.44,4.159,true it will execute this code otherwise
455.68,4.0,it will short circuit and run the code
457.599,4.16,inside of the else block another very
459.68,3.84,common type of statement is a loop a
461.759,3.681,while loop will run this block of code
463.52,3.76,over and over again until the condition
465.44,3.759,in the parentheses becomes false that
467.28,3.68,can be useful but more often than not
469.199,3.84,you'll want to loop over an iterable
470.96,3.84,data type like an array most languages
473.039,3.6,have a for loop that can run some code
474.8,3.679,for every object in the array or
476.639,4.24,iterable data structure now in some
478.479,4.0,cases a function may not have an output
480.879,3.121,which is generally called a void
482.479,2.961,function an interesting thing about
484.0,3.44,functions is that they can call
485.44,3.759,themselves when a function calls itself
487.44,3.52,it's called recursion because when done
489.199,3.84,like this by default it will recurse
490.96,3.76,forever creating an infinite loop that
493.039,3.201,happens because when you call a function
494.72,3.599,the programming language will put it
496.24,3.6,into memory on what's known as the call
498.319,3.44,stack which is a short-term chunk of
499.84,3.44,memory for executing your code when a
501.759,3.041,function keeps calling itself the
503.28,3.44,language will keep pushing frames onto
504.8,3.76,the call stack until you get a stack
506.72,3.68,overflow error to avoid this your
508.56,3.44,algorithm needs a base condition so it
510.4,3.04,knows when to terminate the loop now
512.0,2.88,when you write an algorithm you'll need
513.44,3.36,to determine if it's any good and the
514.88,3.92,system for doing that is called big-o
516.8,3.52,notation it's a standard format for
518.8,3.52,approximating the performance of an
520.32,3.76,algorithm at scale it may reference time
522.32,3.92,complexity which is how fast your
524.08,3.68,algorithm will run and space complexity
526.24,3.599,which deals with how much memory is
527.76,3.44,required to run it developers have many
529.839,3.44,different algorithm types at their
531.2,3.68,disposal the most crude option is brute
533.279,3.601,force where you might loop over every
534.88,3.76,possible combination to hack somebody's
536.88,3.44,credit card pin a more sophisticated
538.64,3.36,approach might be divide and conquer
540.32,3.6,like binary search where you cut the
542.0,3.519,problem in half multiple times until you
543.92,4.0,find what you're looking for another
545.519,4.32,option is dynamic programming algorithms
547.92,3.76,where a problem is broken down into
549.839,4.081,multiple smaller sub-problems and the
551.68,4.32,result of each computation is stored for
553.92,4.0,later use using a technique called
556.0,3.36,memoization that means if a function has
557.92,3.599,already been called it will use the
559.36,3.919,existing value instead of recomputing it
561.519,3.121,again from scratch then we have greedy
563.279,3.041,algorithms that will make the choice
564.64,3.44,that is most beneficial in the short
566.32,3.44,term without considering the problem as
568.08,3.6,a whole one example of this is
569.76,3.759,dijkstra's shortest path algorithm on
571.68,3.76,the flip side we have backtracking
573.519,3.841,algorithms which take a more incremental
575.44,4.16,approach by looking at all the possible
577.36,3.84,options like a rat and a maze exploring
579.6,3.2,all the different potential paths now
581.2,3.199,when it comes to implementing your code
582.8,3.76,there are always multiple ways to get
584.399,4.0,the job done one programming paradigm is
586.56,3.76,declarative where your code describes
588.399,3.281,what the program does and the outcome
590.32,3.199,but doesn't care about things like
591.68,3.44,control flow this style of programming
593.519,3.361,is often associated with functional
595.12,3.76,languages like haskell the other
596.88,4.0,paradigm is imperative programming where
598.88,4.0,your code uses statements like if and
600.88,3.92,while providing explicit instructions
602.88,3.68,about how to produce an outcome it's
604.8,3.76,associated with procedural languages
606.56,4.399,like c today most general purpose
608.56,4.48,languages like python javascript kotlin
610.959,3.681,swift and so on are multi-paradigm which
613.04,3.28,means they support all these options at
614.64,3.6,the same time in addition to
616.32,4.16,object-oriented programming the idea
618.24,4.24,behind oop is that you use classes to
620.48,3.919,write a blueprint for the data or
622.48,3.76,objects in your code a class can
624.399,3.761,encapsulate variables which are commonly
626.24,3.599,called properties as well as functions
628.16,3.76,which are usually called methods in this
629.839,4.161,context it's a common way to organize
631.92,3.599,and reuse code because classes can share
634.0,3.92,behaviors between each other through
635.519,4.32,inheritance where a subclass can extend
637.92,3.76,and override the behaviors of the parent
639.839,3.921,class and it opens the door to all kinds
641.68,3.92,of other ideas called design patterns
643.76,3.759,now a class by itself doesn't actually
645.6,3.919,do anything instead it's used to
647.519,3.521,instantiate objects which are actual
649.519,3.44,chunks of data that live in your
651.04,3.84,computer's memory often you'll want to
652.959,3.361,reference the same object over and over
654.88,3.44,again in your code when data is
656.32,3.759,long-lived it can't go in the call stack
658.32,3.519,instead most languages have a separate
660.079,3.44,area of memory called the heap which
661.839,3.68,unlike the call stack can grow and
663.519,4.241,shrink based on how your application is
665.519,3.921,used it also allows you to pass objects
667.76,3.44,by reference which means you can use the
669.44,3.519,same object in multiple variables
671.2,3.04,without increasing the memory footprint
672.959,2.961,because it always points to the same
674.24,3.279,chunk of memory in the heap now what's
675.92,3.039,interesting is that if we go back to the
677.519,3.201,cpu that we talked about in the
678.959,3.761,beginning you'll notice that it contains
680.72,4.239,multiple threads a thread takes the
682.72,4.16,physical cpu core and breaks it into
684.959,3.361,virtual cores that allow it to run code
686.88,2.8,simultaneously there are some
688.32,2.959,programming languages that support
689.68,3.52,parallelism where you can write code
691.279,4.0,that literally executes on two different
693.2,3.6,threads at the same time however many
695.279,2.881,languages out there are only single
696.8,3.279,threaded but that doesn't mean they
698.16,3.52,can't do two things at the same time
700.079,4.081,instead they implement concurrency
701.68,4.159,models like an event loop or co-routines
704.16,3.44,that can pause or delay the normal
705.839,3.761,execution of code to handle multiple
707.6,3.919,jobs on a single thread at the same time
709.6,4.239,now in modern computing we're rarely
711.519,3.841,working with the bare metal cpu and ram
713.839,3.44,instead we work in the cloud with a
715.36,4.0,virtual machine which is just a piece of
717.279,4.0,software that simulates hardware that
719.36,3.44,allows us to take really big computers
721.279,3.521,and split them up into a bunch of
722.8,3.44,smaller virtual computers these machines
724.8,3.44,are the backbone of the internet and are
726.24,4.159,connected via the internet protocol each
728.24,4.0,machine has a unique ip address to
730.399,4.321,identify it on the network that ip
732.24,4.24,address is usually alias to a url that
734.72,3.6,is registered in a global database
736.48,3.919,called the domain name service now to
738.32,4.56,establish a connection the two computers
740.399,4.401,will perform a tcp handshake which will
742.88,4.079,allow them to exchange messages called
744.8,4.719,packets on top of that there's usually a
746.959,4.481,security layer like ssl to encrypt and
749.519,3.841,decrypt the messages over the network
751.44,3.68,now the two computers can securely share
753.36,3.84,data with the hypertext transfer
755.12,3.839,protocol the client may request a web
757.2,4.0,page then the server will respond with
758.959,4.32,some html modern servers provide a
761.2,3.84,standardized way for a client to request
763.279,4.081,data which is called an application
765.04,4.56,programming interface or api the most
767.36,4.0,common architecture is rest where urls
769.6,3.52,are mapped to different data entities
771.36,3.919,available on the server and that brings
773.12,3.6,us to our final topic mother effin
775.279,3.281,printers you're gonna need to learn how
776.72,3.2,these things work inside and out because
778.56,2.959,every time you go to grandma's house
779.92,3.2,she's going to ask you to fix it which
781.519,3.601,shouldn't be a problem for a computer
783.12,6.0,scientist like you thanks for watching
785.12,4.0,and i will see you in the next one
