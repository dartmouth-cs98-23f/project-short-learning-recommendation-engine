second,duration,transcript
0.0,1.977,"In this video, I'll give you a brief intro"
2.077,3.338,"into the vast and incredibly interesting
field of graph theory"
5.635,1.636,from a computer science perspective.
7.824,1.62,Here's an example of a type of graph
9.544,2.368,"that we're going to talk about extensively
in this video."
12.338,1.048,If you were to ask me
13.486,2.137,What's the simplest definition of a graph
15.759,1.92,"for someone who knows
nothing about the field?"
18.141,1.0,what I could tell you
19.41,2.925,"is that you can think of a graph
as a network"
22.543,4.288,"that helps define and visualize
relationships between various components."
27.35,3.671,"In this example, the circles that you see
represent the components,"
31.144,2.398,"and the lines connecting them
can be thought of"
33.642,2.795,"as signifying a relationship
between the components."
36.625,2.848,"These ideas of course have
more formal names in graph theory."
39.76,2.472,"We refer to these circles as
vertices or nodes,"
42.413,2.528,"and the relationships signified
by connecting lines"
45.041,2.44,"represent what we call
edges in a graph."
48.02,3.752,"Graph theory is all about the study of
the properties of these types of networks,"
52.046,5.201,"and how they can be used to model and solve
a whole host of interesting problems."
58.095,4.006,"This video is all about introducing you
to core concepts related to graph theory,"
62.201,3.126,"that we will then use to study
fundamental graph algorithms."
66.043,1.848,"We'll first start with
an important discussion"
67.991,2.234,"on why we should even care
about studying graphs,"
70.622,1.919,"after which we'll formally define a graph,"
72.641,3.058,"and introduce important terminology
used to communicate"
75.799,1.481,ideas about graphs.
77.38,3.561,"Then, we'll talk about how computers might
represent graphs as a data structure."
81.139,1.626,And then I'll finish the video off
82.865,1.745,"with some interesting
problems and questions"
84.71,2.543,"around graphs that you can think about
going forward."
88.983,2.413,"Let's first start with the
most important question:"
91.741,1.893,Why should we care about graph theory?
93.94,1.402,And the short answer to this is
95.442,1.388,graphs show up everywhere;
96.93,2.317,"sometimes in expected ways, and also"
99.351,1.379,sometimes in surprising ways.
101.211,4.144,"One of the most direct applications are
mapping and navigation applications."
105.894,1.262,"In any of these applications,"
107.256,2.021,"you often deal with roads and intersections,"
109.377,2.124,"which can be naturally modeled as a graph,"
111.601,2.554,"where each vertex represents an intersection,"
114.255,4.856,"and the edge between vertices signify
the roads between intersections."
119.397,2.14,"You could imagine, navigation applications"
121.637,1.773,might be interested in the best route
123.51,2.151,between a starting point and an ending point;
125.82,1.88,and this problem naturally translates into
127.8,2.179,many well-known graph theory problems.
132.009,2.09,Another natural application of graphs
134.199,1.166,is in social networks.
135.84,1.957,"In the context of this application, imagine"
137.897,3.744,"edges of a graph now represent friendships
between people in a network,"
141.851,2.27,where each node now represents an individual.
144.36,3.0,"Suppose you are interested in
recommending new friends"
147.46,2.8,"to person A, who currently has four friends."
150.377,3.569,"A natural way to solve this problem is to
look at all of person A's friends,"
154.143,1.577,"find friends of these friends,"
155.917,1.0,and recommend them.
157.114,3.657,"These types of problems are easily
modeled and solved with graph theory."
161.45,1.863,So these are examples of applications
163.413,1.912,where it's honestly not too surprising
165.425,1.72,"that something like
graph theory shows up."
167.325,3.314,"But the neat thing about graph theory
is that it also find ways to show up"
170.865,1.84,in the most unexpected places.
173.179,1.511,Let's talk about Sudoku.
174.924,2.029,"That's right.—I bet you
didn't see that one coming."
177.277,1.591,A lot of you have probably encountered
178.968,1.51,"a Sudoku puzzle at some point,"
180.578,1.477,"but for those of you who haven't,"
182.238,1.839,"here's a quick summary of
how this puzzle works,"
184.177,1.258,so we're all on the same page.
185.836,1.438,The goal of Sudoku is to fill
187.374,2.06,missing entries of a 9x9 grid
189.617,1.708,"with numbers 1–9,"
191.675,1.3,but with a few constraints:
193.135,1.876,The first constraint is that
195.111,2.922,"each 3x3 subgrid
cannot have repeated numbers."
198.193,3.351,"The next constraint is that each row
must have unique entries."
201.646,2.65,"And the last constraint puts
a similar limitation on the columns,"
204.432,2.338,"in which all entries of a column
must be unique."
207.401,1.53,It turns out that computers can solve
209.055,1.262,Sudoku puzzles efficiently
210.417,1.0,using graph theory.
211.517,1.304,"The graph here is quite subtle,"
212.996,1.175,but it does exist.
214.507,3.007,"What we are going to do is
we're gonna assign each number a color,"
217.763,1.715,and then construct a graph as follows:
219.719,1.474,"For each 3x3 grid,"
221.354,3.532,"we'll fill out the known entries
with the respective color for the number,"
225.12,2.92,and assign one color to all unknown entries.
228.573,3.043,"The constraint here is that
all of these 9 nodes as a group"
231.716,1.061,must have unique colors.
233.164,3.277,"We can then extend this mapping
to all other 3x3 grids,"
236.784,1.475,and create the following graph.
241.974,2.416,"We still have to take care care of the
other constraints."
244.543,1.718,We can connect the graph along each row
246.361,2.905,"to represent the idea that
every row on the graph"
249.366,1.513,must have a unique color.
251.076,2.671,"And we can do the same
connections along columns"
253.864,1.394,for that respective constraint.
255.696,1.659,Now we have a graph theory problem
257.455,2.603,"where we attempt to find colors
assigned to vertices"
260.158,2.429,that satisfy all the laid-out constraints.
263.119,2.718,"It turns out that this is actually
a well-known graph problem"
265.937,2.635,"that graph theory provides
an elegant algorithm for,"
268.747,1.635,"and once we find a set of colors,"
270.482,2.046,we have a solution to a Sudoku puzzle.
276.163,2.328,"Let's now proceed to
formally define a graph."
278.856,2.068,"A graph is a set of vertices and edges,"
281.024,3.117,"where each edge is
a connection between vertices."
284.74,2.627,"The way we usually denote
an edge in a graph is by"
287.491,1.708,referring to it as a pair of vertices.
289.623,1.985,"As mentioned before,"
291.718,3.016,"vertices and nodes are just different
names for the same concept,"
294.834,3.132,"that we will use interchangeably
when discussing graphs."
298.717,3.373,"If you're forced to mathematically
write down a definition of a graph,"
302.228,1.263,we can use set notation.
303.644,2.723,"For this particular graph, the vertex set
looks like V = {0, 1, 2, 3, 4},"
306.637,4.598,"and our set of edges would be denoted as
E = {(0,1), (0,2), (0,3), (1,3), (2,3), (3,4)}."
318.053,1.929,"Let's now define some
important terminology"
320.082,1.761,that you'll see over and over again
321.943,1.197,when talking about graphs.
323.301,2.547,"The first important term is
the concept of neighbors"
325.948,1.0,in a graph.
327.048,3.596,"Formally, two vertices are neighbors
if an edge connects them."
330.826,1.0,Here's an example:
331.936,4.153,"Vertices 1 & 8 of this graph are neighbors,
since they are connected by an edge."
337.622,2.408,One thing that we often query a graph for
340.13,2.12,is all neighbors of a particular vertex.
342.52,3.469,"For example, if we were asked
for all neighbors of node 0,"
346.089,4.883,"the result would be the following set
of 3 nodes: {4, 6, 8}."
355.198,2.781,"A related concept is the
degree of a vertex."
358.549,4.593,"A degree of specific vertex is equal to
the number of edges connected to it,"
363.242,2.321,"or equivalently, the number of neighbors."
365.957,1.258,"As per this definition,"
367.315,2.847,the degree of vertex 0 would be 3.
373.527,3.408,And the degree of vertex 3 would be 2.
382.848,1.832,Let's now talk about paths.
385.059,3.956,"Paths are simply defined as a sequence
of vertices connected by edges."
389.293,4.058,"Most of the paths that we'll deal with
will be paths with unique vertices."
393.526,4.119,"For example, one path from
vertex 0 to 2 is 0→6→7→3→2,"
397.745,2.526,"and all vertices in the path
only show up once,"
400.371,1.943,"which is what we'll assume
most of the time."
403.0,2.708,"One feature of paths is that
they have respective lengths."
405.927,4.139,"A path length is simply defined as
the number of edges in the path."
410.329,3.54,"In this example, the path length
we have here would be 4."
416.935,3.518,"A related idea to a path is
the concept of a cycle."
420.628,4.08,"A cycle is defined as a path that
starts and ends at the same vertex."
425.278,1.605,One key note about cycles is that
426.983,3.747,"all cycles are paths, but not all
paths are necessarily cycles."
431.445,1.738,There are several cycles in this graph.
433.445,2.913,"Here's an example of a cycle
that begins at vertex 0,"
436.504,1.97,and ends at vertex 0: 0→8→1→5→4→0
440.854,3.0,"The last term I want to talk about
is the concept of connectivity,"
443.978,1.993,which can be used in several contexts.
446.219,3.773,"The first context is with
respect to 2 specific vertices:"
450.394,3.365,"two vertices are connected
if a path exists between them."
454.0,2.586,"The second context you may
encounter connectivity,"
456.686,2.423,is when it is applied to a general graph:
459.335,3.584,"a graph is connected when
all vertices are pairwise connected."
463.094,3.27,"In other words, a path exists
between all pairs of vertices."
466.905,1.994,"This graph is an example
of a connected graph,"
468.999,2.387,"since if you pick any two vertices,"
471.591,1.883,we can identify a path between them.
473.649,2.387,"However, if we change up
the graph a little bit,"
476.233,3.095,"we now have an example of
a graph that is not connected."
479.693,2.321,Now it's easy to see that no path exists
482.167,1.869,between several pairs of vertices.
484.16,4.16,"This naturally leads to a third context
in which connectivity can be applied,"
488.488,3.117,which is the idea of a connected component.
491.89,4.021,"A connected component is a subset of
vertices of the graph that is connected."
496.218,3.08,"For example, in this graph we have
two connected components:"
499.714,2.292,"The first being the following
 set of vertices: V₁ = {0, 4, 6, 7, 8},"
502.108,4.172,"and then the remaining vertices of the graph
form the second connected component."
511.035,3.46,"Let's now transition to the types
of graphs that you may encounter."
514.765,4.767,"The main graph we've seen so far is
specifically called an undirected graph."
519.699,4.278,"Where for example if I have an edge
connecting vertex 0 to vertex 1,"
524.077,4.535,"it's implied that I also have an edge
from vertex 1 to vertex 0."
528.991,3.754,"A graph where this would not be the case
is called a directed graph,"
532.845,2.19,where now edges are unidirectional.
535.466,2.544,"Directed graphs
also have their own classes."
538.29,1.84,"This particular graph has a cycle,"
540.23,2.746,"so we can be more specific
by referring to this graph"
543.122,1.862,as a directed cyclic graph.
545.692,1.073,"On the other hand,"
546.94,3.022,"if a graph is directed
and contains no cycles,"
550.1,3.813,"we refer to that specifically
as a directed acyclic graph,"
554.013,2.036,which is a specific subset of graphs
556.232,1.934,that has been studied quite rigorously
558.266,3.082,"since they show up in
all sorts of interesting problems."
562.867,2.255,"Another important graph
is a weighted graph."
565.222,1.0,This graph is unique
566.322,2.515,"because each edge now
is not treated equally,"
569.115,2.671,"and some edges might have
a larger weight than others."
571.918,2.072,"This can naturally model
interesting metrics"
574.09,3.025,"like traffic, distances on maps,
and many other ideas."
578.596,1.82,Another important class of graphs
580.516,1.0,is trees.
581.616,1.644,Trees have 3 key properties:
583.64,2.416,"all trees are connected and acyclic,"
586.282,3.029,"removing an edge from a tree
will disconnect the entire graph."
589.411,1.0,"And furthermore,"
590.511,1.866,adding any single edge to a tree
592.477,1.126,will create a cycle.
594.005,1.898,"These are 3 valid examples of trees,"
596.003,1.449,"and I encourage you to take a second,"
597.552,1.0,"pause the video,"
598.652,1.718,and confirm that these properties hold.
600.53,2.55,"Personally I find verifying
the second and third properties"
603.18,1.243,surprisingly satisfying.
604.545,2.717,"It really emphasizes
how fragile a tree structure is,"
607.362,1.394,"which I think, is kind of cool."
611.158,2.722,"Let's now move on to some
more hands-on ideas."
614.311,1.893,How does a computer represent a graph
616.304,1.0,as a data structure?
617.734,1.577,Take for example the following graphs.
619.632,2.791,"How would you go about organizing
the information in this graph"
622.523,1.0,on a computer?
623.99,2.569,"[It] turns out that there are
several accepted ways to do this,"
626.659,2.754,"and some of them are better than others
depending on the context."
630.055,3.497,"The first idea that is quite natural
is to map vertices to one another"
633.652,1.038,"through a matrix,"
634.79,2.506,"which we formally call
an adjacency matrix."
637.917,2.729,"The rules for creating this matrix
are fairly intuitive:"
640.814,2.976,"if an edge between node i and j exists,"
643.989,3.27,"we will indicate this with an entry 1
in our matrix;"
647.705,1.7,"otherwise, the entry will be 0."
649.719,1.037,"Following these rules,"
650.856,2.068,this is what our adjacency matrix looks like
653.024,1.0,for this graph.
654.186,2.061,Notice that each edge creates two entries
656.347,2.066,since this is an undirected graph.
658.719,3.175,"Make sure you take a moment to
understand the mapping we have here."
665.31,3.39,"The second valid representation of a graph
is actually fairly simple."
668.916,3.334,"We take all the edges
and construct a set with each edge"
672.35,1.0,as follows.
673.879,2.01,"This representation is called
an edge set,"
675.989,3.309,"and it also contains all the information
about vertices and edges"
679.398,1.233,that you would need for a graph.
681.113,2.345,"However, this representation
is not as common,"
683.558,3.572,"because it's a little hard to extract
information about vertices of a graph"
687.23,2.116,using this particular representation.
691.069,3.511,"The third representation of a graph
is called an adjacency list,"
694.799,2.876,"and this is actually
the most common representation used."
697.916,1.598,The idea works as follows:
699.886,3.935,"we take each vertex, and map it
to a list of its neighbors."
704.105,2.372,"For example, node 0 has 3 neighbors,"
706.631,2.314,"specifically nodes 1, 2 and 3,"
709.164,2.467,"so we map it to a list
containing those values."
711.952,2.688,"The rest of the list is constructed
in a similar manner."
714.85,1.693,[The] nice thing about this representation
716.643,3.499,"is that it gives us an easy access
to neighbors of a particular node,"
720.353,2.562,which is a tool that will be immensely useful
723.015,1.0,in graph algorithms.
724.244,2.921,"Furthermore, this representation
exploits the fact that"
727.265,2.738,"most graphs in the real world
are going to be sparse,"
730.273,3.075,"meaning that we have
a large number of vertices,"
733.448,2.898,"with each vertex having
relatively few edges."
736.638,1.773,"For example, in a social network"
738.572,3.058,"you would actually make the most sense
to have this representation,"
741.73,1.827,"since there are going to be
billions of nodes,"
743.82,3.416,"but each node is unlikely to have
more than a few thousand edges."
747.426,4.089,"An adjacency matrix for a graph like that
would take way too much memory,"
751.615,2.803,"but with an adjacency list
it's much more manageable."
755.061,3.922,"For this reason in future videos
we will primarily use adjacency lists"
759.083,2.153,as a way to represent graphs.
763.09,1.849,The final thing I want to do in this video
765.039,2.462,"is to discuss some of the interesting
problems and questions"
767.601,1.759,you may find in graph theory.
769.615,1.708,In future videos we'll show you
771.423,2.805,"how you can apply graph algorithms
to solve many of these problems."
774.871,2.973,"A fairly standard problem that
you're likely to encounter all the time"
777.944,2.605,"revolves around connectivity
between two vertices."
780.666,1.0,"For example,"
781.766,3.112,"it's easy for us to see that
vertices 0 and 3 have"
784.978,1.194,many paths between them.
786.338,2.642,"But what sort of algorithms
can we use to allow a computer"
789.08,1.36,to efficiently solve this problem?
790.805,1.751,We can naturally extend this problem
792.656,2.375,to ask if an entire graph is connected.
795.221,2.432,"There are a variety of efficient algorithms
to solve these problems"
797.753,1.993,that we will cover in the next few videos.
800.126,2.199,"Another interesting problem
in graph theory"
802.425,1.35,is the shortest path problem.
803.875,2.764,"Specifically, what is the path
of the least length"
806.739,1.7,between two vertices?
808.79,1.257,"For this particular graph,"
810.147,2.993,"here's the shortest path
between vertices 0 and 3,"
813.38,2.339,"which is something we as humans
can generally eyeball"
815.819,1.102,for small enough graphs;
817.021,3.272,"but once again, what's the algorithm
to solve this problem generally?"
821.249,2.73,"Then there is the problem of
cycle detection in a graph."
824.079,2.611,"Many of the algorithms that are
used for connectivity problems"
826.79,2.729,"can be naturally adapted to solve
this problem as well."
829.716,1.813,"Another interesting problem
in graph theory"
831.629,1.819,"has to do with vertex coloring,"
833.548,2.139,"which we actually saw
in the Sudoku example."
835.819,2.81,"The problem formally stated is:
given a set of colors,"
838.789,2.548,can we assign a color to each vertex
841.437,3.016,"such that no two neighbors
are assigned the same color?"
844.986,2.986,"In this graph, for two colors
no such solution exists,"
848.329,1.402,"but if given 3 colors,"
849.831,1.586,this problem has a solution.
855.191,2.489,"Another very interesting problem
to ask about graphs"
857.78,1.586,is whether a path exists
859.621,2.117,that uses every edge exactly once.
862.387,1.563,"This might be harder to tell,"
864.05,2.542,"but this graph does indeed have
one of these paths,"
866.869,2.402,"and an efficient algorithm
for this problem exists."
870.562,2.628,"These types of paths have
tons of interesting applications"
873.29,2.827,in bioinformatics and circuit design.
878.665,1.649,A similar question that you may ask is
880.414,4.17,"what about the existence of a path
that uses every vertex exactly once?"
884.956,2.124,"Such path also exists in this graph,"
887.292,2.263,"but I think what you'll find
more surprising"
889.752,2.182,"is that there exist
no efficient algorithms"
892.034,1.0,to solve this problem.
893.19,1.0,What I mean by that
894.29,2.141,is that all algorithms we have so far
896.531,2.06,"run in exponential time for this problem,"
898.818,2.467,"which is incredibly slow
for large enough graphs."
901.62,3.19,"In fact, if you are able to find
an efficient algorithm"
904.91,1.406,"for this particular problem,"
906.416,3.014,"you would probably be given
every single computer science award"
909.53,0.881,"in existence,"
910.511,3.131,"because it would help resolve
a long-standing open problem."
913.742,1.477,"But don't get your hopes up there,"
915.319,2.235,because there's a fairly large consensus
917.654,2.119,"that no efficient algorithm
for this problem exists."
921.868,3.054,"Let's now take a moment to recap
the big ideas in this video."
925.022,2.941,"We first introduced graph theory
through a variety of cool applications,"
928.063,2.652,"where you saw why someone
should even study graph theory."
930.897,2.015,We then formally define graph theory
933.012,1.506,along with important terminology
934.618,1.827,"and types of graphs
that you will encounter."
936.934,2.308,"These concepts are
incredibly important to understand,"
939.342,2.796,"so that we have an appropriate framework
for discussing graphs."
942.525,2.788,"We then introduced several
representations of a graph"
945.413,1.039,"as a data structure,"
946.707,3.927,"with a specific emphasis
on the practicality of the adjacency list."
951.087,4.211,"And lastly, we introduced
some diverse and interesting problems"
955.6,3.655,"to motivate the algorithms
that we will go through in future videos."
959.62,1.321,I hope this discussion gave you
961.041,2.549,"an appreciation for the massive field
of graph theory."
963.736,2.854,"It's definitely one of my favorite topics
in computer science,"
966.816,1.745,and I hope it becomes yours as well.
969.006,1.004,Thanks for watching me.
970.12,2.762,"And as always, I'd appreciate it
if you hit the like button"
972.982,1.0,if you enjoyed it.
974.082,1.493,"If you want to see more content like this,"
975.675,1.492,be sure to hit the subscribe button.
977.267,2.938,"And if you want to more directly
support this channel,"
980.305,3.613,"be sure to check out the Patreon page
linked in the description below."
984.026,2.904,"See you in the next video.
Captions by BertalanD"
