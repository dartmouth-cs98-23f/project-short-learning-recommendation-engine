data structures we have talked about some of the linear data structures like array linked list stack and queue in all these structure data is arranged in a linear or sequential manner so we can call them linear data structures and weve also talked about tree which is a nonlinear data structure tree is a hierarchical structure now as we understand data structures are ways to store and organize data and for different kinds of data we use different kinds of data structures in this lesson were going to introduce you to another non linear data structure that has got its application in a wide number of scenarios in computer science it is used to model and represent a variety of systems and this data structure is graph when we study data structures we often first study them as mathematical or logical models here also we will first study graph as a mathematical or logical model and we will go into implementation details later okay so lets get started a graph just like a tree is a collection of objects or entities that we call  nodes or vertices connected to each other through a set of edges but in a tree connections are bound to be in a certain way in a tree that our rules dictating the connection among the nodes in a tree with n nodes we must have exactly n  1 edges one edge for each parent child relationship as we know an edge in a tree is for a parent child relationship and all nodes in a tree except the root node would have apparent would have exactly 1 parent and thats why if they are n nodes it must be exactly n  1 edges in a tree all nodes must be reachable from the root and there must be exactly one possible path from root to a node now in a graph there are no rules dictating the connection among the nodes a graph contains a set of nodes and a set of edges and edges can be connecting nodes in any possible way tree is only a special kind of graph now graph as a concept has been studied extensively in mathematics if you have taken a course on discrete mathematics then you must be knowing about graphs already in computer science we basically study and implement the same concept of graph from mathematics the study of graph is often referred to as graph theory in pure mathematical terms we can define graph something like this a graph g is in order pair of a set v of vertices and a set e of edges now im using some mathematical jargon here an ordered pair is just a pair of mathematical objects in which the order of objects in the pair matters this is how we write and represent an ordered pair objects separated by comma put within parenthesis now because the order here matters we can say that v is the first object in the pair and e is the second object an ordered pair a b is not equal to b a unless a and b are equal in our definition of graph here first object in the pair must always be a set of vertices and the second object must be a set of edges thats why we are calling the pair  an ordered pair we also have concept of unordered pair an unordered pair is simply a set of two elements order is not important here we write an unordered pair using curly brackets or braces because the order is not important here unordered pair a b is equal to b a it doesnt matter which object is first and which object is second okay coming back so a graph of is an ordered pair of a set of vertices and a set of edges and g  ve is a formal mathematical notation that we use to define a graph now i have a graph drawn here in the right this graph is 8 vertices and 10 edges what i want to do is i want give some names to these vertices because each node in a graph must have some identification it can be a name or it can be an index im naming these vertices as v1 v2 v3 v4 v5 and so on and this naming is not indicative of any order there is no 1st 2nd and 3rd node here i could give any name to any node so my set of  vertices here is this we have 8 elements in the set v1 v2 v3 v4 v5 v6 v7 and v8 so this is my set of vertices for this graph now whats my set of edges to answer this we first need to know how to represent an edge an edge is uniquely identified by its 2 endpoints so we can just write the names of the two endpoint of an edge as a pair and it can be a representation for the edge but edges can be of two types we can have a directed edge in which connection is oneway or we can have an undirected edge in which connection is two way in this example graph that im showing here edges are undirected but if you remember the tree that i had shown earlier then we had directed edges in that tree with this directed edge that im showing you here we are saying that there is link or path from vertex u to v but we cannot assume a path from v to u this connection is one way for a directed edge one of the endpoints would be the origin and other end point would be the destination and we draw the edge with an arrow head pointing towards the destination for our edge here origin is u and destination is v a directed edge can be to represented as an ordered pair first element in the pair can be the origin and second element can be the destination so with this directed edge represented as ordered pair uv we have a path from u to v if we want a path from v to u when need to draw another directed edge here with v as  origin and u as destination and this edge can be the represented as ordered pair vu the upper one here is uv and the below one is vu and they are not same now if the edge is undirected the connection is 2 way and undirected edge can be to represented as an unordered pair here because the edge is bi directional origin and destination are not fixed we only need to know what two end points have been connected by the edge so now that we know how to present edges we can write the set of edges for this example graph here we have an undirected edge between v1 and v2 then we have 1 between v1 and v3 and then be have v1 v4 this is really simple and just go ahead and write all of them so this is my set of edges typically in a graph all edges would either be directed or undirected its possible for a graph to have both directed and undirected edges but we are not going to study such graphs we are only going to study graphs in which all edges would either be directed or undirected a graph with all directed edges is called a directed graph or digraph and a graph with all undirected ages is called an undirected graph there is no special name for an undirected graph usually if the graph directed we explicitly say that its directed graph or digraph so these are two types of graphs directed graph or digraph in which edges are unidirectional or ordered pairs and undirected graph in which edges are bidirectional or unordered pairs now many realworld systems and problems can be modeled using a graph graphs can be used to represent any collection of objects having some kind of pairwise relationship lets have a look at some of the interesting examples a social network like facebook can be represented as an undirected graph a user would be a node in the graph and if 2 user are friends there would be an edge connecting them a real social network would have millions and billions of nodes i can show only few in my diagram here because im short of space now social network is an undirected graphs because friendship is a mutual relationship if im your friend you are my friend too so connections have to be 2 way now once a system is modeled as a graph a lot of problems can easily be solved by applying standard algorithms in graph theory like here in this social network lets say we want to do something like suggest friends to a user lets say we want to suggest some connections to rama one possible approach to do so can be suggesting friends of friends who are not connected already rama has 3 friends ella bob and katie and friends of 3 that are not connected to rama already can be suggested there is no friend of ella which is not connected to rama already bob however has 3 friends tom sam and lee that are not friends with rama so they can be suggested and katie has two friends lee and swati that are not connected to ramawe have counted lee already so in all we can suggest these for users to rama now even though we described this problem in context of a social network this is a standard graph problem the problem here in pure graph terms is finding all nodes having lenght of shortest path from a given node equal to 2 standard algorithms can be applied to solve this problem well talk about concepts like path in a graph in some time for now just know that the problem that we just described in context of a social network is a standard graph problem okay so a social network like facebook is an undirected graph now lets have a look at another example interlinked web pages on the internet or the world wide web can be represented as a directed graph a web page that would have a unique address or url would be a node in the graph and we can have a directed edge if a page contains link to another page now once again there are billions of pages on the web but i can show only few here the edges in this graph are directed because that relationship is not mutual this time if page a has a link to page b then its not necessary that page b will also have a link to page a lets say one of the pages on mycodeschoolcom has a tutorial on graph and on this page i have put a link to wikipedia article on graph lets assume that in this example graph that i am showing you here page p is my mycodeschool tutorial on graph with this address or url  mycodeschoolcomvideosgraph and lets say page q is the wikipedia article on graph with this url wikipediaorgwikigraph  now on my page that is page p i have put a link to the wikipedia page on graph if you are on page p you can click on this link and go to page q but wikipedia has not reciprocated to my favor by putting a link back to my page so if you are on page q you cannot click on the link can come to page p connection here is one way and thats why we have drawn a directed egde here okay now once again if we are able to present web as a directed graph we can apply standard graph theory algorithms to solve problems and to perform tasks one of the tasks that search engines like google perform very regularly is web crawling search engines use a program called web crawler that systematically browsers the  world wide web to collect and store data about web pages search engines can then use this data to provide quick and accurate results against search queries now even though in this context we are using a nice and heavy term like web crawling web crawling is basically graph traversal or in simpler words act of visiting all nodes in a graph and no prizes for guessing that there are standard algorithms for graph traversal we will be studying graph traversal algorithms in a later lessons okay now the next thing that i want to talk about is concept of a weighted graph sometimes in a graph all connections cannot be treated as equal some connections can be preferable to others like for example we can represent intercity road network that is the network of highways and free ways between cities as an undirected graph im assuming that all highways would be bidirectional intracity road network that is road network within a city would definitely have oneway roads and so intracity network must be represented as a directed graph but intercity road network in my opinion can be represented as an undirected graph now clearly we cannot treat all connections as equal here roads would be of different lengths and to perform a lot of tasks to solve a lot of problems we need to take length of roads into account in such cases we associate some weight or cost with every edge we label the edges with their weights in this case weight can be lenght of the roads so what to do here is ill just label this edges with some values for the lenghts lets say these values are in kilometers and now edges in this graph are weighted and this graph can be called weighted graph lets say in this graph we want to pick the best route from city a to city d have a look at these four possible routes i am showing them in different colors now if i would treat all edges as equal then i would say that the green route through b and c and a red route through e and f are equally good both these paths have to three edges and this yellow route through e is the best because we have only two edges in this path but with different weights assigned to the connections i need to add up weights of edges in a path to calculate total cost when im taking weight into account shortest route is through b and c connections have different weights and this is really important here in this graph actually we can look at all the graphs as weighted graphs an unweighted graph can basically be seen as a weighted graph in which weight of all the edges is same and typically we assume to weight as one okay so we have represented intercity cities road network as weighted undirected graph social network was an unweighted undirected graph and world wide web was an unweighted directed graph and this one is a weighted undirected graph now this was intercity road network i think intracity road network that is road network within a city can be modeled as a weighted directed graph because in a city that would be some one ways intersections in interest citys road network would be nodes and road segments would be our edges and by the way we can also draw an undirected graph as directed its just that for each undirected edge we will have 2 directed edges we may not be able to redraw a directed graph has undirected but we can always redraw an undirected graph as directed okay ill stop here now this much is good for an introductory lesson in next lesson we will talk about some more properties of graph this is it for this lesson thanks for watching  