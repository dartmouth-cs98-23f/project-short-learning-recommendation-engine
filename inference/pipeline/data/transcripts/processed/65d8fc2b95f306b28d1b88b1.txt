welcome everyone this is dr soper and today we will be going through our first lecture for our database class i need to operate under the assumption that not everyone in the class has had experience with databases in the past and so this first lecture is intended to bring everyone up to the same basic level of understanding with respect to several important database concepts we have several different objectives which we will seek to achieve in this lecture these are listed on the screen right now first we want to try to understand why storing data in a list is not necessarily a very good idea it can cause many different types of problems second we want to see if we can gain some insight into why an organization might want to use a database third we will see how the notion of related tables of data which forms a core part of the relational database model provides a basis for eliminating many of the problems which are associated with storing data in a list well also explore the various components and elements that comprise a database or a database system and we will learn about the purpose of something that we call a dbms a database management system and along the way were going to explore some of the functions that a robust database application can provide to us what then is the purpose of a database well its important to remember that a database does not have just a single purpose instead there are several key advantages that databases provide first a database provides a repository for storing data thats kind of implicit in the name database implies that we have a place to store data however what might not be so obvious is that databases provide an organizational structure for data that is we dont just have a place to store data but the database also provides an organized structure into which those data can be placed finally a database provides us with a mechanism for interacting with our data now interacting with data can generally be described in four different operations here theyre listed as querying creating modifying and deleting data but theres another more interesting acronym which may help you to remember this and that acronym is crud crud this stands for create read update and delete these are the four basic operations that we can use when interacting with data a key point to remember here is that in business there are many natural hierarchical relationships among data for example a customer can place many orders another way of saying that is many different orders can be associated with the same customer or another example is a department can have many different employees but a given employee might work in one and only one department so these are hierarchical relationships among the data and a relational database allows us to model and represent these relationships lets take a look at a list of data what i mean by a list here is a simple twodimensional table of data and in this table we store information that is important to us for some reason an example might be say that we have many different projects in our company and we want to keep track of who the project manager is for each project therefore for each project we may track the project managers name their id number and maybe their phone extension within our company now ordinarily this wouldnt be such a big problem but imagine if the same person the same project manager is simultaneously managing multiple projects in that case using a simple list the project managers information would necessarily appear on the list multiple times now what is the problem with this well there isnt really any major problem aside from the fact that its redundant another way of saying that is we are using more space than is necessary to record which project manager is associated with which projects another problem with storing data in a list is that the list of data may contain more than one concept or more than one theme i want you to remember this idea of a business concept because we will see it again and again throughout our course a business theme or concept refers to a number of different attributes or properties that are all naturally related to one type of business entity an example might be an employee an employee is a business concept employees have different attributes that we may want to track for each employee in our organization for example we may want to track the employees id number the employees name the employees salary other examples of business concepts or business themes include things like departments products customers orders locations and so forth returning to lists a major problem is with these multiple themes that is for each row of the list we might be recording information about more than one of these business concepts as an example consider our list of project managers if we also wanted to include project information that is perhaps a project name a project id any additional information about the project we might store that in the same row along with the project manager aside from redundancy as i mentioned earlier the problem here is not necessarily how we are storing this information but what might happen to the information if it is stored in this way when we store information in a list we introduce the possibility of something called data anomalies and specifically there are three types of these anomalies here theyre listed as a deletion problem an update problem and an insertion problem later in our course we will refer to these as deletion anomalies update anomalies and insertion anomalies so the structure of a list and its associated problems of redundancy and multiple themes can produce a situation in which these modification problems potentially could occur so lets take a look at some of these modification issues here we have a list of data which contains information on students so we have a students last name first name their email address and then we see who that students advisor is so the last name of the students advisor the email of the students advisor and the department in which they work along with some additional information lets take a look at how some of these modification anomalies might emerge in the first case imagine that we want to change a students advisor and for this example were going to change advisor baker to advisor  tiang  when we do this not only are we going to have to update the last name of the advisor in the list but to maintain the overall quality of the data a concept that we call data integrity we are going to have to also update the advisors email address note in this case that we do not need to update the department or the administrators last name because those are the same for advisors  tiang  and baker however if for some reason we wanted to change the students advisor from say baker to valdez well now not only do we need to update the last name and the email address but we also need to update the department and the admin last name attributes as well just to do something as simple as changing the students advisor with this list approach requires that four separate pieces of information be updated so this is what we might call an update anomaly or an update problem next lets look at a deletion problem imagine that our student listed here as chip marino decides to drop out of the university so we need to remove chip from our list of students now look what happens if we delete this row of data when the row of data is deleted not only do we lose the students information but weve also lost information about the advisor and the department in which that advisor works that is you will notice that advisor  tran  is not currently assigned to advise any other students so when we delete this row of data we may entirely lose the knowledge that advisor  tran  even exists and that can be a problem in this case this is called a deletion problem or a deletion anomaly finally lets look at an insertion anomaly lets say that at our university we decide that we want to add a new department so we create a biology department well this is fine we add information to our list we now have a biology department and an administrators last name however we now have all of this missing data in our table there are empty cells theres no information for a student theres no information for an advisor all we have here is information for the department this means that data are missing and were not efficiently utilizing our available storage space these are some of the problems with these lists now remember earlier i mentioned that in the business world there are complex relationships among different types of data for example a department may have many employees who work in that department or a product may be assembled from many different components or a customer might place many different orders with our company so there are these natural complexities that arise in business and relational databases as we will see not only solve the problems that are associated with lists but also allow us to model these natural relationships among business data now ive been using this term relational database so it would probably be a good idea for us to consider what a relational database actually is on a very basic level relational databases store data in a table now a table is simply a twodimensional grid of data that contains columns and it contains rows the convention in the relational database world is that the columns represent different attributes of an entity and each row in the table represents an instance of the entity so for example if i have an employee table with an employee id an employee name and an employee telephone number we would list those three attributes id name and telephone number as columns in the table and then each row in the table would represent an individual employee   again we said that there are these natural relationships among different business concepts out there in the business world in a relational database data for each of these concepts is stored in its own table so i may have an employee table i may have a department table and then i can create a relationship between those tables which will allow me to figure out which employees work in which departments so a good way of thinking about this is instead of storing all of the information in one big list we break the list apart into separate pieces according to which information is associated with which business theme or business concept therefore all of the information associated with an employee might go into an employee table and all of the information associated with a department might go into a department table although inside a relational database information about different business concepts or business themes is stored in separate tables it may be necessary say for reporting purposes for us to reassemble all of the data from these different tables back into a list now we can accomplish this in the relational database world by performing something called a join operation that is we join the tables together now a very very important concept for you to understand is that in the relational database world we link the records in different tables together using matched pairs of values these matched pairs of values allow us to associate a row in one table with one or more rows in another table for example if we have a project table and we have a customer table and we use an attribute called a customer id to uniquely identify each customer then what we can do is we can place a customer id attribute in the project table and we can then use the id of the customer in each table to link related rows together now of course you may be listening to this and you may think why do we want to do all of this extra work and it is true that relational databases are more complicated than storing data in a list however as we will see relational databases have many many advantages over a list among these first a relational database minimizes data redundancy in the examples we saw earlier we saw that there exists with lists the possibility to have all sorts of redundant data relational databases eliminate this relational databases also allow us to model the natural relationships that exist among business concepts in the real world and there are several other advantages as well including providing a solid basis from which to do things like generate reports or build user interface forms i mentioned a few minutes ago that there are four basic ways of interacting with data create read update and delete in the relational database world we have access to something called the structured query language often called sql or sequel if you like and this is the primary tool that we can use for performing these four basic operations on our data in a few weeks we will begin learning the structured query language this is an extremely valuable skill for you to develop if you are able to learn the structured query language well then you will be able to sit down and work with virtually any modern database with a very very short learning curve it doesnt matter if you need to work with a sql server database or an access database or an oracle database or a db2 or a mysql database or even a database for say a mobile device most databases including all of those that i mentioned support the structured query language so if you can learn the structured query language you will be very well positioned to work with almost any database even though were still early in our course i want to give you an example of the structured query language now so that you can see that its really not that difficult to understand this is certainly not a full scale computer programming language the structured query language was designed from the ground up to be simple to use and to be simple to understand   so what we have here is an example where we have three tables there is a customer table and a course table and an enrollment table so lets say that these are art courses we have customers who have signed up to take different art courses to see perhaps if they can learn to paint or they can learn to sculpt now although we start with three tables if we need to combine all of the information together in order to restore the original list structure of the data we can do that by using something called a sql select statement here we see an example of such a statement i know this looks complicated but hopefully you are able to read this even right now at the beginning of our course and get a good idea for what this statement is supposed to do so lets take a look we are selecting the customers last name the customers first name the customers phone number and the date of the art course the amount paid out of the enrollment table the course itself and the total course fee from our three different tables customer enrollment and course we are then linking the related records in each table together using these matched pairs of values that i mentioned earlier in the first case we are linking the customer table to the enrollment table using matched pairs of customer numbers and in the second case were linking the course table to the enrollment table using matched pairs of course numbers what this will do for us is restore the original list of data so you can see our list it contains the customers last name and first name customers phone number the course date the amount that the customer has paid so far the course they are taking and the total course fee now the sql statement that we saw was a select statement and that is a statement which just pulls data from the database there are many other things that we can do with sql like deleting data inserting new data updating data in the database and so forth and we will learn how to do all of those various tasks when we study the structured query language in more depth in a few weeks now i would like to turn our attention to some conceptual information lets focus on a database system its important to remember that a database system is not just the database itself rather it exists in a broader hierarchy which includes users application software programs which rely on the database something called a database management system a dbms and then of course the database itself the broader picture of a database system includes these four components here we see the relationships between the four components of a database system on the far left we see users now users are people just like you or me who might need to use the data in a database but a user doesnt necessarily have to be a human being it is possible for example for other software programs to be users of our database as well now you will see that users interact with database applications these are the programs that rely on the database so if we are a human user we might for example use a website which interacts with a database that website could be considered a database application you will notice that the database application talks to the dbms the dbms the database management system acts as a gatekeeper all of the information flowing in or out of the database must travel through the dbms it is a critical mechanism for maintaining the quality of the data in the database we do not allow our users or our database applications to directly access the data in the database to work with the data to access those data database applications must go through the database management system and then finally far over on the right side of our screen we see the database itself and this is where we actually store the raw data in their separate tables so what do the users of a database system do well they do many different things you and i are users of database systems on almost a daily basis even if we dont realize it so we can look up our checking account balances online we can produce reports we can seek information on wikipedia all of these are examples of us as users interacting with database applications a few interesting things to note about the database itself is that it is a selfdescribing collection of related records what this means is that the database does not just contain the data but it also contains a definition of its own structure databases also contain metadata the simplest way to understand metadata is that metadata are data which describe other data and in the context of the database world metadata are data which describe the structure of the data in the database so for example i may say that an employee table contains an attribute called employee id and that id value is an integer that knowledge that the employee id value is an integer is metadata and of course databases allow us to establish relationships between tables so that means the tables within a database are related to each other according to the relationships that we establish so its important to remember that a database does not just contain the data that we have put into it a database also contains metadata which describe our data it contains or potentially can contain what we might refer to as overhead data these are tables of data that are used to improve performance or track the status of the database or how users are interacting with the database and one of the major types of these overhead data are called indexes later in our course we will examine database indexes and of course databases can also contain application metadata so these are data values that are used by the applications which rely upon the database an application for example might store user preferences in the database now to reiterate a dbms or a database management system serves as a gatekeeper or an intermediary between the database and the applications which rely upon that database the purpose of the dbms is to control and manage the operations of the database the dbms is a special kind of software program which is used to not only create databases but also to process and administer those databases so a dbms is a type of application program but it is not the database the dbms interacts with the database but it itself is not the database what then can a database management system do for us well the answer is it can do many different things as we see here on your screen we can use the dbms to create a new database and then within that database we can create tables and establish relationships between tables we can read write edit and delete data using the dbms we can establish rules which regulate and control the data in the database the dbms provides an additional layer of security for us and it also provides mechanisms through which we can backup our data and recover our data if anything ever goes wrong so the dbms is a very critical piece of software now businesses often operate with many different types of business rules or constraints and one of the great things about working with databases is that the dbms can establish and enforce many different types of constraints one of the most useful types of constraint that a dbms can enforce is called a referential integrity constraint the purpose of a referential integrity constraint is to ensure that values that we are entering in one table have matching values in another table now thats a very abstract way of trying to convey a simple concept as an example imagine that we have a customer table and a project table and we are trying to enter information about a new project in the project table and we specify that the customer id that is associated with this project is customer number 5 referential integrity means that the database will actually check in the customer table to see if customer number 5 exists if customer number 5 does not exist then the database will not allow us to add that customer id to our project table and in this way i hope you can see it helps to maintain the quality of the data in the database what we call data integrity   now the fourth component of our database system were database applications and database applications are simply those software programs that need to use or work with data in the database so these might be data driven websites they might be mobile apps they might be desktop applications or productivity software just remember that these applications are not allowed to talk to or use the database directly but rather they must go through the dbms to work with or use those data finally for this lecture i want to just talk about some of the different types of database systems that are available first we can consider something called a personal database system these are very small databases they are typically used by a single user at a time they are not complicated they are simple in design and theyre not really suitable for supporting medium or large businesses they might be used by very small businesses just out of convenience but as those companies grow they will at some point certainly need to choose a more robust database solution an example of a personal database system might be microsoft access convenient easy to use but not very powerful one of the interesting characteristics of personal database systems is that they often contain the capability to build a database application or at least interfaces to the database within the dbms so in microsoft access for example i can create data entry forms or generate reports for my microsoft access database that is it kind of combines the database application and the database management system into a single entity conceptually speaking on the other hand we have a class of database systems that are called enterpriselevel database systems these are databases that are used by medium and large size companies to support their operations and it is enterpriselevel databases that we will learn to use and interact with in this class compared to personal database systems enterpriselevel databases are designed to support many different users at the same time and this could be thousands or tens of thousands of users all at the same time enterpriselevel databases also serve data to more than one application for example if we are a retailer like target or walmart we may have a database that provides data to our website and also provides data to the dashboards that are used by our managers enterpriselevel databases are commonly spread across multiple physical computing devices so many different computers so a single database might be running on many physical servers enterpriselevel databases can also be geographically distributed so i might have part of my database in my corporate offices in los angeles another part in beijing another part in berlin in germany and enterpriselevel database management systems support more than one database so within the same database management system we might for example have our operational database which allows us to run our business and keep track of transactions in real time and we might also create a data warehouse or data marts and they can all be managed by the same enterpriselevel database management system these are large databases as an example consider an erp system like sap a typical erp implementation will have thousands of tables all related to each other in some way an enterpriselevel database management system can handle this level of complexity with relative ease so here we see a graphical example of these enterpriselevel database systems the dbms again serves as an intermediary or a gatekeeper between the databases and all of the various database applications that want to rely on the data in those databases and they can be mobile applications applications that are written in java or c or even web applications it might be aspnet or php apps just as examples of some commercial dbms products again i mentioned that personal or desktop dbms products might include microsoft access whereas enterpriselevel products include sql server which is what we will be using in this class oracle mysql and db2 mysql if youre interested is a completely free and open source database well my friends thus ends our first lecture for our database class i hope you learned something and come back soon and well begin our exploration of our next topic until then have a great day 