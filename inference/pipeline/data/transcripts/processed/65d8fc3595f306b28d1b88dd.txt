youre new here my name is anar and im a selftaught software developer so in this video im going to talk about moving from quality assurance to software development first i want to go into some reasons why you might want to do this and then ill talk about how you could do this and how i actually did it myself so lets start with the why why do you want to become a software developer there tends to be a perceived prestige with software development some also think that moving from software testing to software development will increase their salaries now these reasons are fairly superficial and if youre considering a move from quality assurance to software development first you need to make sure that youre doing it for the right reason the only reasons you should consider moving into software development is if you either enjoy coding or you enjoy solving problems because thats what your everyday is going to look like if you dont enjoy programming or you dont enjoy solving problems youre not going to be happy and therefore youre not going to excel and become a good software developer and even if you go back to those superficial reasons such as salary youre not actually going to make more money than a good quality assurance professional if youre a bad software developer so lets talk about the how how do you go from qa or software tester to software developer step one is kind of obvious you have to learn to code learn programming basics and programming fundamentals dont do some sort of course on udemy that covers a web framework like react or spring or nodejs pick a simple programming language like python or javascript and learn it to the point where you could write basic scripts with it maybe a program that sums two numbers or gives you a random number every hour something along those lines you want to make sure you understand classes methods functions variables loops those underlying things that are common in most programming languages once you have a basic grasp of a programming language apply it to test automation this is something i did myself i came in as a qa tester to a company that had zero test automation and i essentially started the test automation framework and started building upon it dont be afraid to ask for help i had some developers help me out in the beginning it was a lot to learn and if you have decent coworkers chances are theyll be happy to lend a hand if there already is some sort of test automation setup fantastic take an active role in it contribute to it kind of seek opportunities to actually work on it as you contribute to it more and more as you write more and more test scripts youre going to notice that you get better at programming some things that used to throw you for a loop that used to be confusing they just come naturally now your early quote is going to be bad and thats okay everybody has really bad code in the beginning once you actually get comfortable writing test scripts revisit your old code the really early code where you just started and see what you could make better consistently revisiting your old code is going to build good habits and generally make you a better programmer take that test automation project seriously theres really two ways you could go about it you could just say hey im in qa programming is not my primary job im going to take this script from somewhere i found online copy and paste it maybe change some things and if it works thatll be it if i need to do something similar ill just copy and paste it again while thatll work thats not the attitude you should have if youre planning to move into software development the second way is to take the project seriously to try to apply principles of programming and principles of good code design one of those principles is dry dont repeat yourself which essentially means dont copy and paste any code if you see some code that could be reusable take that code and put it into a function use proper names read up on naming conventions for variables and for functions and basically try your best to write quality code it doesnt have to be perfect but as long as you keep trying and you keep iterating its going to build good habits something thats going to help organize your code very well as well is a design pattern so when i first started writing automated test scripts i followed some blog and my scripts were kind of all over the place later on i had a developer actually help me set the project up so it followed a strict design pattern and it became a lot more manageable i would recommend talking to your software development colleagues this isnt going to take them a lot of time and im sure theyll be happy to help okay so lets say you reach this point where you have this well built out test automation framework you dont really feel like theres much left to learn this passive state youre in now where youre just writing things mechanically because youre familiar with everything that goes into test automation and this is something you dont like then software development is definitely for you this is a typical response from a software developer software developers hate being bored they hate doing mechanical tasks they hate doing the same thing they always chase heart problems or new problems or new technologies the next thing i would recommend you do is build a personal project this actually doesnt have to happen after you master test automation but i think it will help because a lot of the skills will carry over and there will be new things to learn in this personal project so it wont be a complete uphill battle because there will be things youll be able to transfer from the test automation and it wont be boring because there will be all this web stuff that you can now learn so what i did and what i would recommend you do is pick a personal project thats kind of relevant to the application at your work and this is what i mean ill give my work application and the application i built as an example so the application of my workplace is essentially a bunch of charts widgets and visualized data so i also had a bit of an interest in stocks so i decided to build an application that visualizes data for stock prices i created widgets i created charts i also created a database for my application which helped things like usernames passwords and stock symbols i actually really enjoyed this project i got really into it and i added functionality where you could log in and actually buy and trade stocks with made up money this is whats known as paper trading you could open an account save deposit ten thousand dollars but youre not actually depositing anything and then you could search up real stocks and buy real stocks with this made up money then you could log back in the next day or later that day and the widgets would tell you if the stock went up if the stock went down what your portfolio looks like etc a lot of these additional features were implemented just because i wanted to implement them and because i was having fun doing so but the value that this brought was i was able to go to my direct manager and actually show him an application he was pretty impressed that a software tester essentially put together an application that looked a lot like the application we had at our company and as the saying goes a picture is worth a thousand words of course it was much less complex but it looked the part it had charts with very similar looking data plotted on very similar looking charts you were able to log in log out and at the end of the day youre comparing something that was built by somebody just new to programming versus something thats built by something like 20 or 30 software developers so even the fact that there was a bit of a resemblance was impressive to my direct manager and i think this really did play a key role in showing that i could do the job and i was willing and able to actually push myself learn the things that needed to be learned and do the work talking to your manager and just telling him you want to be a software developer might come off like maybe you heard it was cool somewhere or something along those lines but actually putting in the work and presenting it paints a different picture this leads me directly into my next point which is approach your manager express your newfound interest in software development be polite you were hard to be a software tester after all not a software developer continue doing your job and doing your job well show that you are a good employee being demanding and slacking off at this point is only going to make things worse but at the same time make sure you get an answer make sure you get either an answer for when this is going to happen if it is going to happen if it can happen or some sort of action plan which will take you from software tester to software developer if it is expressed that there is no opportunity for you to transition to software development within the company it may be worthwhile looking outside of your company the good news there is you have professional experience programming from building out all the test automation and you have a personal project to showcase your web development skills these two things are going to work in your favor when looking for a job and it will definitely make you a better candidate than when you were first starting off i actually wouldnt shy away from showing off your test automation because software developers actually like testing skills it may sound like a long difficult journey but its well worth it if you enjoyed this video do me a favor click on the like button subscribe to the channel and let me know what you thought in the comments below thatll be all see you next time 