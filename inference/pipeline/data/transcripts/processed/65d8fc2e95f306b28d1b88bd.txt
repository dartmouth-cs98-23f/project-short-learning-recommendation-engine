from akira how the friends today well talk about the implementation of an atom a city and durability in the transaction that means we have described the properties of atomicity and durability now today we will know that how we can implement these two properties in the transaction using some procedures we will discuss the shadow copy as a procedure to implement this two features music atomicity and durability are two inseparable features from each other on which the transaction is built on that means a transaction is performed at all of its entirety or not performed at all that is the atomic feature and the durable feature is the data that we are using for the updation is inconsistent and durable data that means when it will be stored in the disk then it will be affect the update and also the data that we are storing it back to the disk will not lose any of this contents so that is the feature of atomicity and durability now to implement these two features in any of the transactions there are many methods today we will talk about the most simple but also an extreme inefficient method we will go for the inefficiency later but first discuss the procedure of having implemented this atomicity and durability the process is called shadow copy the shadow copy of a database extract if there is any transaction that is taking care of a particular access to a portion on the database then it considered that the database is having only that file on which the transaction is best say for an instance if ti belongs to the transaction part on any fi that belongs to the database db now the transaction ti that is taking care of fi now it will consider that if i for all parts of this tb so now the db is divided into in any area then we can say that if is in part of that area so now we are having a database and a file that is considered to be a part of that database now when the transaction is pointing to this file that means the transaction is accessing this file as a part of its database access so there will be an shadow copy of this file so what is in shadow copy before that we will introduce a term called pointer now our transaction ill have a pointer that is known as a db pointer so now my db pointer will point to the copy that the database the transaction will axis say that the database is considered to be copy the fi so now my fi has the old copy of this database so my db pointer is pointing to the old copy of this database now whenever the transaction needs to access this particular portion fi then what happens it just copy this shadow copy into a new portion now for a transaction this copy will be made entirely to a new file so now a copy of fi will be made so now we have made a new copy now when there is any update or any modification or any access from the transaction to this database then it will be made to this new copy not this shadow copy anymore now it weakens the shadow copy of that database why we are calling this an shadow copy well introduce a little much later now when this new copy is being made all this entirety of the database now the updation or the modification will be made to it and now my db pointer or the database pointer will point to this part of this copy while leaving the database of this old copy as the shadow copy so now my db pointer will point to this new copy instead of this old copy now we can say that when the updation is made to this new copy so we consider it as an updated copy now that if we are having this updated copy so this old copy of database will be deleted and now this one becomes a shadow copy of that database see this one will be deleted as the old copy of database this one is a new copy of the database that will be updated and this one becomes a shadow copy which is just left behind this pointer now what happens and how the transaction is performed to this which can main is atomicity and durability now when the transaction is performing it has started and it gets completed or committed it execution then the new copy of this if i will be made written back to the database on this disk to have affected the transaction is completed by its own so it is supporting this old copy and now as we are maintaining the dba pointer first made and shadow copy and now then the new copy of the updated copy will be written back to the database now in the midst of this transaction if there is any problem then it can get back this old copy which is to be deleted but the shadow copy will remain there too as a part of the durable data that means if the updated copy is lost in that way we can refer to this shadow copy to get reference to the old data so now we are having the shadow copy concept now let us describe the transaction in elaborative leaf for these three cases so now we will consider our db pointer in each of these cases the first year is that the transaction is committed so where my tb pointer will point to it will point to my disk back to the database where it is having the entire database with an updated copy so for the committed transaction db pointer will point to the disk on which the fi is there now in the second case say for instance that the transaction has started but cannot commit its operation so now my tp pointer will point to the shadow copy that is the old copy of the database as we know that the atomic property of a transaction doesnt support any partial commitment of the transaction so now it will not take in consideration the optician it has made to the new copy the db pointer will now point to the original shadow copy now the third cases is divided into two section first ad that commits is made to this new updation but it is not written back to the disk then what happens now in the third case so now my update is on the new copy but not on the disk if i that means the commitment or the log has not been written to the disk so now were my dibby star will point to so according to the atomic nature even if the data is completely updated on to the new copy it will not be back on to the disk then we cannot have the transaction considered as committed until and unless it is written back to the disk using the write ahead logging rule also we will now point to this shadow copy of the database now let us consider the third case on this section two that the update is made on the new copy and the data is ver tritton on the disk copy but the disk is lost then what will happen that we are having the old copy that it is deleted and now the shadow copy that it is pointing to and now the new copy that is being updated is being written to the disk that means the new copy is also we are having so in the shadow copy technique the dp pointer will point to this new copy until on unless were having a final disk copy of that update see the disk has written this update but not the disk is affected on this update so now my db pointer will point to this new copy not the shadow copy now see that the dis written to the disk but as lost so which nature it is satisfying it is satisfying the durability that whoever having this new copy on this disk it can now be taken to another nonvolatile storage of this law step it is performed on this disk copy so now that the shadow copy is being a procedure to provide the first two cases for this atomicity and the third case of this a and because of the durability so now we have implemented that immensity and durability both but the main disadvantage of the shadow copy technique it is extremely inefficient in whatever it is inefficient rather than it is producing an implementation of this atomicity and durability we are considering copying the entire database into as a new copy where the pointer is pointing to because the database is now considered to be the file so now we are having the file as this particular database so we need a larger memory area for each of the transaction that the database pointer will point to and the second one is it will not consider any transaction that is completed on the new copy but not updated on this disk also it is considered as the non commitment of this transaction and point to the shadow copy now the shadow copy itself becomes an redundant storage but the new copy it is being made that means it could have made the update in the shadow copy but then it will not be implemented with this atomicity and durability so now the next bus that we will need to do is this term next expensive and also some more efficient data storage mechanism so that we can implement this atomicity in a much more efficient way shadow copy is generally considered big very popular in a smaller database but for a larger database where we need to store every file in the database and for small portion of the file we need to restore the database at its entirety will become a difficult task for us so that is all for implementing atomicity and durability using this shadow copy technique thank you for watching this video stay tuned with akira and subscribe to akira 