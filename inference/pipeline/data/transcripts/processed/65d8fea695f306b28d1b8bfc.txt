to make a simple 3d blender step by step the renderer will be capable of rendering any 3d vertex and rotating it along x and y axis this video will not be very technical i will try my best to make this topic as simple as possible ill be using c plus plus and sdl library to handle window and drawing 2d lines but you can follow along in any language you want i actually made the same 3d renderer in scratch back when we had online school and i had really too much free time so its really pretty simple the first problem that we have to tackle is how do we take a 3d object and smash it onto a 2d screen the way we do that is via weak perspective projection now this perspective despite its name is pretty powerful basically we can take a number called vocal length or fov and use this formula to get projected x when given x and z we can do the same for y but how does this formula work alright so to explain how this equation works we have our camera we have this some distance from this camera to the screen which is called fov in my code or it can just be called focal length most people call it that and we have this point that we want to render so we want to render it over here as the projections work so what we do is we can draw a cool triangle like that and this is x this is x this is the distance from our point to the camera in the xaxis this is z this is our fov this combined is of course fov plus z this is our project attacks so the thing that were looking for and with that we have basically two triangles and these triangles are basically similar which means that theyre just scaled versions of each other and the ratios of their sides are the same so we can write this as a equation so this equals x divided by fov plus z we can multiply both sides by fov who got p x equals x times f o v divided by f o v plus z which is exactly what were looking for now this is cool but there is no way to get that rotating effect with this fortunately theres such thing called rotation matrix now this is some fancy map you basically give it numbers x y z and multiply the matrices to get the rotated chords now i would do a video about how to multiply matrices but i think its beyond the scope of this video if you want to learn that im going to link some resources down below but basically we can just simplify this form to something a lot more codable uh lets say so this will be actually x y cosine of theta minus z sine of theta and z sign of theta ma plus cosine of theta and this is our final matrix now this can be done for every single of these rotation matrices and well just get the simplified form that we could put into our code and have that basically done all right so we are in our code base and we first think you see is we are using sdl which is the library that will help me basically draw to the window its not a 3d library so theres nothing helpful in that we just drop to the window which is cool and we have our included our renderer so first thing we do is define some points and vertices now basically what this means is we have a point at this coordinate at this coordinate and so on and we have a vertex between those so we have between point zero and 01 between 02 and 05 05 is here by the way but okay so this is very cool because it allows us to get this done we can define some other things like thingy which is a terrible comment by the way uh and pyramid but i decided to go with cube for this presentation uh so first things first we define some window by using sdl we call it 3d renderer and we basically have the size and its pretty simple you dont got to understand that its just creating a window and renderer then we set running to true and we have a loop while running we also have this renderer where we pass our points and our vertices and we have that all set here and if we request quit so we basically click this we break the loop and say running is false and then we just render so lets actually go to our dot h file of render 3d here we define subtracts that you might be might have been confused because i didnt explain them here but we have uh point 3d which is basically just a point there is point 2d which is used to exploit the screen space and vertex switch has a start at the end which basically uses these points as indexes to we have some private variables like rotation which is how rotated we are we have fov which is explained it delta time which is just used to have the frame independent timing and some window size because we want this to be centered and renderer uh the actual brother that we passed through and points and vertices lets go in here we first of all construct our class and then we measure time which is useful because we want basically frame independent timing uh which basically means that we want to rotate once per second for example not once per 60 frames because 60 frames may go in one second may go in uh point zero second point zero yeah point zero zero one second so we dont want that uh we uh set the render color to zero and clear the window so basically uh set the widow to black we then switch to white and rotate our cube a little bit but thats beside the point then we go through every vertex using this auto for loop and uh we take a starting point uh from points rotated rotated y rotated x and save the rotated point into a point 3d type we do the same for endpoint and then we convert them using projection function into point 2d and do the same for the end point and then we just drop the line so lets actually go into protection function now this should look familiar if we actually delete these times 100 its pretty familiar this is just used so we can have this in the middle of the screen and this is used because we actually have negative one and we dont want this to be across one pixel we want it to be 100 pixels wide yeah 200 actually uh this is basically this function its all what ive shown really rotate x is exactly what ive shown uh in the last paint explanation kind of thing its exactly the same and uh we do brought it y also which is youre just gonna have to trust me that it works because well it does and and yeah thats the code so we can run it and it works flawlessly its very nice cube that rotates its very cool so yeah i would really appreciate if you could subscribe because this is my first video and uh yeah thanks for watching basically bye 