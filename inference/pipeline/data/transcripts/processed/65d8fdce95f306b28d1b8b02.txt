or science do you know why there are 2 main reasons for this one engineers can generally think logically two engineers are good at math one of the major reasons i was able to get a job at google without a computer science degree is because i am above average at math now i can not teach you all the math i know in a short video you anyway don’t need most of it to become a programmer let me do this i’ll share 5 essential math skills that will get you 80 there the rest of 20 you can learn on the go as you encounter new problems but why do programmers even need math imagine that you are a software engineer at google and you are given a critical problem to solve many google users are not able to access the website because of an overloaded server this problem is getting worse with every passing minute because the client side is configured to do an automatic retry after one second for every failed call you talk to a senior engineer on your team and she recommends using “exponential backoff” for retries what does “exponential” mean you ask her she points you to the documentation if your basic math skills are not good it might take you a long time to understand and implement the “exponential” piece of the algorithm even after reading the documentation and in the meantime the entire internet traffic will see a huge drop because for many people no google means no internet now if that example doesn’t convince you heres an even more important reason to learn math most tech companies conduct coding interviews to see if you are a good fit for the role and whether you like it or not they ask algorithmic style questions in these interviews at the end of the interview the interviewer usually asks you the time and space complexity of your solution in order to answer these questions and actually get the job you need to know some basic math concepts many people who come from noncs and nonengineering backgrounds have a hard time answering these questions so i have chosen the top 5 math skills for today keeping these interviews in mind now i know that there’s a sizable number of you who pretty much hate coding interviews and don’t want to go through them and i completely respect your position but for the vast majority of us we don’t have the luxury to give up on our dreams just because we dont like one step of the process this video is for those people let’s learn some math to learn the first concept we need to start with an exercise here a piece of code that contains a for loop nested inside another for loop what is the time complexity of this code in other words how many times would this code print “hello world” for any arbitrary value of n this video is going to be interactive so you can pause this video and leave the answer in the comments if your answer is on2 or n2 times then you would benefit a lot from what i am about to tell you most people who answer n2 do it because they confuse the code i gave you with this other piece of code they see a nested for loop inside another and immediately jump to the n2 which is the wrong answer in this case to understand why that is let’s think from the first principles looking at the code it’s obvious that the outside for loop runs n times each time this outside loop runs we go inside and run this nested loop k times we don’t know what that k is at this time but we will find that out shortly so we print a total of k “hello world” statements everytime we go inside the outer “for loop” which itself happens n times so in total we print kn “hello world” statements now if you look at this other easier and more popular piece of code the internal loop also runs n times so kn in this case is equal to n2 but that’s not the case in the code i gave you what i want you to take away from this is that whenever you have a that happens x times and whenever a happens b happens y times b will happen a total of xy times now to know the value of k in the last exercise we need to know the second concept so here is a question for you you are given a stick that is 32 meters in length you break it into 2 halves you throw the right piece away and break the left piece into 2 halves again you throw away the right half and keep breaking the left piece until you have a stick of length 1m left how many times did you break the stick in total you can pause the video and leave the answer down below if you answered 5 then you are right here’s an interesting observation about the answer if you take 2 which is the number of pieces you break stick into every time and you take 5 which is your answer and you multiply 2 to itself 5 times you get 32 which is the original length of the stick in other words 2 to the power of 5 is 32 whenever you have an equation like this 5 is called logarithm of 32 technically it’s logarithm to the base 2 but in computer science people usually think in terms of logarithm to the base 2 so we can just call it logarithm or log here for our purpose but it’s important to know that in math people usually mean logarithm to base 10 when they say log i recommend you to read a little bit more about logarithm on your own anyway in the generic case if 2 to the power x is n then x is called the logarithm of n so in the stick example you broke the stick a total of log32 times which is 5  going back to the example with 2 for loops if you look closely at the internal for loop it does exactly the opposite of the stick breaking example you start with a stick of length 1 when you do j  j2 or in other words double the length you are bringing a stick of the same length from somewhere and you are attaching it to the original stick and you keep doing it until you reach the length n so how many times do you have to double the length of the stick this way until you reach the length of n looking at stick example i gave you it’s going to be logn and that’s the k we were looking for so the total number of times you print “hello world” in this case is nk which is nlogn if you have some experience with algorithms i’m sure you already seen that the stick breaking example is very similar to binary search algorithm logarithm also appears in some other algorithms like sorting  and some heap related problems before i can explain what exponential means in “exponential backoff” we have to understand the third concept of the day for that i have another question for you how many 3 digit numbers can you make by using digits 12 and 3 given that you can use each digit only once you can pause the video and leave the answer in the comments if you answered 6 then you are right but what if i asked the same question for 9 digit numbers using digits 1 to 9 without repetition to answer this question you would need to know what a factorial is let’s see what factorial is using the 3 digit problem we will call first digit a second one b and the third one c let’s pick the first digit of this number for that we can use any digit from 1 2 and 3 so we have 3 options here let’s say we pick 2 here for the second digit we have only 2 options left because we can use one digit only once let’s say we pick 3 for the second digit now for the last digit we have only one option left which is 1 so a can have 3 values for each a b can have 2 values and for each b c can have 1 value can you see that we can use the first concept that we learnt today here so the total 3 digit numbers would be a multiplication of 3 2 and 1 which is 6 for a 9 digit number using digits 1 to 9 the answer would be the multiplication of all the numbers from 1 to 9 and this multiplication is called 9 factorial and is written like this factorial is nothing but a multiplication of all numbers from 1 to that number including the number itself factorial appears in many algorithms like finding subsets of a set and permutations of numbers etc now that we have that out of the way let’s talk about the fourth concept which is “exponentials” for that we need to go back to the 3 digit numbers example let me change the question a little bit for you how many 3 digit numbers can you make using 1 2 and 3 if you can use a digit more than once i would love to see your answer in the comments if we go back to the example i gave for the factorials you will see that now we have 3 options for a b and c and that’s why total such 3 digit numbers now would be 3 into 3 into 3 which is 3 to the power 3 and this is called exponentiation or exponential let’s try to understand exponential backoff based on what we know now in the “exponential backoff” algorithm you will do the first retry for the failed request after x seconds if the request fails again you increase the wait time for retry by let’s say 2 times if it fails again you increase the wait time 2 times again and you keep doing it if you look closely the wait time for retrying the failed request is increasing exponentially here hence the name “exponential backoff” one of the main characteristics of something that is exponential is that it increases or decreases really fast for example the spread of covid was exponential because one person can infect let’s say 3 people each of those 3 infect 3 more and so on exponential growth is a powerful concept for life in general and it can be life changing for new programmers that’s because in the beginning most programmers have this nagging feeling that they are not growing fast enough many get demotivated and give up as a result but here’s a graph showing the power of exponentiation from the book atomic habits by james clear if you just improve 1 percent each day for 365 days you will be 38 times better at the end of the year and if you build bad habits and become just 1 worse each day you will lose 97 of what you have today in one year that’s exponentiation in action for you my friend another concept you need to know about is modulus for positive numbers modulus or mode is the same as what you would normally call remainder in division of 2 numbers modulus operator is written as a percentage sign so 27 mod 5 is 2 which is the same as the remainder when you divide 27 by 5 for negative numbers there’s a small difference between mod and remainder which i recommend you read up yourself some popular interview problems that use mod are “find greatest common divisor of 2 numbers” and “fizzbuzz” so now you know the math you need to become a programmer next you need a simple well defined step by step path to learn programming if you want to know the path that i recommend watch this video my name is sahil and i will see you in the next one 