the modern databases we know and love from mysql to redis to cassandra   we break down the 8 essential data  structures that make it all possible let’s dive right in first up is the skip list a skip list is a probabilistic data structure  that is used to implement a sorted map or set it is an alternative to a balanced tree this allows for efficient search  insertion and deletion operations in an inmemory database like  redis a skip list is used to   implement the ordered data structures  such as sorted sets and sorted lists it allows for fast lookups range  queries and other operations next is the hash index a hash index also known as a hash  table is used to efficiently map   keys to values by using a hash function  to generate a hash value for each key the hash value is used to quickly  locate the value in the table   allowing for fast lookups  insertions and deletions a hash index is ubiquitous it is obviously used to implement  hash data structures like hashes   in redis but it is also widely used  internally in all kinds of databases the next two data structures go hand in hand they are sstable and lsm tree sstable or sorted strings table is used  to store data on disk in sorted order it is a filebased data structure that  is used to store large amounts of data   in a highly compressed and efficient format sstable is a core component of the lsm tree the other core component is a memtable memtable is an inmemory data  structure that stores recent writes sstable and memtable work together to  handle a high volume of write operations we have an entire video dedicated to the lsm tree check out the description  below for a link to that video lsmtree is the backbone  of popular nosql databases   such as apache cassandra rocksdb and leveldb next up is the btree family we include the btree in this the btree family of data structures is used to   efficiently store and retrieve  large amounts of data on disk btree is a balanced tree where each node can  have multiple children and keeps data sorted b tree is a specific type of btree where all   data is stored in leaf nodes and  internal nodes only hold keys they are widely used in databases such as mysql   postgres and oracle to handle  large amounts of ondisk data next is an inverted index an inverted index is used to efficiently search   and retrieve data from a large  collection of text documents it creates a mapping of words to  the documents in which they appear the index is inverted because it  maps the words to the documents   rather than the other way around inverted indexes are commonly used in  document search engines like elasticsearch next one is the suffix tree it is used in databases for  efficient text searching it quickly finds all occurrences of a search  term within a large collection of documents the last data structure we’ll  discuss is somewhat specialized it is an rtree an rtree is a spatial index data  structure that organizes data based   on their geometric boundaries  such as rectangles or polygons it is used to efficiently store and  retrieve spatial data in a database it allows for fast spatial queries and is   widely used in spatial databases like  postgis mongodb and elasticsearch this concludes our discussion of the 8 data  structures that power modern databases this is by no means an exhaustive list please let us know if there are others you  would like us to discuss in the future if you like our videos you may like our  weekly system design newsletter as well it covers topics and trends in largescale  system design and is trusted by 200000 readers subscribe at blogbytebytegocom 