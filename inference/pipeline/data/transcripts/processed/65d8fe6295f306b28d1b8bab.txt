welcome to what i hope is the first of many ai related videos on this channel if youre curious about building your own ai powered applications but dont know where to start let me tell you youre not alone ai powered apps are all the reach these days but getting started can seem overwhelming that is where i come in this video im going to show you how to use the open ai api to build a vanilla javascript app that responds to your prompts think of it as a very simple ai assistant this video will provide you with a solid foundation to kickstart your journey in building your own ai powered applications the first step to working with open ai api is to obtain an epi key if you havent already head to platformopenaicom sign up and create an account once youre logged in go to your profile view api keys and create a new secret key give it a name and click on create secret key make sure to copy and securely store this api key as it will be required for accessing open ais api services once you have your api key for step 2 in vs code create a folder called ai javascript and within this folder create an indexhtml file and an indexjs file the html file will contain the html and css for our application while a javascript file will contain the functions to communicate with the openai api and update the ui with the fetched response next for step 3 lets build the user interface for the application since html and css are technologies we are familiar with i am going to copy paste the necessary code to save us some time please take a look at the link in the pinned comment if you want to pause the video and do the same now the ui is built using html and tailwind css but please feel free to use a styling solution of your choice you can write simple css classes or use something like bootstrap completely up to you but let me walk you through a few parts in the code of copy pasted in the head section we link to the table in css cdn and indexjs in the body section we have a title that says streaming openai completions in javascript an input element to accept the users prompt a button to start generating the ai response and a button to stop the generation process above the input element we have an empty section where the content retrieved from the api will be populated the section has an id of result text now please make a note that cdntailwindcsscom should not be used in production but is suitable for quick prototyping like our ai assistant app moving on to step 4 lets start our application by setting up a dev server if youre using vs code you can install the live server extension which will allow you to open the html file with a live server so go to extensions search for live server and install it after installation simply right click the html file and select open with live server you should now be able to view the ui without any issues we have the title a label that says generated text empty space where the ai response will be populated an input for the prompt a generate and a stop button now you might be wondering why we need a dev server instead of just double clicking on the html file to open it in the browser the reason is that fetch requests which we will be using in our javascript file do not work with the file protocol due to security restrictions therefore having a dev server is essential to properly run our application now that we have the html in place lets proceed with the javascript code for step 5 lets start by defining constants for openai api endpoint and the key const api key is equal to a string and we paste in the key that we created a few minutes ago the api endpoint you can find under api reference chat under the heading create chart completion copy and paste it again i want to reiterate that you should generate your own api key as the one shown in this video will not work for you for step 6 query the dom elements and get hold of the prompt input the generate and stop buttons and the result section the const prompt input is equal to documentgetelementbyid and the id of the input is prompt input similarly we have generate button with the same id stop button with the same id and result text with the same id the ids correspond to the id attribute of all the html elements for step 7 handle the click and enter events to submit the prompt to the chat api so generate button dot add event listener the event is click and were going to call a function called generate similarly prompt input dot add event listener the event is key up we specify a callback function and if event dot key is equal to enter recall the generate function the open ai completion request should be triggered on click of the generate button or when the user presses the enter key when the prompt input is in focus we execute a function called generate which we will define next for step 8 we will write the crux of this application we will define the generate function which will establish a connection with the openai api endpoint and generate a completion for the given prompt input value const generate and this is an async function within the function were going to begin with a try catch block within the try block we begin by making a fetch request to the open ai api endpoint the const response is equal to a weight fetch the first argument is the epi url which is our constant the second argument is the options object we specify method as post headers which is an object with content type set to application slash json and authorization set to bearer followed by the api key again a constant without this the request will fail the final option we specify the body of the post request we set this to json dot stringify an object an object contains model which is going to be gpt 35 turbo and the prompt message that needs to be sent to open ai for completion the format for specifying the prompt is as follows array with an object rule is the key set to user and content is the key set to prompt input dot value prompt input is our text field this code will fetch the completion for the given prompt lets convert the response into a json format const data is equal to a weight response dot json lets log data to the console for the catch block we receive error as parameter and we log it to the console im going to move the event listeners to the bottom lets head to the browser and test this out you can enter any prompt you want to but i am going to keep it simple for the demo my prompt is three word sentence click generate and we see the data logged in the console the completion itself though is nested deep inside the object within data we have choices which is an array of objects at zeroth position we have an object with a message property this is an object with a content property and this content is the completion from open ai api lets log it to the console instead of data so data dot choices of zero dot message dot content lets head to the browser and test this out the prompt is three word sentence im going to press enter this time and we have the response i am here of course you might see a different response but that completes step number eight for step 9 lets update the ui with the response to display the completion in the ui we need to assign this log statement value to the inner text of the result element so result text dot inner text is equal to data dot choices of 0 dot message dot content lets head to the browser and test this out once again three word sentence is the prompt click on generate and this time we see the response in the ui i am busy we have successfully integrated the open ai api but we are not quite done for the 10th and final step lets improve the user experience of our tiny assistant first if no prompt has been filled in by the user we dont make the open ai api call so if there is no prompt input dot value lets alert please enter a prompt and return next when the fetch request is in progress lets disable the generate button and add a loading text to indicate the fetch request is being processed so generate button dot disabled is equal to true so we disable the generate button and we update the result text to the string generating for the next improvement lets display an error message to the user if there was an error in our try block so within the catch block result text dot inner text is equal to error occurred while generating finally irrespective of try or catch block being executed we need to enable the generate button disabled is equal to false lets head to the browser and test this out this time im going to enter the prompt 20 word sentence i want you to closely observe the generating text indicator in the result section as well as the generate button being disabled click generate and we see the button is disabled the loading indicator was also displayed well the completion was being fetched we have our chat completion also working as expected so these are the 10 steps you need to integrate the open ai api in a vanilla javascript project to summarize fill the ui to accept a prompt make a post request using that prompt to the chat completion endpoint update the ui with the received completion these are the steps to get started with open ai in javascript at this point im guessing you might have a couple of questions first you might be wondering about the title streaming open ai completions second you might be wondering about the stop button what exactly is its purpose third you might have noticed that the completion process takes a bit of time especially for longer completions and is not as fast as chat gpd completions now these are great questions to address in part two of this topic on the openai api in vanilla javascript join me in the next video where we will learn how to stream openai completions similar to chat gpd and implement the stop button functionality to build out from a completion thank you for watching and please do consider subscribing to the channel for more beginner friendly content on ai ill see you in the next one 