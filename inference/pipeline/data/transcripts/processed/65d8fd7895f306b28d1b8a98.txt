walk through a highlevel explanation of database architecture understanding the underlying logic and concepts behind database management really makes it easier to understand the more technical aspects of erd further down the road so let’s say you were opening your own online store for something like specialty cat accessories and you want to be able to keep track of all sorts of information surrounding your sales most people would just open up a spreadsheet and start putting in things as orders come in maybe it’d look like this mary’s our customer she buys a cat leash and you capture all this information and you just record this information for each of your customers that trickle in but maybe later mary buys something else like 3 cat leashes and at this point she’s moved to a bigger place to have room for all her cats so her address is different now you’ve got redundant information some contradicting values for your customer’s addressand if your specialty cat store got enormously popular these issues would just escalate mary calls to ask about one of her orders and when you pull up her information you get 3 different addresses all these disorganized ordersand you’re not even sure you’re looking at the correct customer because there are 3 different mary johnsons in your spreadsheet you could see how this might lead to a messy situation shipments could get sent to the wrong place customers might get mixed up the wrong products could get sent to the wrong people so how would you resolve this instead of having just one massive spreadsheet you’d separate the information into different bitesized tables so with our cat store for example you might start by creating a table that lists out all your customers then a separate table that lists out all your products and then another table the records each of your orders this separates the data you’re pulling in in a much more efficient way so here’s what your customer table might look like you can see we’ve got mary again but now she won’t be repeated into several different rows any change to her address contact info or even name can be updated in this one consolidated place the product table would have all your cat accessory inventory as you add or remove items this would be the one place where you’d make those changes and orders would keep track of every single sale you make now these tables although separate have connections to one another and this is what forms a database so let’s take a look at what this interaction might look like we’ll start in the customer table let’s say someone goes to our online store and makes a purchase it’s a guy named ronald and he’s in the market for a cat costume and buys one from our store when he checked out he entered all his contact info and we’ve recorded it in this customer table and assigned him a customer id let’s move over to the product table this lists all our inventory and here’s the cat costume he wanted we keep track of it with a few fields here like product id quantity in stock and product type and then when ronald actually ordered the cat costume we record that specific purchase information in the order table here you can see we pulled in the customer id from the customer table so we know it’s ronald we also pulled in the product id from the product table so we know that he purchased this cat costume and there’s other data in here that tells us about the date of the sale shipping address quantity etc it’s pretty obvious that this system is far more organized than our single spreadsheet from earlier that’s why you want to create different tables and connect them within a database but database management systems typically don’t give you the best options for visualizing those connections it’s all in the programming language and it’s hard to see where the connections are and where improvements can be made that’s where entity relationship diagrams come in it’s a visual way of looking at your database structure each table translates into an entity and your column categories like customer name address purchase date etc are listed as attributes in their respective entity finally the programmed connections between your tables like how ronald’s order referenced a specific product id and his customer idthose are visualized through relationship lines so imagine if your database was far more fleshed out than our simple example like if you had separate tables for shipping address billing addresses credit cards shipping info etc trying to make sense of a large database when you’re in the database can be very taxing it’s much easier to visualize it through an erd and that’s a super fast process with lucidchart’s erd import tool just run a query of your database and lucidchart automatically imports the tables that you can then drag out as entity shapes and the relationships between entities automatically connect as well so you quickly create a visual representation of your database and then it’s so much easier to spot database errors you can see where you’re getting duplicate data and it’s way easier to onboard someone who’s new to your database they can look at an erd and see how the whole thing works on the flip side let’s say you don’t have an existing database you’re starting from scratch and want to build onewell erd is a great tool for concepting you’ve got an idea for how your database is going to work and you flesh it all out in a diagram and the awesome thing is that when you’re done concepting the diagram itself can be translated into the code that forms the actual database you don’t have to manually recreate your concept in database form the entities automatically transform into tables the attributes to columns in those tables and your relationships get translated into coded connections hopefully this gave you a bit more context as to why we use databases and how they relate to entity relationship diagrams if you want to learn more about erd click over here our tutorials cover entities attributes cardinality primary and foreign keys and much more and click here to start making your own er diagrams today 