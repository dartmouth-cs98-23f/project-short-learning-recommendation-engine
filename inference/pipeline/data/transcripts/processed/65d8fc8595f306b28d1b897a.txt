depthfirst search in this video i will cover these two traversal methods by taking various examples well for such an effort search our graph traversal methods so well understand quickly the difference between them throw this a small example then afterward ill take another example and i will explain you in detail now for quick understanding i have taken a simple graph actually its a tree but a tree is also a graph so let us see so for traversal both of these traversal we have to know these two terms now for understanding these traversals we should know two terms one is visiting a vertex means going on a particular vertex second irmas exploration of vertex exploration means if i am on sub particular vertex then visiting all its adjacent vertices is called as exploration so based on these two terms we can understand traversals so first i will explain in breadth first search see i am selecting vertex one as the starting vertex to find out breadthfirst search we can select any vertex as a starting vertex now vertex one i will visit the vertex one now once the vertex is visited this word is i will start exploring means i will visit all adjacent vertices so who are those five four and two in which order i can visit i can visit them in any order so okay i will take two first then four then five next i should select the next vertex for exploration so these are already visited vertices after one i have a set at two four five then i should explore explore what i will explode  so who are a listen to two adjacent to two or seven six three in which order you can take you can take them in any order 7 then three then six in any order you can take thats all all the verses are visited and there is no vertex remaining for exploration this is breadthfirst search now let us look at depth first ill start from vertex one then from one i have stowed start its exploration so i will go to vertex two  now who are other adjacent vertices four and five no dont visit them you have reached a new vertex so you start exploring that vertex okay ill start excluding  then who are adjacent to this seven six and three so i want to go to three okay go to three then shall i use it six and seven also known this is that first search start exploring three so if i start exploring three there is nothing connected to three okay so it means three is a completely explored then come back and then continue the exploration of  so who are there six explore six nothing is there come back go to seven explore seven visit seven explore 7 there is nothing so come back to one now and continue the exploration of one who are adjacent to it for visit fool and explore for there is nothing come back then go to five five no in this way all are explored so the traverse cells are different results are different so in breadth first search we will explore a vertex then we go to the next vertex for exploration but in depth first search once we extracted exploring once you visited a new vertex we will suspend this vertex and start its exploration so from one we got two so we started exploring  then from  we went on three so well start exploring three like this so when the first search approach is different and breadth for such a process is different so ill take one more example and explain you what is the difference between that first search and depthfirst search with a simple example one more example let us find breadthfirst search actually this is a binary tree tree is also a graph so let us perform for search and see so as per binary tree i will perform level order 1 then 2 3 then 4 5 6 7 4 5 6 7 this is breadthfirst search means breakfast surges just like a level order on a binary tree then what is the depthfirst search visit one ok explorer 1 so he got two so stop exploring one and start exploring two so four stop exploring two and continuing exploration of four there is nothing so go back and come to five now nothing is remaining so go back to one and come on this side then six and then go back and seven so this is like preorder so that first search is just like level order and depthfirst search is just like preorder traversal of a graph i have taken a bigger graph now we will learn about bid for search and the first search in detail first of all breadthfirst search for performing grid first search i will take one data structure that is q i have taken a cue now ill explain you initial step then i will explain you repeating step so what is the initial step start exploration from any one of the vertex so which what x i should select as a starting vertex for that for search you can select any what else you like so i will select vertex one so in the answer you show it one in the graph you draw here again then add it to q this is the first step initial step now we will perform repeating steps so what are those repeating steps take all the vertex from q and start exploring it so what x 1 who are adjacent to 1 4  2 so explore them so first i want to visit for okay add it to result and also add it to q next to go to to okay added to result and also added to queue no one is completely explored there is no urges on vertex remaining for vertex one this is first iteration completed now repeat the procedure what to do next select next vertex for exploration from queue that is for start exploring for so whose at this into four three so i am drawing it like a tree here so three is adjacent so add it to queue any other adjacent for for nothing is adjacent for four so four is completely explored now select next vertex for exploration that is two who are adjacent to two three five seven eight i can visit them in any order if i check three its already explored so then i will prefer going on five first so five five next i want to go on eight okay eight so eight and eight next i will go on seven so seven and at seven here not two is a completely explored now select next vertex for exploration who is that three is there any at this one over this is for three yes to eight nine and ten so two is already visited so first i will take ten ten ten and then nine nine added to queue completed three is completely explored now select next vertex for exploration five anybody had just sent to five yes eight and seven and six so eight or the d visited seven already visited 6 this is 6 so 6 and 6 5 is completely explored select the next vertex for exploration 8 who is adjacent to 8 2 and 7  actually we came from there 7 lloyd dotted line so vertex which is already visited we are drawing a dotted line then next vertex for exploration 7 7 is already explored so is there anything remaining four seven no ten there is nothing nearer to ten no nothing i just said to ten there is nothing as at the same to nine and there is nothing at the same to 6 so thats all this is breadthfirst search completed and the tea that we got here is breadthfirst search spanning tree dotted edges that we got here they are called as cross edges they are called as cross edges let us see what are the things that we have learned first thing as you can start breadth first search from any vertex you like first point second thing is when you are exploring any vertex 1 then you can visit the suggestion vertices in any order you like this or the second thing then both are leniency is given freedom is given to select any vertex then what is the rule here rule is when you are selecting a vertex for exploration you must visit all its adjacent vertices then only you should go to next vertex for exploration so it if i am exploring one then i should explicit a for as well as two then only i should sell it for for exploration this is the rule the next thing is last thing is you should select our next vertex for exploration from q only so q and exploration should be completely done these are the two important points about that first search you follow this one then you can get many answers i will write few more valid breadth first search is here first one ill start from vertex one that is explore the adjacent vertices so first ill explode two then four then i have to start exploring two because i have added to first so who are at this into two so i will take eight then five and seven then these are addison to to all these are a different   then i should explore which one for so water just sent two for three solid over then explore eight who is adjacent to eight five and seven both are visited now explore 7 so this is six now explore three so ten and nine so ten and nine this is one also this one is also a valid answer then one more ill start exploration from five from five who are adjacent to eight seven and six now explore two who are resistant 2 to 3 and 1 now explore 8 7 is already visited 7 everything is visited 6 and nothing is there so everything is visited explore 3 so 9  10  4 so 4 3 9 10 and 4 i have visited 9 explore one nothing is remaining nine ten for not all are visited so this is also valid so like this you can start from any vertex and you can visit the adjacent in any order so you can form numerous number of valid breadthfirst search next we will see depthfirst search now next is depthfirst search for this i will take a stack stack as a data structure used here let us start i can start the traversal from any vertex highlight so i want to start from vertex one so one is visited this is the initial step now the repeating step what i have to do every time as this new vertex is visited start exploring it so or adjacent to that four and two so visit four four four now the role in the first searches once you have visited one vertex still one more is remaining leave that we will see it afterwards first you start exploring four so this is the rule so once you have reached a new vertex start exploring that new vortex what about that one suspend it and keep it in the stable we can explore it later now start exploring for so from four i can go on three so they go to three three is visited now what to do suspend for and start exploring three from three i can go on ten so ten suspend trees start exploring ten there is no adjacent vertex of ten so go back to three so how to know i wait i have to go back this stack will give me their value so this three continue exploring three so i can go on nine 9 and again suspend tree and start exploring 9 from nyla cannot go anywhere then go back to 3 and start exploring 3 so who is the descent to 3 2 so 2 is visited then from 2 whose adjacent suspended to and start exploring two so from 2 8 is addison so take 8 now start exploring 8 so from there i can go on 7 so suspend 8 so 7 is visited now we have to explore 7 from 7 i can go on 5 so 5 is newly visited now we have to start exploring phi so suspend seven and push it into the stack then from 5 who is adjacent 6 so visit six suspend 5 and continued exploration of 6 there is nothing at the same to 6 so go back to 5 from 5 where i can go further so i can visit 2 which is already completed right i can visit 8 which is already completed so there is nothing remaining 4 5 so what happens in this way is we are going deep and deep right so in this way almost all vertices are visited only they are completely explored so 5 is completely explored go back to the previous vertex who is that 7 7 from 7 very can go from 7 they can one two which is already visited then go back to eight from eight nothing is remaining so from to where i can go i can go to one right then nothing is remaining so go back before from four i cannot go anywhere from three one i cannot use it anywhere so thats all right so here is the defer search traversal result and this is a dfs spanning tree this is depth full search spanning tree and these are just are called as back edges so for this graph we can make a tree like and perform preorder so this is the preorder of disa tree c14 310 then nine then two eight seven five six one four three nine eight two so nine two eight seven five six so this is like preorder traversal no i will write few more valid depthfirst search directly looking into the graph ill start from vertex 1 1 this is the first one from 1 i will go to tea from  ill go to 8 from 8 i will go to 7th from 7 and go to 5 then 6 from 6 i cannot go anywhere come back to 5 2 is already completed 7 also completed so what was the route i have taken so come back to 7 7 is completely explore come back to 8 nothing remaining come back to 2 so from  ill go 2 3 then 9 nothing is there come back and go to 10 then go back to 3 and go to 4 then one is already explode so return back before then 3 then 2 then 1 finished so this is one answer then one more ill show ill start vortex train first is three then ill use it to fool than 1 then 2 then 5 then 6 from 6 and 8 cannot go anywhere come back to 5 come back to 5 and go to 7 then 8 right from 8 and im back on to what is already over so simply go back to seven then five then come back to 2 then 2 from there i have already gone to 1 1 is already completed right so come back to 4 then come back to 3 so from 3 who are remaining 10 and 9 so 10 then 9 this is also valid so you can start from any vertex you like and you can visit any neighboring vertex but only thing is once you have visited a new vertex suspend the exploration of current vertex and start exploring new vortex thats all about the first search and breadthfirst search and the time complexity of both these methods is order of n and this number of vertices 