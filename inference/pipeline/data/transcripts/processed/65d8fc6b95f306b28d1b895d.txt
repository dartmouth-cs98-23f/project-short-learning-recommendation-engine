into the vast and incredibly interesting field of graph theory from a computer science perspective heres an example of a type of graph that were going to talk about extensively in this video if you were to ask me whats the simplest definition of a graph for someone who knows nothing about the field what i could tell you is that you can think of a graph as a network that helps define and visualize relationships between various components in this example the circles that you see represent the components and the lines connecting them can be thought of as signifying a relationship between the components these ideas of course have more formal names in graph theory we refer to these circles as vertices or nodes and the relationships signified by connecting lines represent what we call edges in a graph graph theory is all about the study of the properties of these types of networks and how they can be used to model and solve a whole host of interesting problems this video is all about introducing you to core concepts related to graph theory that we will then use to study fundamental graph algorithms well first start with an important discussion on why we should even care about studying graphs after which well formally define a graph and introduce important terminology used to communicate ideas about graphs then well talk about how computers might represent graphs as a data structure and then ill finish the video off with some interesting problems and questions around graphs that you can think about going forward lets first start with the most important question why should we care about graph theory and the short answer to this is graphs show up everywhere sometimes in expected ways and also sometimes in surprising ways one of the most direct applications are mapping and navigation applications in any of these applications you often deal with roads and intersections which can be naturally modeled as a graph where each vertex represents an intersection and the edge between vertices signify the roads between intersections you could imagine navigation applications might be interested in the best route between a starting point and an ending point and this problem naturally translates into many wellknown graph theory problems another natural application of graphs is in social networks in the context of this application imagine edges of a graph now represent friendships between people in a network where each node now represents an individual suppose you are interested in recommending new friends to person a who currently has four friends a natural way to solve this problem is to look at all of person as friends find friends of these friends and recommend them these types of problems are easily modeled and solved with graph theory so these are examples of applications where its honestly not too surprising that something like graph theory shows up but the neat thing about graph theory is that it also find ways to show up in the most unexpected places lets talk about sudoku thats right—i bet you didnt see that one coming a lot of you have probably encountered a sudoku puzzle at some point but for those of you who havent heres a quick summary of how this puzzle works so were all on the same page the goal of sudoku is to fill missing entries of a 9x9 grid with numbers 1–9 but with a few constraints the first constraint is that each 3x3 subgrid cannot have repeated numbers the next constraint is that each row must have unique entries and the last constraint puts a similar limitation on the columns in which all entries of a column must be unique it turns out that computers can solve sudoku puzzles efficiently using graph theory the graph here is quite subtle but it does exist what we are going to do is were gonna assign each number a color and then construct a graph as follows for each 3x3 grid well fill out the known entries with the respective color for the number and assign one color to all unknown entries the constraint here is that all of these 9 nodes as a group must have unique colors we can then extend this mapping to all other 3x3 grids and create the following graph we still have to take care care of the other constraints we can connect the graph along each row to represent the idea that every row on the graph must have a unique color and we can do the same connections along columns for that respective constraint now we have a graph theory problem where we attempt to find colors assigned to vertices that satisfy all the laidout constraints it turns out that this is actually a wellknown graph problem that graph theory provides an elegant algorithm for and once we find a set of colors we have a solution to a sudoku puzzle lets now proceed to formally define a graph a graph is a set of vertices and edges where each edge is a connection between vertices the way we usually denote an edge in a graph is by referring to it as a pair of vertices as mentioned before vertices and nodes are just different names for the same concept that we will use interchangeably when discussing graphs if youre forced to mathematically write down a definition of a graph we can use set notation for this particular graph the vertex set looks like v  0 1 2 3 4 and our set of edges would be denoted as e  01 02 03 13 23 34 lets now define some important terminology that youll see over and over again when talking about graphs the first important term is the concept of neighbors in a graph formally two vertices are neighbors if an edge connects them heres an example vertices 1  8 of this graph are neighbors since they are connected by an edge one thing that we often query a graph for is all neighbors of a particular vertex for example if we were asked for all neighbors of node 0 the result would be the following set of 3 nodes 4 6 8 a related concept is the degree of a vertex a degree of specific vertex is equal to the number of edges connected to it or equivalently the number of neighbors as per this definition the degree of vertex 0 would be 3 and the degree of vertex 3 would be 2 lets now talk about paths paths are simply defined as a sequence of vertices connected by edges most of the paths that well deal with will be paths with unique vertices for example one path from vertex 0 to 2 is 0→6→7→3→2 and all vertices in the path only show up once which is what well assume most of the time one feature of paths is that they have respective lengths a path length is simply defined as the number of edges in the path in this example the path length we have here would be 4 a related idea to a path is the concept of a cycle a cycle is defined as a path that starts and ends at the same vertex one key note about cycles is that all cycles are paths but not all paths are necessarily cycles there are several cycles in this graph heres an example of a cycle that begins at vertex 0 and ends at vertex 0 0→8→1→5→4→0 the last term i want to talk about is the concept of connectivity which can be used in several contexts the first context is with respect to 2 specific vertices two vertices are connected if a path exists between them the second context you may encounter connectivity is when it is applied to a general graph a graph is connected when all vertices are pairwise connected in other words a path exists between all pairs of vertices this graph is an example of a connected graph since if you pick any two vertices we can identify a path between them however if we change up the graph a little bit we now have an example of a graph that is not connected now its easy to see that no path exists between several pairs of vertices this naturally leads to a third context in which connectivity can be applied which is the idea of a connected component a connected component is a subset of vertices of the graph that is connected for example in this graph we have two connected components the first being the following  set of vertices v₁  0 4 6 7 8 and then the remaining vertices of the graph form the second connected component lets now transition to the types of graphs that you may encounter the main graph weve seen so far is specifically called an undirected graph where for example if i have an edge connecting vertex 0 to vertex 1 its implied that i also have an edge from vertex 1 to vertex 0 a graph where this would not be the case is called a directed graph where now edges are unidirectional directed graphs also have their own classes this particular graph has a cycle so we can be more specific by referring to this graph as a directed cyclic graph on the other hand  if a graph is directed and contains no cycles we refer to that specifically as a directed acyclic graph which is a specific subset of graphs that has been studied quite rigorously since they show up in all sorts of interesting problems another important graph is a weighted graph this graph is unique because each edge now is not treated equally and some edges might have a larger weight than others this can naturally model interesting metrics like traffic distances on maps and many other ideas another important class of graphs is trees trees have 3 key properties all trees are connected and acyclic removing an edge from a tree will disconnect the entire graph and furthermore adding any single edge to a tree will create a cycle these are 3 valid examples of trees and i encourage you to take a second pause the video and confirm that these properties hold personally i find verifying the second and third properties surprisingly satisfying it really emphasizes how fragile a tree structure is which i think is kind of cool lets now move on to some more handson ideas how does a computer represent a graph as a data structure take for example the following graphs how would you go about organizing the information in this graph on a computer it turns out that there are several accepted ways to do this and some of them are better than others depending on the context the first idea that is quite natural is to map vertices to one another through a matrix which we formally call an adjacency matrix the rules for creating this matrix are fairly intuitive if an edge between node i and j exists we will indicate this with an entry 1 in our matrix otherwise the entry will be 0 following these rules this is what our adjacency matrix looks like for this graph notice that each edge creates two entries since this is an undirected graph make sure you take a moment to understand the mapping we have here the second valid representation of a graph is actually fairly simple we take all the edges and construct a set with each edge as follows this representation is called an edge set and it also contains all the information about vertices and edges that you would need for a graph however this representation is not as common because its a little hard to extract information about vertices of a graph using this particular representation the third representation of a graph is called an adjacency list and this is actually the most common representation used the idea works as follows we take each vertex and map it to a list of its neighbors for example node 0 has 3 neighbors specifically nodes 1 2 and 3 so we map it to a list containing those values the rest of the list is constructed in a similar manner the nice thing about this representation is that it gives us an easy access to neighbors of a particular node which is a tool that will be immensely useful in graph algorithms furthermore this representation exploits the fact that most graphs in the real world are going to be sparse meaning that we have a large number of vertices with each vertex having relatively few edges for example in a social network you would actually make the most sense to have this representation since there are going to be billions of nodes but each node is unlikely to have more than a few thousand edges an adjacency matrix for a graph like that would take way too much memory but with an adjacency list its much more manageable for this reason in future videos we will primarily use adjacency lists as a way to represent graphs the final thing i want to do in this video is to discuss some of the interesting problems and questions you may find in graph theory in future videos well show you how you can apply graph algorithms to solve many of these problems a fairly standard problem that youre likely to encounter all the time revolves around connectivity between two vertices for example its easy for us to see that vertices 0 and 3 have many paths between them but what sort of algorithms can we use to allow a computer to efficiently solve this problem we can naturally extend this problem to ask if an entire graph is connected there are a variety of efficient algorithms to solve these problems that we will cover in the next few videos another interesting problem in graph theory is the shortest path problem specifically what is the path of the least length between two vertices for this particular graph heres the shortest path between vertices 0 and 3 which is something we as humans can generally eyeball for small enough graphs but once again whats the algorithm to solve this problem generally then there is the problem of cycle detection in a graph many of the algorithms that are used for connectivity problems can be naturally adapted to solve this problem as well another interesting problem in graph theory has to do with vertex coloring which we actually saw in the sudoku example the problem formally stated is given a set of colors can we assign a color to each vertex such that no two neighbors are assigned the same color in this graph for two colors no such solution exists but if given 3 colors  this problem has a solution another very interesting problem to ask about graphs  is whether a path exists that uses every edge exactly once this might be harder to tell but this graph does indeed have one of these paths and an efficient algorithm for this problem exists these types of paths have tons of interesting applications in bioinformatics and circuit design a similar question that you may ask is what about the existence of a path that uses every vertex exactly once such path also exists in this graph but i think what youll find more surprising is that there exist no efficient algorithms to solve this problem what i mean by that is that all algorithms we have so far run in exponential time for this problem which is incredibly slow for large enough graphs in fact if you are able to find an efficient algorithm for this particular problem you would probably be given every single computer science award in existence because it would help resolve a longstanding open problem but dont get your hopes up there because theres a fairly large consensus that no efficient algorithm for this problem exists lets now take a moment to recap the big ideas in this video we first introduced graph theory through a variety of cool applications where you saw why someone should even study graph theory we then formally define graph theory along with important terminology and types of graphs that you will encounter these concepts are incredibly important to understand so that we have an appropriate framework for discussing graphs we then introduced several representations of a graph as a data structure with a specific emphasis on the practicality of the adjacency list and lastly we introduced some diverse and interesting problems to motivate the algorithms that we will go through in future videos i hope this discussion gave you an appreciation for the massive field of graph theory its definitely one of my favorite topics in computer science and i hope it becomes yours as well thanks for watching me and as always id appreciate it if you hit the like button if you enjoyed it if you want to see more content like this be sure to hit the subscribe button and if you want to more directly support this channel be sure to check out the patreon page linked in the description below see you in the next video captions by bertaland 