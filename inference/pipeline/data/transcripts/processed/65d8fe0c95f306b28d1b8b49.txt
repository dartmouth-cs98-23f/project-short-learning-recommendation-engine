choosing the right database is often the  single most important decision well ever make if we are fortunate enough to be tasked with  the challenge of picking the next database   for our superfast growing business  here are some key points to consider we are talking about a database  for a real growing business   where a bad choice would lead to extended  downtime customer impact and even data loss we are not picking something  for our weekend project this take is probably a bit controversial let’s dive right in first are we positive that  we need a different database there is a compelling reason we started  to look for an alternative right is the existing database breaking at the seams maybe the p95 latency is through the roof maybe the working set is  overflowing the available memory   and even the most basic requests need to  go to the disk and slow everything down whatever the issues are make  sure they are not easily solvable let’s read the database manual of our current   database system  front to  back  and read it again there could be a configuration knob or two that  we can tweak to give us a bit more breathing room this breathing room could come in handy because  migrating a database could take a long time   usually much longer than we think these knobs could come in the form of  tuning the working set memory size   choosing a different compaction strategy or  even changing some garbage collection behavior databases are complex and highly tunable understand the architecture of our database know its limitations reach out to experts in the community describe our problems people in the know could help  and often in surprising ways to look for more untapped headroom maybe there  are some fixes to our application architecture   that would give us more breathing room can we put a cache in front of it and  give us a few more months of runway can we add read replicas  to offload some read load can we shard the database or  partition the data in some way maybe the data is naturally siloed  and sharding is an acceptable solution the bottomline is this migrating live production  database is risky and costly we better be damn sure that there is no  way to keep using the current database okay we have exhausted all  avenues for the current database how do we go about choosing the next one we developers are naturally drawn to  the new and shiny like moths to a flame when it comes to databases  though boring is good we should prefer the ones that have been around  for a long time and have been battle tested depending on the industry we are in  our posture could be a little different banking and finance are a lot  more conservative for example whatever it is there should be a ready  market of experienced administrators   and developers for the  database we are considering software engineering at scale is about tradeoffs when it comes to databases it is even more true keep in mind there is no free lunch be weary of outrageous marketing claims infinite effortless horizontal  scalability comes with a hidden cost dig deep to find where that cost is hiding instead of reading the shiny  brochures go read the manual there is usually a page called “limits” that page is a gem the faq section is also very useful these pages in the manual are where we  learn the real limits of a new database its design constraints   the fine prints so to speak if the brochure promised  infinite horizontal scalability   these are the places to factcheck  those claims and to find the catch in our experience the fancier the claims  the longer the disclaimers are in the back for example many nosql databases support   much higher scale than the  trusty old relational databases they often claim to support near  linearly horizontal scalability here are the common tradeoffs  that come with them one they eliminate or limit  transactional guarantees two they severely limit  data modeling flexibility there are no queries across data entities the data is highly denormalized where the same   piece of data is stored in many collections  to support different data access patterns to learn even more about a particular  database join the chat room ask lots of questions for open source projects read the github issues learn as much as possible about the candidate now the investment is relatively  small at this juncture once we narrow down the  database options what’s next well let’s have a shootout create a realistic test bench for  the candidates using our own data   with our own realworld access patterns we have that data right after all our current database  is bursting at the seams   so getting some representative  dataset should be possible yes this is costly and it could take weeks but we cannot afford to skip this step migrating a production database is risky and  it takes a lot more work than benchmarking if we are staking our career on this new  database let’s make sure it will work during benchmarking pay  attention to the outliers measure p99 of everything the average is not meaningful try hard to replicate the real workload and then  push it further and see where it starts to break try some of the more risky operational  tasks  like failing over a node   or testing for data corruption  during network partitions try up or downsharding if it is applicable after everything checks out  plan the migration carefully   write out a detailed stepbystep migration plan have your peers review it thoroughly if possible migrate a small service first  and learn as much as we can from that picking the right database is not glamorous  and there is a lot of hard work involved migrating to a new database in the real world  could literally take years at a high scale good luck if you would like to learn  more about system design   check out our books and weekly newsletters please subscribe if you learned something new thank you so much and we’ll see you next time 