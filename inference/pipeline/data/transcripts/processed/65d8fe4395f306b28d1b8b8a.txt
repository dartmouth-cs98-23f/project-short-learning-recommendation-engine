planning designing and constructing buildings   or other structures a good design can make  a structure survive and be admired for years   or fail even to stand its the job of  the architect to join both art and science   to make sure all the pieces of a building  come together in a good solution   similar to architects as a software engineer  you will also need to mix art and science   to deliver solutions in a satisfactory way but  instead of bricks you will solve them with code hi there im christian and youre watching the  a dev story today i will be starting a new   series of videos covering software architecture  in a practical way in this series of videos i   will be covering many concepts and fundamentals of  software architecture so hopefully by the end of   it you will be more prepared to tackle software  design challenges have better discussions   and even be more prepared for a technical  interview so without further ado lets start software architecture has many definitions one  of the most famous one is from ralph johnson   where he says architecture is about  the important stuff whatever that is   but what is important stuff in the  software architecture we focus more on the   structure more than implementation details  software architecture is also about making   the expensive choices that are costly to change  after they are implemented its also about making   explicit the core decisions that will allow  the software to have high quality concepts   are better understood in practice so lets  build an ecommerce site and see how that looks so for example in our ecommerce site we need to  allow our users to do certain things like search   the inventory check reviews buy a product  review past orders and maybe other features   as well these are the functional requirements  of the application besides of what the system   should do we also need to focus on how should  the system behave these are also called the   nonfunctional requirements these are sometimes  defined as the ilities that the system can have   like functionality reliability usability  efficiency these kind of things for example   in our ecommerce site lets say that we wanted it  to be maintainable for several years and this is   a maintainability requirement we also want to be  able to serve millions of users in this case its   scalability we also want to make it available  247 which is a reliability to make sure that the   system is very stable we also want to have good  response latency which is efficiency and we can   have many others finally besides functional  and nonfunctional requirements you may also   have additional restrictions that will limit the  options that you will have for your architecture   so for example we could have some legal  compliance costs time to market standards etc   several restrictions that will limit the number  of options that we will have to design our system   lets say in our ecommerce site we need  to comply with the european privacy law   gdpr so with that we need to take into  consideration architecture how to handle that so after you get the context you know all  the things that the system needs to do   how it should behave and what restrictions are in  place that you need to take into consideration so   after you have all of these things you need  to prioritize them s ome requirements and   restrictions will conflict between them for  example if you have a strict time to market   maybe you need to drop some features there  can also be other things like nonfunctional   requirements that need to be prioritized so for  example in our case of the ecommerce site we   might not care too much about portability because  we will have a strong control of where its going   to be deployed the application and after its  deployed in there we dont plan to move it to   other platforms so we could drop portability in  favor of scalability or maintainability so after   you have prioritized the list and you have made  this tradeoff you need to think about if its   acceptable or not so after its acceptable  then you start designing the architecture   how do you start designing the system so the  first thing is once you have it prioritized start   with one important thing at a time if you try  to tackle everything at the beginning and trying   to think about all the possible scenarios in the  future you might end up having an overengineered   solution and this is not good because it is an  unnecessarily complex system there is also an   acronym for that is yagni you aint going to need  it so if you are not sure about something or if   its not prioritized then try not to tackle at  first try to postpone it to when you have better   context and can make a better decision about it  now that you have this you might start thinking   about what are the possible architectures that  might fit your system for that a good book   that i recommend and that is useful for me is  this free ebook from oreilly that is software   architecture patterns it is a good book to get  a grasp of different architectural approaches   and you can see several architectural patterns  like layered event driven microkernel   microservices   and space based this book shows pros and cons  of each of these patterns and might help you at   the beginning when youre designing the system  what to look for and what would be best for your   system based on your current requirements so we  have decided what are some of the features that   we want to have our system implemented we have  also mentioned that maintainability is one of the   nonfunctional requirements that is very important  for us so with that we can start designing our   system and we can take for example a layered  approach we could have a database or a storage   layer where we would sort data then we will  have a logic layer where we will have the backend   servers that will be taking care of handling  any business logic that we want to handle   and then the visualization part or ui where well  be allowing the users to interact with the system and this is how we get to the layered architecture so here we have defined the architecture  with the structure that the system will have   the features can then be implemented following  this layered architecture and if you want to   learn a little bit more about how to implement the  features in a scalable nice way then i recommend   you to check out my other video about design  patterns its very typical in web applications   to use a layered architecture but its not the  only architectural pattern that we can use   there is no silver bullet so make sure that in  your context you look to different approaches and   pick the architecture pattern that would better  fit your use case its also normal that the   architecture would evolve over time and sometimes  even in unintended ways that would make expensive   changes to the architecture so you need to make  a balance about foreseeing the certain things   that you will need to cover versus the things  that you need to prioritize in the short term   if you try to tackle everything then you can  end up having an overengineered solution   one of the most expensive things can be scaling  so in our case we already have the architecture   how can we make it scale to serve  millions and millions of user requests   for that check out my next video and  thats it for today thank you very much   for watching and if you liked the video dont  forget to click the like button subscribe   share it and if i missed something or you want  me to explain something a little bit better dont   forget to mention it in the comments section  below thank you very much see you next time 