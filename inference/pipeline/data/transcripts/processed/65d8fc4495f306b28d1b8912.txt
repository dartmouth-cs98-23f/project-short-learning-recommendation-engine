have asked me about the creative process behind my videos like what software i use and how some particular animations were brought to life this is why i decided to make a dedicated video where i would share with you some of my secrets and use animations from my previous videos as illustrative examples just to walk you through how they were done if youre interested stay tuned before we dive deeper into the animations themselves let me address one of the most common questions i get and that is what software do i use heres the thing unfortunately there is no ultimate tool that will help you create a video from start to finish instead every software is made for specific purposes and thus has its own limitations thats why my workflow is almost always some combination of many programs and packages that i use depending on the problem at hand so ive prepared the whole list of software that i use in video production and when exactly i use each of them starting with adobe after effects this is my main workhorse that i use for the majority of simple animations as well as for composing the results of other programs into the final video to me after effects offers an optimal balance between capabilities and usability i dont really need to create any realistic explosions key in fancy color correction 3d tracking or anything like that for this purpose there are other dedicated applications much more powerful than after effects but using them for simpler stuff would be an overkill like trying to cut a paper with a chainsaw for example i can create the text stylize it to globe with gradient make it appear on the screen add an image that would pop up wiggle around and gradually change its hue and finally make a smooth transition out of the scene within just a few clicks number two python now this is where things get interesting unfortunately scripting in after effects is not as powerful as convenient as compared to some other programs yes technically there is a javascript api but honestly i found it to be quite unusable and there is only so much you can do without scripting create a pair of circles that would wiggle around while always being connected by a line easy but creating a hundred of such circles and lines that would form a wiggling graph with specified properties optimally positioned in a twodimensional space is pretty much impossible this is why when i need to create something that cant really be done by hand i have to rely on other tools that would allow me to make visualizations programmatically taking advantage of mathematical functions heavy numerical calculations variables loops recursion stuff like that typically i do everything in python since this is the programming language im most familiar with and it has a few great modules for creating visualizations but hey if you have a lot of experience in other languages like c plus or julia and would strongly prefer to use them instead there are some really great solutions for them as well the choice of the exact tool doesnt really matter anyway in my work i mostly use two python packages the first one is called many it was originally developed by grand sanderson also known as three blue and brown who im sure most of you have heard about today there is a rapidly developing version of many maintained by the community ive used it extensively in my earlier videos for all sorts of mathematical animations but i just kept bumping into things that i couldnt implement in manim for example drawing gradient lines colored by coordinate plus at times i found the workflow to be tedious and not really intuitive this is why about 10 months ago i gradually began to switch to another visualization module called matplotlib im sure most of you probably recognized that name because its like the most popular solution for plotting or data visualization in python what is less known however is that method lip is not limited to simple static plots like the ones you would create for a research paper in fact it has some of the most amazing animation capabilities personally i find matlock lip to be much more intuitive compared to manim and although it is more low level in a way so that the same animation takes up more lines of code it gives me much more control and much more freedom over manipulating individual elements on the screen on a frame by frame basis so nowadays whenever i need to create an animation of a plot being drawn or visualize some complex system beat an icing model or an artificial neural network i use matlock lab further in the video we will take a look at a few examples of how exactly it is done one thing that i still invariably do in many however is these types of graph animations this would certainly be possible to recreate in matplotlib but manim just has got such an amazing out of the box solution for graph theory that i cant ignore it within just a few lines of code it is possible to draw a graph object from network x and make it wiggle number three blender unfortunately both after effects and python solutions have very limited capabilities of working with all three dimensions so whenever i need to create something in 3d b neurons mice running in mazes or fancy surface plots i use blender it is completely free and open source but that doesnt make it less powerful additionally blender has got an amazing python api which means it is possible to create some 3d visualizations programmatically as well these three pieces of software after effects python and blender are the backbone of my animation workflow but there are a few other programs mostly from the adobe suite that i use every now and then at different stages of video production for example adobe illustrator is my goto vector editor when i need to draw something like a simple asset or a diagram the good thing about it is that it works seamlessly with adobe after effects so i can use illustrator files to drive some animations and whenever i need to change the source in illustrator things will automatically be updated in after effects as well photoshop is mostly for thumbnails and minor raster work like separating a subject from a background or color correcting by the way just like illustrator photoshop integrates nicely with after effects adobe premiere pro now although after effects is certainly good for animating it is virtually unusable for classic video editing you know like trimming clips arranging them in time adding sounds background music stuff like that for this type of video editing and usually at the final stage and especially when im shooting with a face camera i use premiere and finally adobe audition for all sorts of audio work removing background noise enhancing the voice removing plosives and other nasty things like breaths and mouth sounds and thats pretty much it all the software i use to make my videos now lets be more specific and take a detailed look at how some of the animations were done heres the list of what im going to talk about along with time codes so you can easily find a particular animation youre looking for or you know just watch the whole thing that would be awesome as well music were wondering how mad but lib can be used to create mathematical animations over the years ive developed a few tricks and strategies on how to use maplib in synergy with after effects and this is actually the key takeaway no single mathematical animation you can find in my videos was created with matlib or manim alone there is always some after effects involved to enhance the animations ive actually prepared a short animated clip to use as an example dont search for any deep meaning in it essentially the only purpose of this toy animation is to illustrate various approaches here it is consider an arrow rotating around a circle with variable speed if we trace the ycoordinate of the arrow tip we will get a sinusoid with time varying frequency lets say we want the amplitude of the sinusoid to change in time according to this function right here lets zoom into the resulting wave and make it wiggle for a while between the two states just for fun alright great now lets break it down piece by piece first i usually identify the core components the building blocks of the scene for this first portion right here these would be the arrow spinning around the rainbow circle the graph of a wave colored by the face being gradually drawn along with the field graph of frequency as a function of time these three elements should be synchronized to each other and be optimally arranged on the screen along with some texts once ive identified what exactly needs to be done its time to determine the tool that im going to use for each of the jobs in this case either after effects or python now of course there is no right or wrong answer since its the matter of personal preferences and experiences for me draw in such a wave from scratch in after effects and synchronizing it to the spinning arrow would be a pain so im better off creating something like that and inaptlib on the other hand arranging everything on the screen and animating texts directly in python would be tedious if not impossible so lets leave that to after effects once individual jobs are allocated to their respective software its time to get to work alright so in python lets start off by creating an array of instantaneous frequencies that would tell the arrow how fast it should move at every point in time and the array containing the resulting sinusoid for visualization lets set up a method lib axis with high enough resolution make it completely black and add a nice thin grid to plot our array as a gradient line colored by face values we can use metal clips align collection object specify the array of colors obtained from the array of phases by passing it through a color map stylize the line a little bit and finally add the resulting line collection object to the axis voila we got an image of a wave but we need it to be animated in for this purpose lets use the funk animation class available in the animation submodule of matlib essentially actually the way it works is you define a function that would be repeatedly called and would modify the plot at every frame of the animation this function lets call it animate wave well accept the parameter specifying the current frame for this case since we are creating a drawing animation lets call this parameter t current and we are going to animate it from the first value of our time array which is 0 to the last which in this case is 5 whenever the animate wave function is called it should hide the portion of the graph where time is greater than t current and show the portion where the time is less than or equal to t current the way we can do it is the following remember when creating the line collection object we specified the color for each point well in a similar fashion it is possible to specify the opacity of each point by the way in python opacity is usually called alpha so we can call line collection dot set alpha the expression in the parenthesis will compare each element of the time array to the value of t current and return a binary mask of ones and zeros which we can use to set the opacity of individual line segments to create the animation lets create an instance of the funk animation class passing our figure object the animation function and the list of frames in this case we are going to animate the value of t current from t start to t end and lets make it 5000 frames to make the animation smooth lets tell python that the interval between consecutive frames should be around 30 milliseconds so the animation will be saved with 30 frames per second finally we need to call dot save on the resulting animation object and a few moments later we got a nice animation of a wave being drawn i think its a great point to pause and talk about the number of frames you probably noticed that the resulting video is extremely long two and a half minutes and the reason for that is because i need the animations to be synchronized with my voice i want to easily control the speed with which they play but heres the thing if the animation is long i can easily make it 5 times faster and it will look nice i can even tweak the rate and make it nonlinear to achieve the easing effect but going the other way around making the fast animation 5 times slower although technically possible will give you a very choppy and ugly result in the first case the file contains a large number of frames lets say 5000 and to speed the animation up the video editing software simply takes every fifth frame change them together and the result looks good alternatively to slow a faster animation down it needs to somehow stretch the existing thousand frames into 5000 since it cant augment the prerendered video with any new frames the existing ones are simply repeated so that now you perceive the animation as if it is played with 6 frames per second instead of the normal 30 this is why when creating the animation building blocks in python i intentionally save them as videos with humongous number of frames because i can always easily throw some of those out but to generate new ones would require rewriting the entire code similarly to how when you are buying wallpaper rolls its certainly better to overestimate than to underestimate ok lets get back to matplotlib in exactly the same way we can animate the frequency graph the only difference is that it is completely white instead of the gradient and also includes a fill lets create the fill object using xfill between method and modify our existing animation function a little bit now on every frame along with setting the opacity of the line segments it should also modify the fill as of right now matpatlib cant modify the existing polygon but we can easily just delete the old fill and recreate the new one with necessary limits on every frame specified by t current for the arrow lets set up a black figure with polar axes and specify how ticks and the grid should look like we can draw the colored circle in exactly the same way we did with the way just generate an array of angle values linearly spaced from 0 to 2 pi along with the array of radii all the elements of which will be equal to 1 in order to add the circle to the axis we can use the code with a line collection from before only now for the case of polar axis segments will be specified with angle and radius values instead of x and y to create an arrow lets define a function called get polar arrow that will take the value of the angle and add the arrow to the axis by calling x dot arrow rotated and colored according to the angle to create the animation itself we need a very simple animation function that will remove the old arrow and create a new one on every frame as we gradually change the angle according to our array of phases and here we go next in the animation there is this graph of the amplitude being drawn together with the field and later the copy of the curve should detach from the fill fly down and kind of squish the sinusoid into the target shape this part is a bit tricky and there are always many ways you can achieve the same result what i suggest we do is the following in python using similar approaches first animate only the amplitude curve without the fill youll see why in a minute then by modifying the code slightly animate only the fill and save the result into its own video file unfortunately matplotlib cant really color these fields with gradient so well have to tackle this on post processing for now lets make the fill fully white finally before we can compose everything we need this last animation of one wave being gradually transformed into another took me a while to figure out how to do this but this solution turned out to be pretty straightforward first create the line collection corresponding to the initial stage as we did in the beginning the animation function should gradually interpolate between the curves the initial array wave and the wave times amplitude array to achieve this the function will take a single parameter called proportion which is a number between 0 and 1 specifying where we are in the interpolation process so on every frame the animation function will mix the two arrays accordingly and change the segments of the line collection object as you can see when the proportion is equal to zero this expression evaluates to just wave while when the proportion is 1 it equals to wave times amplitude and everything in between lets animate the proportion value from 0 to 1 say with 500 frames and boom smooth interpolation between the two functions pretty neat right believe it or not but now we have all the necessary building blocks we need to create the full animation lets put python aside for now and finally move to adobe after effects now im not going to explain every single thing just cover the key ideas in after effects i usually scale and position the layers accordingly to compose the scene by the way notice that these video files have black background which looks kind of ugly if you want to put them on a nice dark but not completely black background in addition this prevents them from overlapping to solve this issue pretty much for every single asset i set the blending mode to screen im not going to explain the theory behind blending mounts if youre interested check out this great article on wiki essentially everything thats black will be made transparent so that now not only can we see the background but it is also possible to arrange them however we want without one layer obstructing another we can now adjust the speed of the animations using the time remapping property and arrange them on the timeline for instance i want the amplitude animation to appear only after the first three animations relating to the arrow are dawn plane now because the amplitude curve and the fill are two separate video files we can take advantage of that and do something about this horrible white fill in after effects using the gradient ramp we will fill the layer with orange and red gradient according to the curve and set the layer mask to its own copy so that now only the pixels that were white in the original file will be shown while the other pixels that were black will be transparent now just lower the opacity and voila a nice gradient fill that is animated together with the curve now to the squishing part notice how the last frame of the video with the wave being drawn is identical to the first frame of the video with the interpolation between the waves because of this we can seamlessly stitch the two videos together as long as both layers in after effects have the same position and scale foreign as a result the wave is first being drawn and then after a pause is being morphed into the amplitude modulated version of itself while the rate of both animations as well as the duration of the pause can be easily tweaked in after effects by animating the time remapping property to match the voice as a nice touch we can make a copy of the amplitude curve layer and animate its position and opacity to achieve this effect as if the curve is kind of squished in the wave in order to zoom into the wave lets parent all the layers to the wave interpolation video so that they will inherit the transformations and animate the scale and the position of the parent layer and maybe simultaneously animate the opacity of some of the child layers to make them disappear completely finally as you may have guessed already we are going to use the time remapping property to create this wiggling animation this is where the fact that the source video contains a large number of frames will come in handy and and thats pretty much it just add the texts maybe stylize the animations by adding a few effects to your liking and render the video all right so just a quick recap of how python and after effects can be used in tandem matplotlib is used to create the mathematical building blocks of animations those building blocks like graphs or array images usually are then scaled arranged and composed together in after effects which also helps with synchronizing the resulting animation to the voiceover and remember time remapping is your best friend well i hope this was helpful and with a major block of mathematical animations out of the way lets look at a few more tricky ones foreign what you see right here is the biophysically accurate description of how membrane voltage propagates through a pyramidal neuron during action potential let me tell you a short back story of how such animations were born in the first place while i was preparing to make a video on dendritic computations this one right here i realized that i needed some way to animate realistic dynamics of membrane voltage in space and time since you know this was the central point of the video however after searching the internet for a solution i just couldnt really find anything that would work so i did what every rational person would do in this case i created my own tool the main idea was to run biophysical simulations using real neuron morphologies in the free neuron simulator environment and then somehow brain simulation data into blender along with geometry this task turned out to be not as straightforward as i hoped for and it took me a couple of weeks of experimenting and going through the blender api documentation before i could make it work realizing that i will probably need this for future videos and other people might find that helpful i went ahead and created an actual blender addon called blender spike which is now available on my github along with the detailed instructions now you may be wondering why not name it blend or neuron because that would be so much cooler turns out there already is an addon called blender neuron developed in 2018 designed to do exactly that but unfortunately no matter how hard i tried i couldnt make it work anyway creating your own simulations from scratch in blender spike requires knowledge of python and the basics of neuron simulator to load the morphology set up the biophysics and run the simulation results are then exported into a blender friendly format with a little companion module called blender spike pi this resulting dot pickle file essentially contains all the data including the morphology of the branches and the frame by frame voltage data for each branch the good news is once you have the dot pickle file with the simulation results for example by downloading an existing one from my github or asking your simulation proficient friends to create one for you you can simply dump that into blender and easily customize the appearance of the neuron the color map glow intensity to build your own unique animations to take it one step further it is possible to combine blender spike with matplotlib animations which i discussed previously it is straightforward since blender updates the voltage by looking up values from the python array stored in the pickle so for example we can render the neuron in blender animate voltage graphs in matplotlib and compose and sync the two videos in after effects for a more complex animation another animation a lot of people are interested in is this slicing through probability distribution from the video on cognitive maps not gonna lie this is one of my favorites as well this was created in blender with just a little bit of python by the way the exact method im about to describe was used for this animation from the wavelet transform video as well now the first step is to construct the threedimensional surface inside the blender unfortunately there is no native way to just tell blender to plot a surface so we will have to use a workaround we will first use python to generate a black and white image called the height map which means that white pixels correspond to more elevated areas this can be done with netlib by calling the dot emcee function with a binary color map here is what the resultant image looks like in blender we can now create a grid object apply the displace modifier and specify the texture to be the displacement map we have just saved what this will do is extrude the vertices of the grid as specified by the brightness of the image and voila a nicely looking 3d visualization of the array one way to cover this would be to create a color image in matpatlab in a similar manner and then apply that image as a texture to the object but in this particular example since the coloring is quite simple namely its just a gradient along one axis we can create it right inside blender to specify materials we are going to use blenders node based shader editor essentially it allows to create complex materials by routing basic computations and materials through a system of interconnected nodes for example we can modify the default green material by specifying that the base color should be taken from a gradient using a color map node and that the position along the gradient should depend on the y coordinate you can now manually create any gradient you want or use this tiny addon called blender color maps to quickly bring gradients from macbook lip color maps into blender alright now to the slicing part the key idea behind this is that inside the node editor blender allows you to mix different shaders in different proportions which could be a function of variables including other objects sounds confusing but heres what i mean suppose i want to mix the gradient shader with a fully transparent shader well i can just add a mixed shader node in blender and change the factor slider which is the proportion in which the two shaders are mixed so for zero only the gradient is visible for one the object is fully transparent 05 somewhere in the middle you get the idea the cool thing about it is that this factor is not restricted to being a constant value for example we can plug the z coordinate of the object there to achieve this cool fading effect which depends on the height in order to slice the surface lets create another object an empty plane it will not be rendered and will use it only to drive the material namely lets take the ycoordinate of the empty object threshold it with some value and feed the output into the factor of the mixed shader that way the vertices of our surface will have either one or the other shader depending on the location of the empty object foreign to achieve this thin white line and the boundary the idea is similar we just create a third shader that will be a pure white glow and mix the three shaders depending on the position of the cutting plane there is just this funny note set up to work around the limitation that the blender cant mix three shaders simultaneously so i first have to mix the two shaders together and then mix the result with the third now we can duplicate the surface object apply the wireframe modifier to one copy well to make it wireframe and simply reverse the order in which the shaders are mixed so that now the wireframe is visible when the original surface is transparent and vice versa and now whats left to do is the animate the movement of the cutting plane make the camera spin around and here we go foreign about the threedimensional animations of brain structures the models themselves come from the existing brain atlases in particular the ones published by alan institute downloading them can be a bit of a challenge given that the interface is not really intuitive i found that the most convenient way to use brain atlases is through brain globe api which provides a python interface to download and navigate the data then whats left to do is navigate to the folder where the atlas is stored locate the necessaryobj file since they are named by their ids and bring the model into blender but this can be tedious especially when you want to bring multiple brain structures into a single scene to simplify the process ive put together a tiny blender addon called blenderbrain very original name in i know which you can find on github it allows you to import meshes from specified atlas in one click simply by specifying their acronym which you can look up in the corresponding structurescsv file that the blender globe downloads for example lets say i want to look at the ce3 region of the mouse keeper campus well i can just select the atlas and type in ca3 similarly i can bring the dented gyrus into the scene by typing dg notice how it automatically gets positioned into the anatomically correct place and suppose we want to look at where these two structures are located relative to the entire brain typing in gray imports the entire gray matter and since hippocampus and dente gyrus are subcortical structures we cant really see them now lets change that make the gray matter almost transparent change the environment settings so that there is some backlight and color of the brain structures for instance lets make the dentage iris glow with blue and add this subtle gradient to the glow of the c3 region along the xaxis whats left to do is to animate the camera to spin around the brain render it with a black background and the footage is ready to be used in after effects music finally i have prepared something special for you namely lets explore how to build this animation of information transmission from the brain criticality video yes including this segment where the neurons are being rearranged now i realized that this section will be a bit more coding heavy and i will skip through some of the technical details so please be prepared for that by the way you can find all the code for this video on my github as well okay so just to remind you we want to animate the simulation of a socalled branching model it consists of m layers and each layer has n neurons that can be in one of two states on or off layers are connected sequentially and each connection has a certain transmission probability associated with it so that information can spread from left to right this number sigma which is equal to the average number of neurons activated by one downstream neuron controls the the behavior of our network additionally each neuron has a very small probability of being spontaneously activated even when it doesnt receive any input before animating the activity its necessary to set up the simulation itself lets define a function that initializes the n by m array of zeros that is going to store the state of the network next we create a function called network advance that will advance the network one step into the future and return the update state to advance a network we need to first randomly activate a small subset of neurons in order to model this stochastic input and model the propagation of information as specified by the value of sigma once we have a function that advances one time step we can just call it sequentially a few hundred times to get the full simulation result great so now we have a stack of 2d arrays containing the entire evolution of the network now we just need to somehow animate this because each frame should depict one state of the network which in turn is given by a twodimensional array a natural solution is to use methodly functions like im show or p color mesh then on every frame we just need to change which of the arrays is being plotted so just like before set up the figure and axis plot the network state im going to use p color mesh here define the animation function that would change the data depending on the current frame and call func animation to create a video however there are a couple of crucial problems with this animation first of all it is too fast so much that it is literally painful to look at it this is because we currently change the array on every single frame and the interval between the frames is short we can try to increase the interval but now the animation is awfully topic lets do something else instead consider the dynamics of a single neuron in isolation right now if we plot its state as a function of time we will get something like this zeros interspersed by a few ones which makes sense we are going to cheat a little bit and kind of smooth out its activity in time so instead of instantaneously jumping to one and then back to zero the neuron state should gradually increase and then decrease according to this shape right here which consists of two exponents so we need to replace every single sudden jump with this gradual rise and decay in mathematical terms we have to convolve the activity function with this exponential thingy called the kernel this operation can be easily done in python using numpies can evolve 1d finally in p color mesh we can choose a nice color map and animate the smoothed states array instead just play around with the time spread and the kernel shape to achieve the optimal balance as a side note if you dont like the squares that the peak color mesh produces with just a little bit of after effects they can be changed to pretty much any shape for example circles just create a shape layer on top of the video draw one circle of the necessary size add the repeater with a proper number of copies and tweak the spacing to ensure that all the circles in the row fall on top of the squares for a onetoone mapping add another repeater and do the same for the vertical spacing now just change the track matte of the video to alpha matte essentially the video with our colored squares will be now masked by the circles and also feel free to add the glow finally lets create this rearranging animation right here which by the way if you are into manim can be quite useful the code for running the simulations and smoothing is the same but this time instead of maplibs color mesh we are going to use the graph object inside of menu the main idea is to run the network simulation but during the animation initially shuffle the position of individual neurons on the screen then animate how each neuron gradually returns to its original place in the multilayered network i know its a bit backwards and kind of looks like cheating but hey it gets the job done so lets create a network of 10 layers with 10 neurons in each layer and run it for a couple thousand iterations then use this function that i stole from network x documentation which creates a multilayered network x graph object from this specified layer sizes in our case thats 10 layers with 10 nodes each ive actually modified it at a little bit so that now not all the edges are shown only a random subset of them to make the animation not too crowded with the lines inside the definition of a manning scene lets create two coordinate systems one for the square grid and the other one for the layered layout that will map the index of each neuron to its position on the screen then randomly shuffle the positions of all individual neurons and create a mapping a kind of a lookup table specifying that the first neuron in the first layer should be located here second neuron here etc we can now create the graph object and tell magnum its layout the positions of individual nodes to animate the colors of the nodes according to the simulation data we are going to make use of the magnums value tracker class lets create an updater function that will be called on every single frame this updater will change the colors of our graphs nodes according to a color map and the value thats been passed into the color map is obtained by taking the value of our value tracker on a given frame and interpolating the simulation array for every neuron finally we need to connect the updater function to the graph object and animate the value tracker to make it transverse a specified number of frames this will create the animation similar to the one we had in matlab but with the positions of neurons being randomly shuffled but what if after playing for a few seconds of activity in this shuffled state we want to rearrange the neurons into the original layered structure without interrupting the activity animation well luckily manium is very clever about playing multiple animations together so all we need to do is create a list of animations that will move each node into its original position append this list with an animation for incrementing the value of the value tracker and play the resulting collection of animations lastly lets play a few seconds of activity in the layered configuration by incrementing the value tracker without moving the nodes by the way i hope you can appreciate how convenient it is to use manims graph object since when we animated the positions of nodes all the edges were animated automatically as you can see pretty much every single animation we covered today involved python in one way or another indeed this programming language is quite powerful and has enormous applications if youd like to get started with python and potentially create your own visualizations you are going to love our todays sponsor brilliantorg brilliant is an exceptional online platform that offers interactive courses in stem fields what sets brilliant apart is their emphasis on active learning and problem solving approach enabling you to tackle real world challenges with confidence the courses are packed with interactivity and stunning visualizations that help you develop an intuitive understanding of even the most challenging concepts while problems and quizzes further consolidate the knowledge brilliant offers over 90 courses on a variety of subjects for multiple levels of difficulty whether you are a complete beginner or a professional looking to expand your skills brilliant has got you covered for example if you are interested in implementing some of the visuals from this video you may want to check out their course called programming with python to get a firm grasp on the fundamentals such as variables loops and functions and from there you can move on to algorithm fundamentals to learn more complex algorithms like array sorting and stable matching dont hesitate to take curiosity to the next level and start learning at your own pace just by dedicating 15 minutes a day go to brilliantorg artem care sonoff to get a 30day free trial of everything brieland has to offer and the first 200 people to use this link will get 20 off the premium subscription all right well i hope some of it was helpful if i left out a particular animation and you would like to know more about it let me know down in the comment section and who knows maybe ill create a part too in the meantime if you enjoyed this video press the like button share it with your friends and colleagues and subscribe to the channel if you havent already stay tuned for more interesting topics coming up goodbye and thank you for the interest in science visualization music 