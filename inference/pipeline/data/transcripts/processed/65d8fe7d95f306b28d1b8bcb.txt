between computers over internet what is it why   is it so popular lets take a look api stands  for application programming interface it is   a way for two computers to talk to each other  the common api standard used by most mobile and   web applications to talk to the servers is called  rest it stands for representational state transfer  it is a mouthful what does that mean rest is not  a specification it is a new set of rules that   has been the common standard for building web api  since the early 2000s an api that follows the rest   standard is called a restful api some reallife  examples are twilio stripe and google maps   lets look at the basics of rest a restful api  organizes resources into a set of unique uris or   uniform resource identifiers the uris  differentiate different types of resources   on a server here are some examples the resources  should be grouped by noun and not verb an api to   get all products should be slash products and not  slash getallproducts a client interacts with a   resource by making a request to the endpoint for  the resource over http the request has a very   specific format as shown here the line contains  the uri for the resource wed like to access   the uri is preceded by an http verb which tells  the server what we want to do with the resource   a post request means we want to create a  new resource a get means we want to read   the data about an existing resource a put is  for updating an existing resource a delete is   for removing an existing resource you might have  heard the acronym crud this is what it stands for   in the body of these requests there could be  an optional http request body that contains   a custom payload of data usually encoded in  json the server receives a request processes it   and formats the result into a response the first  line of the response contains the http status code   to tell the client what happened to the request  a wellimplemented restful api returns proper   http status codes the 200level codes mean the  request was successful the 400level codes means   something was wrong with our request for example  the requests contain incorrect syntax at the 500  level it means something went wrong at the server  level for example the service was unavailable   a wellbehaved client could choose to retry a  failed request with a 500level status code we   said could choose to retry because some actions  are not idempotent and those require extra care   when retrying when an api is idempotent making  multiple identical requests has the same effect   as making a single request this is usually not the  case for a post request to create a new resource   the response body is optional and could contain  the data payload and is usually formatted in json   theres a critical attribute of  rest that is worth discussing more   a rest implementation should be stateless it  means the two parties dont need to store any   information about each other and every request  and response cycle is independent from all others   this leads to web applications that are easy to  scale and well behaved there are two final points   to discuss to round out a wellbehaved restful api  if an api endpoint returns a huge amount of data   use pagination a common pagination scheme  uses limit and offset as parameters here is   an example if they are not specified the server  should assume sensible default values lastly   versioning of an api is very important versioning  allows an implementation to provide backward   compatibility so that if we introduce breaking  changes from one version to another consumers   can get enough time to move to the next version  there are many ways to version an api the most   straightforward is to prefix the version before  the resource on the uri for instance like this restful api is simple and effective when  applied sensibly it may not be the best   choice for all companies but it is simple and  good enough and thats why it is so widely used   there are other popular api options like graphql  and grpc well discuss those and compare them in   separate videos if you would like to learn more about system  design check out our books and weekly newsletter   please subscribe if you learned something new  thank you so much and well see you next time 