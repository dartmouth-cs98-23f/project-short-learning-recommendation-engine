if debugging is the process of removing software bugs then programming must be the process of putting them in in most cases the bugs we introduce are harmless but sometimes they can cause us to lose hundreds of millions of dollars in a few minutes crash airplanes and spaceships and kill people today i want to tell you some stories about the most damaging hacks and bugs throughout history and explain seven software security concepts that every developer should know if youre new here like and subscribe and check out the full writeup on bioship io there are billions upon billions of lines of code in production today around 50 million lines for microsoft windows and over 2 billion lines across all google services and within all this code we have vulnerabilities that have either not yet been discovered or not yet been fixed these are known as zeroday vulnerabilities because as a developer you have zero days to get it fixed when a hacker decides to attack this vulnerability its known as a zeroday exploit remember that one time equifax had exposed the credit reports of a hundred and fifty million people that wasnt the result of a zeroday exploit it was the result of a known bug and apache struts that had already been fixed weeks ago what sorry guys hackers apparently from china had been scanning the web for servers with this vulnerability they hit the mother lode with equifax and extracted sensitive information over the next 76 days this breach has cost the company over a billion dollars and could have been prevented by installing a simple security patch being hacked by a known vulnerability is not uncommon at all in fact youre likely shipping code with a lot of known vulnerabilities right now if youre a js developer go into your project and hit npm audit it will give you a breakdown of all the different ways you can be hacked via your open source dependencies now theres no reason to panic if you have hundreds of high severity alerts the best way to avoid being hacked is to simply update your packages but if you truly want to understand the flaws that are compromising these packages you should enroll in the enterprise security course from angular academy its a ten week long program that will teach you how to confidently build secure web applications youll find the link in the description and you can use this code to take 50 off the enrollment price using components with known vulnerabilities is one of the most common ways that web applications get hacked but its also very preventable because as you can see here most of the issues have already been patched and keep in mind this issue isnt unique to javascript or npm all package managers that rely on open source code face similar issues so trust nobody and keep your packages updated but most of all sammy is my peer oh wait a second i didnt mean to say that last part it was somehow injected into this video back in 2005 a guy named sammy used an exploit known as crosssite scripting to updated users myspace profile with this text within a day it had spread to over a million users it was mostly harmless but they did a rest sammy can victim of a felony and worst of all took away his internet for a year a crosssite scripting exploit occurs when the attacker manages to run some javascript code on a different users browser there are a few different ways to achieve this but the most common way is for the attacker to save the script in a web applications database the malicious script will then be accessed by a different user that will execute the javascript on the client side device and at that point the javascript code can submit forms click on buttons on behalf of the logged in user so how do you avoid crosssite scripting attacks as a developer well the attacker first needs to save some malicious code on your server so step one is to do some serverside validation of incoming data if its surrounded by script tags you might not want to save it but lets imagine you fail to sanitize the incoming data the attacker still needs a way to run that script on the clientside device so the attacker is counting on you to render out the raw html of the script fortunately modern frontend frameworks make it really difficult to shoot yourself in the foot in react for example if you want to write unsafe code you have to use this dangerously set inner html prop just to do so so with crosssite scripting we have malicious code running on the browser but its also possible to run bad code directly on a database lets go back to 2008 and look at a company named heartland payment systems a company with the highest standards and the most trusted transactions and also a company if that was the target of one of the most elaborate and interesting hacks of all time the attackers first gained access to the companys databases by using a technique known as sql injection instead of sending the expected data to the database they sent raw sql statements and because the data was not validated the database would run this code as if it came from the developers now this particular database contain the information that you would find on the back of a magnetic strip on a credit card and they use this stolen data to create counterfeit credit cards that actually worked its estimated that over a hundred million cards were compromised and hacker albert gonzalez was sentenced to 20 years in prison injection attacks similar to this effect many different types of databases if you use an orm or object relational mapping tool for your database you should be safe from attacks like this but of course its always a good idea to validate your input before its sent to your database another very easy way to create a big problem as a developer is to expose or leak a sensitive api key you can think of a private api key as a username and password and all bundled up into a single string and it allows your servers to securely communicate with paid services like aws google cloud and so on a few years ago i accidentally leaked my aws api key and it was almost really bad i was using the node sdk for a service that required the api key i hardcoded the api key directly in a source code instead of setting it as an environment variable i then proceeded to push the source code to a public github repo a few weeks went by and then all of a sudden i get a notification from aws that ive maxed out my budget when i logged into my aws account i had racked up charges around 5000 for ec2 instances running all over the world luckily amazon was nice enough to refund those charges but it definitely made me feel like an idiot nowadays automatic scanners can often detect if you have an exposed api key and email you a notification but github isnt the only place that you might leak an api key when you include a private key in a clientside web or mobile app a hacker might be able to find it directly in your source code now if you do end up with an exposed api key you can fix the problem by simply rolling it to a new value and of course were moving it from any public repos or source code many good api s will help you minimize the damage by allowing you to assign privileges to a specific api key this allows you to follow the principle of least privilege and only give api keys access to the resources that they actually need that will mitigate the amount of damage that can be done if that key does end up being leaked if we look at a major cloud provider like aws will see that they offer hundreds of different services and they might be used by a company with thousands of employees working on different projects sharing a single api key that has access to everything would be a very bad idea instead the major cloud providers have a system called im which allows you to create groups or roles for your organization once youve created a role can attach a policy to that role to give it access to a service that it needs implementing finegrained access control over your data is more important than ever in 2016 an employee of morrisons supermarkets in the uk stole the private data of over 100000 employees this rogue employee did it by simply copying the data onto a usb stick now this is obviously unethical and illegal on the employees part but the company itself is facing a huge lawsuit and the penalties for data breaches are becoming larger with laws like gdp are in the eu so the bottom line here is to always follow the principle of least privilege when it comes to accessing your customer or employee data in speaking of data you might come across something called the cia triad its a model for data security that stands for confidentiality integrity and availability generally speaking you make data confidential by implementing user authentication so only authorized users can access the data integrity it means the data cant be accidentally modified or deleted without the users authorization but i think the most interesting question is how do you make your data highly available in 2018 github survive the biggest ddos attack or a distributed denial of service attack in history it took github down for less than 10 minutes but thats still a pretty big deal considering how many people around the world depend on github at any given moment a ddos attack works by flooding a service with so much traffic that it just fails to scale and completely stops working you can see in this chart how the inbound traffic suddenly spiked but the servers treated these as legitimate requests and responded with a normal response github is big enough to handle attacks like this but smaller sites might not be so lucky in some cases ddos attacks have been used to shut down a service and then request a ransom from the owner so how do you protect yourself well the simple answer is to be ready to scale and that likely means using a big cloud provider a service like google cloud armor has the bandwidth to handle attacks like this and it can also prevent many other attacks that we talked about earlier in the video but at the end of the day nobodys application is 100 safe there are likely hackers out there right now using zeroday exploits that we dont know about yet and its only a matter of time before the next major data breach is in the headlines if this video helped you please like and subscribe and make sure to check out the enterprise security course if you really want to master these concepts thanks for watching and i will talk to you soon music 