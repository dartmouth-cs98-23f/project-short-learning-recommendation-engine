hello guys welcome back to my channel today we are going to talk about mistral so as you know mistral is a new language model that came out a few months ago from mistal ai which is a one of the hottest startup right now in europe for language models it also became a unicorn recently and we will exploring both the models they released one is the 7 billion and one is the 8 by7 billion model so lets review the topics of today the first thing i will introduce you is the architectural differences between the vanilla transformer and the architecture of mistal later we will see what is the sliding window attention and how it is related to the concept of receptive field a concept that usually we find in convolutional neural networks i will briefly review the kv cache because i want to introduce the concept of rolling buffer cache and also how it is done with prefilling and chunking uh we will see what is sparse mixture of experts model sharding with a little with a very brief introduction with the pipeline parallelism and last but not least we will also go through the code of mistal because there is a lot of innovations in the code especially when they use the x forers library with the block attention so i want to guide you into understanding the code because it can be really hard for be th is uh what is the context size of upon which it the model was trained upon uh and its much bigger for the 8x 7b the vocabulary size is the same for both and then the last two parameters you can see here are related to the sparse mixture of experts and we will see later uh how it works but we just remember that we have eight experts and for each token we use two experts but later i will clarify how it works lets proceed further so lets talk about the sliding window attention but before we talk about the sliding window attention i need to review a little bit of the self attention mechanism so what is self attention self attention is a mechan ding on the mask we have applied so our mask says that the first token can only watch itself so the first output token will be an embedding that will only depend on itself the second token will only depend on the first two tokens the third output token will only depend on the first three tokens the fourth will depend on the token number two because the first token is not used the token number two the token number three and the token number four etc etc until the last here the last token will depend only on the last three tokens because the first three tokens are masked out and this is the importance of the mask that we apply in the self atten pend it to the input for the temp step three and this will become the new input which will produce love that can then we take the last token of the output and we append it to the input for the time step four so it will become the new output will become love that can quickly then we take this word quickly we append it to the input for the next time step and it will produce the next token as output etc etc until the last token until we see the end of sentence token as output then we know that the model has stopped uh um has stopped producing new tokens and we can stop the inference now at every step the inference we are only interested in the l ache so we need to add the tokens of our prompt to the kv cache that so that we can then exploit this kv cache to build new tokens future tokens now the prompt is known in advance right because because its the input of our user its what you ask to ch gpd for example right tell me a poem tell me write me a poem or tell me a joke this is our prompt so its known in advance so we dont we dont need to generate it okay so what we can do is we can prefill the kv cache using the tokens of the prompt but there are many ways to do it like we were doing before when i was teaching you about the k cach we work with one token at a time so one way to um to   to change from one model to the next so to keep the range of the output stable they apply the soft marx after they have selected how many uh experts they want to work with and choosing the logits of the best two performing uh experts okay the next thing we are talking going to talk about is model sharding which is also implemented in the code of the mistal model so lets talk about it when we have a model that is too big to fit in a single gpu we can divide the model into groups of layers and place each group of layers in a single gpu for example in the case of mistal we have 32 layers of encoders you can see here one after another i didnt do in a transformer will result in n output tokens in the output so we have uh here we have three  4 so 7 7  5 12 tokens as input it will produce 12 tokens as output to understand what is the next token for each prompt we need to check the the we need to check the embedding corresponding to the token number three for the first prompt to the token number seven for the second prompt and the last token for the third prompt so we take all these embeddings we run them through the linear layer then we apply the soft marks and then we understand what is the next uh token from our vocabulary but you may be wondering how do we even produce an attention m i just run some random tensors to study all the shapes of the tensor and all the information passing so i dont know if the code works but i hope it will works i mean i didnt touch the logic i just add some comments uh anyway you can use the commented code by me to as um as a learning tool to complement with the official code of mistal so that you can understand uh more about the inner workings of this grd model i actually really enjoyed studying it i really enjoyed studying the code and i learned a lot of stuff you know um i think its very very good when you are doing something that is very complicated because it teaches you a lot because if something is simple then you dont learn much by the end of the day anyway guys thanks you for watching my video i hope you also enjoyed this journey with me even if it was very complicated i hope that you likeed this video and you will subscribe to my channel if you didnt please do it and the best way to support me guys is to share this video with all the people you know so share it on social media share it on linkedin on twitter etc because this is the best way to you can help me is to grow my channel and um please let me know if there is something that you dont understand i am always available to help and connect with me on linkedin byebye 

whats up guys back today with another longer video which is to build a job board app that could actually be a real startup that people use theres a lot of different places to find entry level or junior developer jobs on the internet for example github jobs stack overflow jobs you have angel list you have indeed but filtering through those especially because you kind of have to spam applications for your first job can take a long time so the good thing about all these job boards is they have public apis for the most part you always want to start with an mvp that is the minimum viable product today that means were going to start with a single data feed that is a single job board api feeding into our app and then finally were gonna have a super minimal simple front end were gonna do this in react and material ui on the front end were gonna use an express server redis for our data storage because were not writing or persisting any data that is not part of the job feed and then finally a node cron job to fetch these jobs and refresh them at a certain interval which are going to be filtered through an algorithm so lets draw this all out to get a better idea of our plan heres our front end what we basically want here is a list of jobs this is going to be pulling data from our api and th r tasks and i know already that were going to need the cron node library its just going to help us run simple cron jobs which is what i was saying before is the its the way you run a task on an interval basically forever if you want to opening up a new terminal tab going out to our main directory and within our main directory im just going to create a package json which is going to be accessible from all our different folders so you can see that was created here and then we just want to install cron as a dependency okay now inside a worker i just this is the way i pretty much start with every uh with every app you just copy kind of the basic   though that its really fast its kind of like an object in javascript you just if you have the key its constant time access you just pull it out of your redis store and then you can serve it up in our case jumping back over to these um these job uh json that we got from github you can see every job has a uuid which is a guaranteed unique id because it has so many characters and its random characters so itll be guaranteed unique every time every job has one of these ids so thats a natural candidate to use as a redis key im thinking within redis our key is going to be this id and our value is just going to be the whole job object so it would be  just to see the length and or rather see that the length matches our our length that we put in lets parse it and then lets do dot lake okay so its kind of a lot that we did without testing it lets restart our server do the same curl oh man okay 245 i dont remember if thats how many we put in were definitely getting a list of 245 which is a good sign now lets just try sending this back and see if we get that full uh stringified object thats exactly what we want and its that easy so thats already done so i dont know how long its been guys but with this simple of an api we can literally weve literally been able to create all this like in such a t put this whole thing below our uh jobs map and um lets see if by pasting it directly in we we need to do anything else just going to make sure thats formatted correctly saved it and um lets just take this out classes direction rtl okay lets see how theme is being used because this is kind of a um darn all right i dont know why that would change from left to right but um it might be a mobile implementation specific thing so lets just take this and hard code it as right and well hard code this one as left and see if we run in any problems okay save that and cant find module oh i forgot about this material ui icons is a separate library so we   you can buy a domain a ton of different places i just like google because the interface and its because where my uh other domains are so ive opened my domain i already bought it a normalcom domain is going to be about 14 a year and the first thing we need to do is use the digital ocean name servers so that domain can be directed over to our server so youll see that i have clicked on my domain ive opened the dns tab and then theres a name servers tab and ive clicked use custom name servers now im going to put that on pause and jump over to the digital ocean dashboard you can make a digitalocean account for free and itll give you this dashboar pi jobs now that means we also have to change our api route which shouldnt be a problem slash api slash jobs and we have to make one change in our package json and thats adding a proxy config which allows this to still work on local development this doesnt affect anything on production so um proxying all api routes to a target of localhost sorry need the double quotes there http localhost uh 3001 was our api server i believe and ill save that and again that just helps us you know still develop in the same way but we need to make one config change for the production server as well so that was our change in um in our files and as i mentioned im s thats it we basically built a whole production application in less than 100 minutes and we got it deployed and now its running on the public internet at entrylevelsoftwarejobscom so go check it out but um im thinking next theres a few critical things we have to do before were ready for like a full production launch so to speak this was just our base framework that were building more features off of but at minimum i think we need a few more data feeds and we need to make our algorithm a lot more robust prevent it from breaking on errors as well as filtering down those jobs a lot more because if we get in five feeds were just gonna have a huge amount of jobs and we really wanna make sure those are entry level jobs so im thinking that we parse through the description and look for like three to five years of experience and take those out i think anything less than three years would qualify as an entrylevel job so again were gonna have to keep working on the algorithm and then otherwise were gonna want to add a little bit of monitoring logging different things like that but that can all come later our mvp is done and our base of our application is done so thats pretty cool so anyway hope you learned something um let me know if you have any questions and i will talk to you guys soon 

this video is about a new approach to training language models specifically it allows you to move the probabilities of a language model away from bad answers and towards good answers direct preference optimization or dpo for short is a type of reinforcement learning its a more efficient type than has long been used by companies like open ai and meta in developing lama 2 and with this dpo technique it makes it much easier to find you models towards a chat format that is aligned in a similar way to those commercial models available for agenda were going to take a look at how normal training works standard finetuning or supervised finetuning as ive done in previous videos then ill contrast how direct preference optimization works and why its a bit different in terms of a technique and its useful in a different and complimentary way to standard finetuning then ill show you two dpo data sets the data sets need to be in a specific format if youre going to use the hugging face trainer that we will use today and then ill walk step by step through the training notebook ive developed for doing direct preference optimization by the end of this tutorial you should be able to take a model youve developed a language model ideally you do some supervised finetuning to get it into a chat format and this will allow you to do the final stage of aligning the model um another way to think of that is moving the model probabilities away from bad answers and towards good answers that will make sense have is the actual next token but here in direct preference optimization we have a pair of options we have a chosen and we have a rejected option and the way that we penalize the model now is not by comparing the actual to the predicted but rather we penalize the model so that the probability of dublin of the model were training we want that probability to be high relative to a ref reference model the reference model is just a copy of the model when we start this whole dpo step so imagine starting dpo we have a model we duplicate it so we now have a model and a reference model and during the training were going to penalize the model in such a way to incentivize the probability of the model being trained increasing for dublin relative to the e the ultrat set the other data set thats available is helpful and harmless from anthropic its 160rows about 40type and 120sets been around for a while and its been used to train lama 2 um its probably being used to train a lot of models and it does something a little different than just pointing uh the model from bad answers to good answers its also trying to achieve a level of safety and avoid the model spitting out uh perhaps s harmful dangerous type results just as an example one uh instruction set that you might see a type of instruction set you might see in the harmless part of the data set is as follows the prompt might be how do i do something dangerous and the chosen answer which is what we want to incentivize the model towards is  so im not sure the end of sequence token is required but just for consistency i think its good to format it like this the next thing were going to need is a reference model i have a reference model here which is the tiny lama model i said i would be training on this is a model that i have trained with supervised finetuning using the open assist data set its available here um for you to download if you like and as i said its a chat finetuned model tiny lama is only trained on a 2k context length i did the finetuning using 4k context it helps a little bit with the 2k performance but its not good enough to get the model to be a 4k data set so well be considering it a 2k data set even though that i call it 4k because i used 4k long or up to 4k   some ugly questions and then we want to see that it gives what wed consider an an unacceptable answer before the fine tuning and gives hopefully a more acceptable answer after the dpo so ive set up uh some questions here um yeah unfortunately a lot of this kind of training involves ugly questions um which you will ask the model and when you run that base evaluation here its bluntly answering the question which you may not want um if you want to have a model that is going to be better behaved or aligned but this provides us with a baseline then we can then that we can then compare after the training and hopefully this data set will have the effect that we intend okay so were loading the data set that i just took you through its the dpo um h ou how it diverges but also it actually gives you a sense for the effect it has in the model because it does start to change the answer so right here with the 1 e minus 5 everything is very same the only difference is that when i ran the training i had it at a learning rate of 1 e minus 5 which is higher than 1 eus 6 by factor of 10 and indeed when i run that training and then i run the first sample here um you can see the answer is quite different now so when its asked about killing it starts to give an answer that um is a bit more restrained its um now asking that peoples um human rights and emotions be considered its giving a much more verbose answer trying to indicate more nuance around the topic i wouldnt say that its got the answer to gin for that so that we have logs so heres my weights and biases id and next up we will do the installation so install all of packages necessary move on to loading the model here as i said not loading at quantize because its a small model so there shouldnt be any issue with doing that and im going to prepare the model then for finetuning and stick with this selection here of target modules for that fine tuning initiate the tokenizer and once the tokenizer is done well move towards setting up evaluation printing some evaluation results and then loading the data set that were going to use for training now im going to make a little alteration here this time around im not going to trim the data set so im going to use the full eval data set whic iner is up and running and you can see were now 17 steps into 10about um its about an 8 hour run so fairly long even though this uh is quite a small model just a 1 billion parameter model so just gives you a feel for the amount of time if youre doing a full fine tune u rather if youre doing a lower fine tune on the model and here we can just click on the weights and biases and we should be able to pull up a copy of this run and you can see here training loss is progressing and im going to just go to overview and just put in here what the run is about one e minus 6 and well say one e but run tiny like this and thats it ill post up later how the run goes that folks is an overview of direct preference optimization it is a lot easier than doing reinforcement learning where you need to train a separate helper model still doing dpo direct preference op optimization its not an easy feat and you need to pay a lot of attention to having a data set thats comprehensive choosing some questions for evaluation that allow you to tell whether your training is progressing or not you also need to be comfortable with chat find tuning a model which is a form of supervised finetuning if you want to get started with something a little easier i recommend going back over the videos for embeddings unsupervised fine tuning and supervised fine tuning with respect to this video ill put all of the links on resources below and you can find out more about getting access to the scripts and data sets cheers 

#####################
Shot: mixtral8x7b
#####################
#####################
Shot: full-stack
#####################
#####################
Target: dpo
#####################
hello guys welcome back to my channel today we are going to talk about mistral so as you know mistral is a new language model that came out a few months ago from mistal ai which is a one of the hottest startup right now in europe for language models it also became a unicorn recently and we will exploring both the models they released one is the 7 billion and one is the 8 by7 billion model so lets review the topics of today the first thing i will introduce you is the architectural differences between the vanilla transformer and the architecture of mistal later we will see what is the sliding window attention and how it is related to the concept of receptive field a concept that usually we find in convolutional neural networks i will briefly review the kv cache because i want to introduce the concept of rolling buffer cache and also how it is done with prefilling and chunking uh we will see what is sparse mixture of experts model sharding with a little with a very brief introduction with the pipeline parallelism and last but not least we will also go through the code of mistal because there is a lot of innovations in the code especially when they use the x forers library with the block attention so i want to guide you into understanding the code because it can be really hard for be th is uh what is the context size of upon which it the model was trained upon uh and its much bigger for the 8x 7b the vocabulary size is the same for both and then the last two parameters you can see here are related to the sparse mixture of experts and we will see later uh how it works but we just remember that we have eight experts and for each token we use two experts but later i will clarify how it works lets proceed further so lets talk about the sliding window attention but before we talk about the sliding window attention i need to review a little bit of the self attention mechanism so what is self attention self attention is a mechan ding on the mask we have applied so our mask says that the first token can only watch itself so the first output token will be an embedding that will only depend on itself the second token will only depend on the first two tokens the third output token will only depend on the first three tokens the fourth will depend on the token number two because the first token is not used the token number two the token number three and the token number four etc etc until the last here the last token will depend only on the last three tokens because the first three tokens are masked out and this is the importance of the mask that we apply in the self atten pend it to the input for the temp step three and this will become the new input which will produce love that can then we take the last token of the output and we append it to the input for the time step four so it will become the new output will become love that can quickly then we take this word quickly we append it to the input for the next time step and it will produce the next token as output etc etc until the last token until we see the end of sentence token as output then we know that the model has stopped uh um has stopped producing new tokens and we can stop the inference now at every step the inference we are only interested in the l ache so we need to add the tokens of our prompt to the kv cache that so that we can then exploit this kv cache to build new tokens future tokens now the prompt is known in advance right because because its the input of our user its what you ask to ch gpd for example right tell me a poem tell me write me a poem or tell me a joke this is our prompt so its known in advance so we dont we dont need to generate it okay so what we can do is we can prefill the kv cache using the tokens of the prompt but there are many ways to do it like we were doing before when i was teaching you about the k cach we work with one token at a time so one way to um to   to change from one model to the next so to keep the range of the output stable they apply the soft marx after they have selected how many uh experts they want to work with and choosing the logits of the best two performing uh experts okay the next thing we are talking going to talk about is model sharding which is also implemented in the code of the mistal model so lets talk about it when we have a model that is too big to fit in a single gpu we can divide the model into groups of layers and place each group of layers in a single gpu for example in the case of mistal we have 32 layers of encoders you can see here one after another i didnt do in a transformer will result in n output tokens in the output so we have uh here we have three  4 so 7 7  5 12 tokens as input it will produce 12 tokens as output to understand what is the next token for each prompt we need to check the the we need to check the embedding corresponding to the token number three for the first prompt to the token number seven for the second prompt and the last token for the third prompt so we take all these embeddings we run them through the linear layer then we apply the soft marks and then we understand what is the next uh token from our vocabulary but you may be wondering how do we even produce an attention m i just run some random tensors to study all the shapes of the tensor and all the information passing so i dont know if the code works but i hope it will works i mean i didnt touch the logic i just add some comments uh anyway you can use the commented code by me to as um as a learning tool to complement with the official code of mistal so that you can understand uh more about the inner workings of this grd model i actually really enjoyed studying it i really enjoyed studying the code and i learned a lot of stuff you know um i think its very very good when you are doing something that is very complicated because it teaches you a lot because if something is simple then you dont learn much by the end of the day anyway guys thanks you for watching my video i hope you also enjoyed this journey with me even if it was very complicated i hope that you likeed this video and you will subscribe to my channel if you didnt please do it and the best way to support me guys is to share this video with all the people you know so share it on social media share it on linkedin on twitter etc because this is the best way to you can help me is to grow my channel and um please let me know if there is something that you dont understand i am always available to help and connect with me on linkedin byebye 

whats up guys back today with another longer video which is to build a job board app that could actually be a real startup that people use theres a lot of different places to find entry level or junior developer jobs on the internet for example github jobs stack overflow jobs you have angel list you have indeed but filtering through those especially because you kind of have to spam applications for your first job can take a long time so the good thing about all these job boards is they have public apis for the most part you always want to start with an mvp that is the minimum viable product today that means were going to start with a single data feed that is a single job board api feeding into our app and then finally were gonna have a super minimal simple front end were gonna do this in react and material ui on the front end were gonna use an express server redis for our data storage because were not writing or persisting any data that is not part of the job feed and then finally a node cron job to fetch these jobs and refresh them at a certain interval which are going to be filtered through an algorithm so lets draw this all out to get a better idea of our plan heres our front end what we basically want here is a list of jobs this is going to be pulling data from our api and th r tasks and i know already that were going to need the cron node library its just going to help us run simple cron jobs which is what i was saying before is the its the way you run a task on an interval basically forever if you want to opening up a new terminal tab going out to our main directory and within our main directory im just going to create a package json which is going to be accessible from all our different folders so you can see that was created here and then we just want to install cron as a dependency okay now inside a worker i just this is the way i pretty much start with every uh with every app you just copy kind of the basic   though that its really fast its kind of like an object in javascript you just if you have the key its constant time access you just pull it out of your redis store and then you can serve it up in our case jumping back over to these um these job uh json that we got from github you can see every job has a uuid which is a guaranteed unique id because it has so many characters and its random characters so itll be guaranteed unique every time every job has one of these ids so thats a natural candidate to use as a redis key im thinking within redis our key is going to be this id and our value is just going to be the whole job object so it would be  just to see the length and or rather see that the length matches our our length that we put in lets parse it and then lets do dot lake okay so its kind of a lot that we did without testing it lets restart our server do the same curl oh man okay 245 i dont remember if thats how many we put in were definitely getting a list of 245 which is a good sign now lets just try sending this back and see if we get that full uh stringified object thats exactly what we want and its that easy so thats already done so i dont know how long its been guys but with this simple of an api we can literally weve literally been able to create all this like in such a t put this whole thing below our uh jobs map and um lets see if by pasting it directly in we we need to do anything else just going to make sure thats formatted correctly saved it and um lets just take this out classes direction rtl okay lets see how theme is being used because this is kind of a um darn all right i dont know why that would change from left to right but um it might be a mobile implementation specific thing so lets just take this and hard code it as right and well hard code this one as left and see if we run in any problems okay save that and cant find module oh i forgot about this material ui icons is a separate library so we   you can buy a domain a ton of different places i just like google because the interface and its because where my uh other domains are so ive opened my domain i already bought it a normalcom domain is going to be about 14 a year and the first thing we need to do is use the digital ocean name servers so that domain can be directed over to our server so youll see that i have clicked on my domain ive opened the dns tab and then theres a name servers tab and ive clicked use custom name servers now im going to put that on pause and jump over to the digital ocean dashboard you can make a digitalocean account for free and itll give you this dashboar pi jobs now that means we also have to change our api route which shouldnt be a problem slash api slash jobs and we have to make one change in our package json and thats adding a proxy config which allows this to still work on local development this doesnt affect anything on production so um proxying all api routes to a target of localhost sorry need the double quotes there http localhost uh 3001 was our api server i believe and ill save that and again that just helps us you know still develop in the same way but we need to make one config change for the production server as well so that was our change in um in our files and as i mentioned im s thats it we basically built a whole production application in less than 100 minutes and we got it deployed and now its running on the public internet at entrylevelsoftwarejobscom so go check it out but um im thinking next theres a few critical things we have to do before were ready for like a full production launch so to speak this was just our base framework that were building more features off of but at minimum i think we need a few more data feeds and we need to make our algorithm a lot more robust prevent it from breaking on errors as well as filtering down those jobs a lot more because if we get in five feeds were just gonna have a huge amount of jobs and we really wanna make sure those are entry level jobs so im thinking that we parse through the description and look for like three to five years of experience and take those out i think anything less than three years would qualify as an entrylevel job so again were gonna have to keep working on the algorithm and then otherwise were gonna want to add a little bit of monitoring logging different things like that but that can all come later our mvp is done and our base of our application is done so thats pretty cool so anyway hope you learned something um let me know if you have any questions and i will talk to you guys soon 

whats up guys back today with another longer video which is to build a job board app that could actually be a real startup that people use theres a lot of different places to find entry level or junior developer jobs on the internet for example github jobs stack overflow jobs you have angel list you have indeed but filtering through those especially because you kind of have to spam applications for your first job can take a long time so the good thing about all these job boards is they have public apis for the most part you always want to start with an mvp that is the minimum viable product today that means were going to start with a single data feed that is a single job board api feeding into our app and then finally were gonna have a super minimal simple front end were gonna do this in react and material ui on the front end were gonna use an express server redis for our data storage because were not writing or persisting any data that is not part of the job feed and then finally a node cron job to fetch these jobs and refresh them at a certain interval which are going to be filtered through an algorithm so lets draw this all out to get a better idea of our plan heres our front end what we basically want here is a list of jobs this is going to be pulling data from our api and that will be express and then this will pull from our store which is actually going to be redis and redis will be populated by our cron called a worker which is pulling from music one or more apis its g he way you run a task on an interval basically forever if you want to opening up a new terminal tab going out to our main directory and within our main directory im just going to create a package json which is going to be accessible from all our different folders so you can see that was created here and then we just want to install cron as a dependency okay now inside a worker i just this is the way i pretty much start with every uh with every app you just copy kind of the basic usage and you build your way out from there so all this does is its running a node process where were importing the library and then this is called a um cron shorthand cron syntax something like that uh cronguru you can see it here okay so this site is really useful its constant time access you just pull it out of your redis store and then you can serve it up in our case jumping back over to these um these job uh json that we got from github you can see every job has a uuid which is a guaranteed unique id because it has so many characters and its random characters so itll be guaranteed unique every time every job has one of these ids so thats a natural candidate to use as a redis key im thinking within redis our key is going to be this id and our value is just going to be the whole job object so it would be a string version of this that we can then pull out we know its already json so we can just stringify it and then when we pull it out well just parse it into a javascript object now the slightly tric ather see that the length matches our our length that we put in lets parse it and then lets do dot lake okay so its kind of a lot that we did without testing it lets restart our server do the same curl oh man okay 245 i dont remember if thats how many we put in were definitely getting a list of 245 which is a good sign now lets just try sending this back and see if we get that full uh stringified object thats exactly what we want and its that easy so thats already done so i dont know how long its been guys but with this simple of an api we can literally weve literally been able to create all this like in such a short amount of time we have a data feed and you can replicate like before before i go further you can replicate this in any this i m all right finally im going to just put this whole thing below our uh jobs map and um lets see if by pasting it directly in we we need to do anything else just going to make sure thats formatted correctly saved it and um lets just take this out classes direction rtl okay lets see how theme is being used because this is kind of a um darn all right i dont know why that would change from left to right but um it might be a mobile implementation specific thing so lets just take this and hard code it as right and well hard code this one as left and see if we run in any problems okay save that and cant find module oh i forgot about this material ui icons is a separate library so we have to also install that in our client yarn add material ui icon e description so like i mentioned first uh we need a domain i already bought one on google domains but you can buy a domain a ton of different places i just like google because the interface and its because where my uh other domains are so ive opened my domain i already bought it a normalcom domain is going to be about 14 a year and the first thing we need to do is use the digital ocean name servers so that domain can be directed over to our server so youll see that i have clicked on my domain ive opened the dns tab and then theres a name servers tab and ive clicked use custom name servers now im going to put that on pause and jump over to the digital ocean dashboard you can make a digitalocean account for free and itll give you this dashbo  that is to basically change this to just a relative path so im changing this to just slash jobs and actually i want to change it to be a little more clear to be slash api jobs now that means we also have to change our api route which shouldnt be a problem slash api slash jobs and we have to make one change in our package json and thats adding a proxy config which allows this to still work on local development this doesnt affect anything on production so um proxying all api routes to a target of localhost sorry need the double quotes there http localhost uh 3001 was our api server i believe and ill save that and again that just helps us you know still develop in the same way but we need to make one config change for the production server as then if i click apply itll take us to that position so thats pretty cool guys we just deployed our whole app and it didnt even take that long i feel like that was around 30 minutes or so all right guys thats it we basically built a whole production application in less than 100 minutes and we got it deployed and now its running on the public internet at entrylevelsoftwarejobscom so go check it out but um im thinking next theres a few critical things we have to do before were ready for like a full production launch so to speak this was just our base framework that were building more features off of but at minimum i think we need a few more data feeds and we need to make our algorithm a lot more robust prevent it from breaking on errors as well as filtering down those jobs a lot more because if we get in five feeds were just gonna have a huge amount of jobs and we really wanna make sure those are entry level jobs so im thinking that we parse through the description and look for like three to five years of experience and take those out i think anything less than three years would qualify as an entrylevel job so again were gonna have to keep working on the algorithm and then otherwise were gonna want to add a little bit of monitoring logging different things like that but that can all come later our mvp is done and our base of our application is done so thats pretty cool so anyway hope you learned something um let me know if you have any questions and i will talk to you guys soon 

#####################
Shot: mixtral8x7b
#####################
#####################
Shot: full-stack
#####################
#####################
Target: full-stack
#####################
hello guys welcome back to my channel today we are going to talk about mistral so as you know mistral is a new language model that came out a few months ago from mistal ai which is a one of the hottest startup right now in europe for language models it also became a unicorn recently and we will exploring both the models they released one is the 7 billion and one is the 8 by7 billion model so lets review the topics of today the first thing i will introduce you is the architectural differences between the vanilla transformer and the architecture of mistal later we will see what is the sliding window attention and how it is related to the concept of receptive field a concept that usually we find in convolutional neural networks i will briefly review the kv cache because i want to introduce the concept of rolling buffer cache and also how it is done with prefilling and chunking uh we will see what is sparse mixture of experts model sharding with a little with a very brief introduction with the pipeline parallelism and last but not least we will also go through the code of mistal because there is a lot of innovations in the code especially when they use the x forers library with the block attention so i want to guide you into understanding the code because it can be really hard for be th is uh what is the context size of upon which it the model was trained upon uh and its much bigger for the 8x 7b the vocabulary size is the same for both and then the last two parameters you can see here are related to the sparse mixture of experts and we will see later uh how it works but we just remember that we have eight experts and for each token we use two experts but later i will clarify how it works lets proceed further so lets talk about the sliding window attention but before we talk about the sliding window attention i need to review a little bit of the self attention mechanism so what is self attention self attention is a mechan ding on the mask we have applied so our mask says that the first token can only watch itself so the first output token will be an embedding that will only depend on itself the second token will only depend on the first two tokens the third output token will only depend on the first three tokens the fourth will depend on the token number two because the first token is not used the token number two the token number three and the token number four etc etc until the last here the last token will depend only on the last three tokens because the first three tokens are masked out and this is the importance of the mask that we apply in the self atten pend it to the input for the temp step three and this will become the new input which will produce love that can then we take the last token of the output and we append it to the input for the time step four so it will become the new output will become love that can quickly then we take this word quickly we append it to the input for the next time step and it will produce the next token as output etc etc until the last token until we see the end of sentence token as output then we know that the model has stopped uh um has stopped producing new tokens and we can stop the inference now at every step the inference we are only interested in the l ache so we need to add the tokens of our prompt to the kv cache that so that we can then exploit this kv cache to build new tokens future tokens now the prompt is known in advance right because because its the input of our user its what you ask to ch gpd for example right tell me a poem tell me write me a poem or tell me a joke this is our prompt so its known in advance so we dont we dont need to generate it okay so what we can do is we can prefill the kv cache using the tokens of the prompt but there are many ways to do it like we were doing before when i was teaching you about the k cach we work with one token at a time so one way to um to   to change from one model to the next so to keep the range of the output stable they apply the soft marx after they have selected how many uh experts they want to work with and choosing the logits of the best two performing uh experts okay the next thing we are talking going to talk about is model sharding which is also implemented in the code of the mistal model so lets talk about it when we have a model that is too big to fit in a single gpu we can divide the model into groups of layers and place each group of layers in a single gpu for example in the case of mistal we have 32 layers of encoders you can see here one after another i didnt do in a transformer will result in n output tokens in the output so we have uh here we have three  4 so 7 7  5 12 tokens as input it will produce 12 tokens as output to understand what is the next token for each prompt we need to check the the we need to check the embedding corresponding to the token number three for the first prompt to the token number seven for the second prompt and the last token for the third prompt so we take all these embeddings we run them through the linear layer then we apply the soft marks and then we understand what is the next uh token from our vocabulary but you may be wondering how do we even produce an attention m i just run some random tensors to study all the shapes of the tensor and all the information passing so i dont know if the code works but i hope it will works i mean i didnt touch the logic i just add some comments uh anyway you can use the commented code by me to as um as a learning tool to complement with the official code of mistal so that you can understand uh more about the inner workings of this grd model i actually really enjoyed studying it i really enjoyed studying the code and i learned a lot of stuff you know um i think its very very good when you are doing something that is very complicated because it teaches you a lot because if something is simple then you dont learn much by the end of the day anyway guys thanks you for watching my video i hope you also enjoyed this journey with me even if it was very complicated i hope that you likeed this video and you will subscribe to my channel if you didnt please do it and the best way to support me guys is to share this video with all the people you know so share it on social media share it on linkedin on twitter etc because this is the best way to you can help me is to grow my channel and um please let me know if there is something that you dont understand i am always available to help and connect with me on linkedin byebye 

whats up guys back today with another longer video which is to build a job board app that could actually be a real startup that people use theres a lot of different places to find entry level or junior developer jobs on the internet for example github jobs stack overflow jobs you have angel list you have indeed but filtering through those especially because you kind of have to spam applications for your first job can take a long time so the good thing about all these job boards is they have public apis for the most part you always want to start with an mvp that is the minimum viable product today that means were going to start with a single data feed that is a single job board api feeding into our app and then finally were gonna have a super minimal simple front end were gonna do this in react and material ui on the front end were gonna use an express server redis for our data storage because were not writing or persisting any data that is not part of the job feed and then finally a node cron job to fetch these jobs and refresh them at a certain interval which are going to be filtered through an algorithm so lets draw this all out to get a better idea of our plan heres our front end what we basically want here is a list of jobs this is going to be pulling data from our api and th r tasks and i know already that were going to need the cron node library its just going to help us run simple cron jobs which is what i was saying before is the its the way you run a task on an interval basically forever if you want to opening up a new terminal tab going out to our main directory and within our main directory im just going to create a package json which is going to be accessible from all our different folders so you can see that was created here and then we just want to install cron as a dependency okay now inside a worker i just this is the way i pretty much start with every uh with every app you just copy kind of the basic   though that its really fast its kind of like an object in javascript you just if you have the key its constant time access you just pull it out of your redis store and then you can serve it up in our case jumping back over to these um these job uh json that we got from github you can see every job has a uuid which is a guaranteed unique id because it has so many characters and its random characters so itll be guaranteed unique every time every job has one of these ids so thats a natural candidate to use as a redis key im thinking within redis our key is going to be this id and our value is just going to be the whole job object so it would be  just to see the length and or rather see that the length matches our our length that we put in lets parse it and then lets do dot lake okay so its kind of a lot that we did without testing it lets restart our server do the same curl oh man okay 245 i dont remember if thats how many we put in were definitely getting a list of 245 which is a good sign now lets just try sending this back and see if we get that full uh stringified object thats exactly what we want and its that easy so thats already done so i dont know how long its been guys but with this simple of an api we can literally weve literally been able to create all this like in such a t put this whole thing below our uh jobs map and um lets see if by pasting it directly in we we need to do anything else just going to make sure thats formatted correctly saved it and um lets just take this out classes direction rtl okay lets see how theme is being used because this is kind of a um darn all right i dont know why that would change from left to right but um it might be a mobile implementation specific thing so lets just take this and hard code it as right and well hard code this one as left and see if we run in any problems okay save that and cant find module oh i forgot about this material ui icons is a separate library so we   you can buy a domain a ton of different places i just like google because the interface and its because where my uh other domains are so ive opened my domain i already bought it a normalcom domain is going to be about 14 a year and the first thing we need to do is use the digital ocean name servers so that domain can be directed over to our server so youll see that i have clicked on my domain ive opened the dns tab and then theres a name servers tab and ive clicked use custom name servers now im going to put that on pause and jump over to the digital ocean dashboard you can make a digitalocean account for free and itll give you this dashboar pi jobs now that means we also have to change our api route which shouldnt be a problem slash api slash jobs and we have to make one change in our package json and thats adding a proxy config which allows this to still work on local development this doesnt affect anything on production so um proxying all api routes to a target of localhost sorry need the double quotes there http localhost uh 3001 was our api server i believe and ill save that and again that just helps us you know still develop in the same way but we need to make one config change for the production server as well so that was our change in um in our files and as i mentioned im s thats it we basically built a whole production application in less than 100 minutes and we got it deployed and now its running on the public internet at entrylevelsoftwarejobscom so go check it out but um im thinking next theres a few critical things we have to do before were ready for like a full production launch so to speak this was just our base framework that were building more features off of but at minimum i think we need a few more data feeds and we need to make our algorithm a lot more robust prevent it from breaking on errors as well as filtering down those jobs a lot more because if we get in five feeds were just gonna have a huge amount of jobs and we really wanna make sure those are entry level jobs so im thinking that we parse through the description and look for like three to five years of experience and take those out i think anything less than three years would qualify as an entrylevel job so again were gonna have to keep working on the algorithm and then otherwise were gonna want to add a little bit of monitoring logging different things like that but that can all come later our mvp is done and our base of our application is done so thats pretty cool so anyway hope you learned something um let me know if you have any questions and i will talk to you guys soon 

in a previous episode of the vacuum engineering show i talked about hash tables and how uh powerful and very commonly used they are given a key we can find its corresponding value in no time in zero seek time were not searching were not scanning were not doing anything its a single axis in memory retrieving that value the power behind hash tables is the use of the arrays which is a very common data structure obviously very very common data structure right knowing the array position the the index you can get the value of the array immediately because you know how how does memory work if you know the address of the ram where your cell exists where your values exist you can get the value immediately right the cpu can fetch the value immediately for you right so once you find the index you find the address you can value so what the hash table guys did it says okay were gonna take your name your string your color your car your va anything that has been this key were going to hash it using a oneway function and then convert that into an index using a modulo function based on the array size so we eventually from the name we convert and continue an index and that will give us the address and the memory and we can get the value so thats the trick the hash table guys use you know so the only cost you add is like what the hashing function which is not really that bad but thats the power of the hash table but the problem is the moment the size of the array changes the hash table size cha atabase and getting a better performance but regardless lets assume youre a youtube scale lets give you a google scale and you run out ideas that single instance cant handle anymore you need to distribute the billions of rows table or key dictionary or collection into multiple servers right so instead of having billions lets have i know a few millions on this server and few millions on this server a few millions on the server female in the server immediately a problem occur the problem is like how do i know right if i have a key i want to look it up we introduced an intermediately an intermediary problem right that didnt exist before well first if i have a key i go to my database server and i ask it and i immediately give it to me i only go where you exhausted all your options you know when it comes to a single instance right then you moved he says hey i have to move to and uh distribute the system its just too large you gotta move so people what they did says okay i have a key and now i dont know which i have 10 servers right i dont know where this key lives in distant server environment so ill say all right so were going to do lets say i have four server a cluster with four servers and i want to distribute my values across these four servers so server s0 s1 s2 and s3 right what were gonna do is like giving the key i need to know the server name the server ip and thats something that we are introducing as a problem like we introduced a friction that didnt exist before first p l key values are now all shuffled right previously value number four used you do for modulo 4 the key four used to live on server s0 because 4 modulo 4 is zero but now for modulo 5 which is now the new server we have five servers is actually gives you value four so its now as an s4 so now what you need to do is like move the key with a value four from the server zero to server four and now you have to move everything else and this is this is basically the same thing five modulo five right the server five the the key four will move to server four the key eight will move to server three the key 5 will move to server 0 the key 6 will move to server 1 and the key 7 will move to the key 7 will move to s1 right so everything will be shuffled and  er 4 youre going to get s 180 if after you do that and then server 3 gonna get s2270 we have s0 s90 s180 and s270 you know thats that completes an actual range and for people listening in the podcast think of this as an actual ring with the values for servers and each corner effectively so why are we doing this the beauty here is we have values and this is the key here lets have a key value of a thousand same thing youre gonna do right the thousand the key value thousand right however this key exists maybe it was blue and then you did a hash and then got you got the number thousand you take that thousand right and you do a modular 360 will you get an actual server immediately the server index no youre not going to get that so now lets lets  alue youre going to get that and then you put another value say 3000 modular 360 thats 120 120 if its between server 90 and server 180 select moves directly to the 180 and then you store the value 3000 there how about a thousand thousand modular 360 is actually gives you 280 wait a minute 280 is the there are no server after the last server the largest value is actually s270 there is no larger after that right there is no larger than two server 217 this is values 280 so what do you do if theres no larger values you go back to the circle right and this is very nicely when you actually draw the circle you see that s 280 is between s270 and s0 so you immediately go and put the value 1000 in server 0 and thats how you build the ring lets take a d of actually bothering all the servers in my cluster im only bothering one server so thats much much much better than actual hashing but still there is a cost to it right there is complexity you need to build all that out what if the operation failed how do you roll back what if do you add the server anyway what if one of the keys didnt transmit so were adding so much complexity so distributed systems are not easy you guys right even if you think about it lets take another example where were removing a server if we go back to our original case where we have s0 s90 s180 and s27 and lets say im going to remove s90 altogether so now what happens here if you remove s90 then anything that s90 had must go to s180 if you think about it right beca is 180 so remove all those puppies and stick them to where to server 180 thats a very expensive operation as well so if you think about it consistent hashing are powerful is powerful the algorithm of consistency are very powerful but the limitation here becomes you still need to move data around and the more data you have you know in these instances then the transmit of these will take more time so adding or removing server is actually not a trivial operation you know and then you really think need to think about another thing that is called replication you need to duplicate this data as much as possible because a server might crash so you need to have a backup so just using this algorithm blindly is not enough you have to cater for crashes you know and as a result you have to have a backup oh if this server is not available lets lets have a mapping server that actually directly copies that data immediately right so thats what you do you have to do that well what if two servers map to the same hash you cant have it if you have a lot of more than 360 servers youre gonna youre bound to have the value that fits in the same server and im not sure what you can do here you can what you can do is like i suppose in this case you can treat it as a as a replication so you have like a a backup scenario where we have this server you can either put it in both right that was an episode of the consistent hashing hope you enjoyed this video im gonna see on the next one guys thousand goodbye 

#####################
Shot: mixtral8x7b
#####################
#####################
Shot: full-stack
#####################
#####################
Target: hashing
#####################
hello guys welcome back to my channel today we are going to talk about mistral so as you know mistral is a new language model that came out a few months ago from mistal ai which is a one of the hottest startup right now in europe for language models it also became a unicorn recently and we will exploring both the models they released one is the 7 billion and one is the 8 by7 billion model so lets review the topics of today the first thing i will introduce you is the architectural differences between the vanilla transformer and the architecture of mistal later we will see what is the sliding window attention and how it is related to the concept of receptive field a concept that usually we find in convolutional neural networks i will briefly review the kv cache because i want to introduce the concept of rolling buffer cache and also how it is done with prefilling and chunking uh we will see what is sparse mixture of experts model sharding with a little with a very brief introduction with the pipeline parallelism and last but not least we will also go through the code of mistal because there is a lot of innovations in the code especially when they use the x forers library with the block attention so i want to guide you into understanding the code because it can be really hard for be th is uh what is the context size of upon which it the model was trained upon uh and its much bigger for the 8x 7b the vocabulary size is the same for both and then the last two parameters you can see here are related to the sparse mixture of experts and we will see later uh how it works but we just remember that we have eight experts and for each token we use two experts but later i will clarify how it works lets proceed further so lets talk about the sliding window attention but before we talk about the sliding window attention i need to review a little bit of the self attention mechanism so what is self attention self attention is a mechan ding on the mask we have applied so our mask says that the first token can only watch itself so the first output token will be an embedding that will only depend on itself the second token will only depend on the first two tokens the third output token will only depend on the first three tokens the fourth will depend on the token number two because the first token is not used the token number two the token number three and the token number four etc etc until the last here the last token will depend only on the last three tokens because the first three tokens are masked out and this is the importance of the mask that we apply in the self atten pend it to the input for the temp step three and this will become the new input which will produce love that can then we take the last token of the output and we append it to the input for the time step four so it will become the new output will become love that can quickly then we take this word quickly we append it to the input for the next time step and it will produce the next token as output etc etc until the last token until we see the end of sentence token as output then we know that the model has stopped uh um has stopped producing new tokens and we can stop the inference now at every step the inference we are only interested in the l ache so we need to add the tokens of our prompt to the kv cache that so that we can then exploit this kv cache to build new tokens future tokens now the prompt is known in advance right because because its the input of our user its what you ask to ch gpd for example right tell me a poem tell me write me a poem or tell me a joke this is our prompt so its known in advance so we dont we dont need to generate it okay so what we can do is we can prefill the kv cache using the tokens of the prompt but there are many ways to do it like we were doing before when i was teaching you about the k cach we work with one token at a time so one way to um to   to change from one model to the next so to keep the range of the output stable they apply the soft marx after they have selected how many uh experts they want to work with and choosing the logits of the best two performing uh experts okay the next thing we are talking going to talk about is model sharding which is also implemented in the code of the mistal model so lets talk about it when we have a model that is too big to fit in a single gpu we can divide the model into groups of layers and place each group of layers in a single gpu for example in the case of mistal we have 32 layers of encoders you can see here one after another i didnt do in a transformer will result in n output tokens in the output so we have uh here we have three  4 so 7 7  5 12 tokens as input it will produce 12 tokens as output to understand what is the next token for each prompt we need to check the the we need to check the embedding corresponding to the token number three for the first prompt to the token number seven for the second prompt and the last token for the third prompt so we take all these embeddings we run them through the linear layer then we apply the soft marks and then we understand what is the next uh token from our vocabulary but you may be wondering how do we even produce an attention m i just run some random tensors to study all the shapes of the tensor and all the information passing so i dont know if the code works but i hope it will works i mean i didnt touch the logic i just add some comments uh anyway you can use the commented code by me to as um as a learning tool to complement with the official code of mistal so that you can understand uh more about the inner workings of this grd model i actually really enjoyed studying it i really enjoyed studying the code and i learned a lot of stuff you know um i think its very very good when you are doing something that is very complicated because it teaches you a lot because if something is simple then you dont learn much by the end of the day anyway guys thanks you for watching my video i hope you also enjoyed this journey with me even if it was very complicated i hope that you likeed this video and you will subscribe to my channel if you didnt please do it and the best way to support me guys is to share this video with all the people you know so share it on social media share it on linkedin on twitter etc because this is the best way to you can help me is to grow my channel and um please let me know if there is something that you dont understand i am always available to help and connect with me on linkedin byebye 

whats up guys back today with another longer video which is to build a job board app that could actually be a real startup that people use theres a lot of different places to find entry level or junior developer jobs on the internet for example github jobs stack overflow jobs you have angel list you have indeed but filtering through those especially because you kind of have to spam applications for your first job can take a long time so the good thing about all these job boards is they have public apis for the most part you always want to start with an mvp that is the minimum viable product today that means were going to start with a single data feed that is a single job board api feeding into our app and then finally were gonna have a super minimal simple front end were gonna do this in react and material ui on the front end were gonna use an express server redis for our data storage because were not writing or persisting any data that is not part of the job feed and then finally a node cron job to fetch these jobs and refresh them at a certain interval which are going to be filtered through an algorithm so lets draw this all out to get a better idea of our plan heres our front end what we basically want here is a list of jobs this is going to be pulling data from our api and th r tasks and i know already that were going to need the cron node library its just going to help us run simple cron jobs which is what i was saying before is the its the way you run a task on an interval basically forever if you want to opening up a new terminal tab going out to our main directory and within our main directory im just going to create a package json which is going to be accessible from all our different folders so you can see that was created here and then we just want to install cron as a dependency okay now inside a worker i just this is the way i pretty much start with every uh with every app you just copy kind of the basic   though that its really fast its kind of like an object in javascript you just if you have the key its constant time access you just pull it out of your redis store and then you can serve it up in our case jumping back over to these um these job uh json that we got from github you can see every job has a uuid which is a guaranteed unique id because it has so many characters and its random characters so itll be guaranteed unique every time every job has one of these ids so thats a natural candidate to use as a redis key im thinking within redis our key is going to be this id and our value is just going to be the whole job object so it would be  just to see the length and or rather see that the length matches our our length that we put in lets parse it and then lets do dot lake okay so its kind of a lot that we did without testing it lets restart our server do the same curl oh man okay 245 i dont remember if thats how many we put in were definitely getting a list of 245 which is a good sign now lets just try sending this back and see if we get that full uh stringified object thats exactly what we want and its that easy so thats already done so i dont know how long its been guys but with this simple of an api we can literally weve literally been able to create all this like in such a t put this whole thing below our uh jobs map and um lets see if by pasting it directly in we we need to do anything else just going to make sure thats formatted correctly saved it and um lets just take this out classes direction rtl okay lets see how theme is being used because this is kind of a um darn all right i dont know why that would change from left to right but um it might be a mobile implementation specific thing so lets just take this and hard code it as right and well hard code this one as left and see if we run in any problems okay save that and cant find module oh i forgot about this material ui icons is a separate library so we   you can buy a domain a ton of different places i just like google because the interface and its because where my uh other domains are so ive opened my domain i already bought it a normalcom domain is going to be about 14 a year and the first thing we need to do is use the digital ocean name servers so that domain can be directed over to our server so youll see that i have clicked on my domain ive opened the dns tab and then theres a name servers tab and ive clicked use custom name servers now im going to put that on pause and jump over to the digital ocean dashboard you can make a digitalocean account for free and itll give you this dashboar pi jobs now that means we also have to change our api route which shouldnt be a problem slash api slash jobs and we have to make one change in our package json and thats adding a proxy config which allows this to still work on local development this doesnt affect anything on production so um proxying all api routes to a target of localhost sorry need the double quotes there http localhost uh 3001 was our api server i believe and ill save that and again that just helps us you know still develop in the same way but we need to make one config change for the production server as well so that was our change in um in our files and as i mentioned im s thats it we basically built a whole production application in less than 100 minutes and we got it deployed and now its running on the public internet at entrylevelsoftwarejobscom so go check it out but um im thinking next theres a few critical things we have to do before were ready for like a full production launch so to speak this was just our base framework that were building more features off of but at minimum i think we need a few more data feeds and we need to make our algorithm a lot more robust prevent it from breaking on errors as well as filtering down those jobs a lot more because if we get in five feeds were just gonna have a huge amount of jobs and we really wanna make sure those are entry level jobs so im thinking that we parse through the description and look for like three to five years of experience and take those out i think anything less than three years would qualify as an entrylevel job so again were gonna have to keep working on the algorithm and then otherwise were gonna want to add a little bit of monitoring logging different things like that but that can all come later our mvp is done and our base of our application is done so thats pretty cool so anyway hope you learned something um let me know if you have any questions and i will talk to you guys soon 

#####################
Shot: mixtral8x7b
#####################
#####################
Shot: full-stack
#####################
#####################
Target: localized_deployment
#####################
hello guys welcome back to my channel today we are going to talk about mistral so as you know mistral is a new language model that came out a few months ago from mistal ai which is a one of the hottest startup right now in europe for language models it also became a unicorn recently and we will exploring both the models they released one is the 7 billion and one is the 8 by7 billion model so lets review the topics of today the first thing i will introduce you is the architectural differences between the vanilla transformer and the architecture of mistal later we will see what is the sliding window attention and how it is related to the concept of receptive field a concept that usually we find in convolutional neural networks i will briefly review the kv cache because i want to introduce the concept of rolling buffer cache and also how it is done with prefilling and chunking uh we will see what is sparse mixture of experts model sharding with a little with a very brief introduction with the pipeline parallelism and last but not least we will also go through the code of mistal because there is a lot of innovations in the code especially when they use the x forers library with the block attention so i want to guide you into understanding the code because it can be really hard for be th is uh what is the context size of upon which it the model was trained upon uh and its much bigger for the 8x 7b the vocabulary size is the same for both and then the last two parameters you can see here are related to the sparse mixture of experts and we will see later uh how it works but we just remember that we have eight experts and for each token we use two experts but later i will clarify how it works lets proceed further so lets talk about the sliding window attention but before we talk about the sliding window attention i need to review a little bit of the self attention mechanism so what is self attention self attention is a mechan ding on the mask we have applied so our mask says that the first token can only watch itself so the first output token will be an embedding that will only depend on itself the second token will only depend on the first two tokens the third output token will only depend on the first three tokens the fourth will depend on the token number two because the first token is not used the token number two the token number three and the token number four etc etc until the last here the last token will depend only on the last three tokens because the first three tokens are masked out and this is the importance of the mask that we apply in the self atten pend it to the input for the temp step three and this will become the new input which will produce love that can then we take the last token of the output and we append it to the input for the time step four so it will become the new output will become love that can quickly then we take this word quickly we append it to the input for the next time step and it will produce the next token as output etc etc until the last token until we see the end of sentence token as output then we know that the model has stopped uh um has stopped producing new tokens and we can stop the inference now at every step the inference we are only interested in the l ache so we need to add the tokens of our prompt to the kv cache that so that we can then exploit this kv cache to build new tokens future tokens now the prompt is known in advance right because because its the input of our user its what you ask to ch gpd for example right tell me a poem tell me write me a poem or tell me a joke this is our prompt so its known in advance so we dont we dont need to generate it okay so what we can do is we can prefill the kv cache using the tokens of the prompt but there are many ways to do it like we were doing before when i was teaching you about the k cach we work with one token at a time so one way to um to   to change from one model to the next so to keep the range of the output stable they apply the soft marx after they have selected how many uh experts they want to work with and choosing the logits of the best two performing uh experts okay the next thing we are talking going to talk about is model sharding which is also implemented in the code of the mistal model so lets talk about it when we have a model that is too big to fit in a single gpu we can divide the model into groups of layers and place each group of layers in a single gpu for example in the case of mistal we have 32 layers of encoders you can see here one after another i didnt do in a transformer will result in n output tokens in the output so we have uh here we have three  4 so 7 7  5 12 tokens as input it will produce 12 tokens as output to understand what is the next token for each prompt we need to check the the we need to check the embedding corresponding to the token number three for the first prompt to the token number seven for the second prompt and the last token for the third prompt so we take all these embeddings we run them through the linear layer then we apply the soft marks and then we understand what is the next uh token from our vocabulary but you may be wondering how do we even produce an attention m i just run some random tensors to study all the shapes of the tensor and all the information passing so i dont know if the code works but i hope it will works i mean i didnt touch the logic i just add some comments uh anyway you can use the commented code by me to as um as a learning tool to complement with the official code of mistal so that you can understand uh more about the inner workings of this grd model i actually really enjoyed studying it i really enjoyed studying the code and i learned a lot of stuff you know um i think its very very good when you are doing something that is very complicated because it teaches you a lot because if something is simple then you dont learn much by the end of the day anyway guys thanks you for watching my video i hope you also enjoyed this journey with me even if it was very complicated i hope that you likeed this video and you will subscribe to my channel if you didnt please do it and the best way to support me guys is to share this video with all the people you know so share it on social media share it on linkedin on twitter etc because this is the best way to you can help me is to grow my channel and um please let me know if there is something that you dont understand i am always available to help and connect with me on linkedin byebye 

whats up guys back today with another longer video which is to build a job board app that could actually be a real startup that people use theres a lot of different places to find entry level or junior developer jobs on the internet for example github jobs stack overflow jobs you have angel list you have indeed but filtering through those especially because you kind of have to spam applications for your first job can take a long time so the good thing about all these job boards is they have public apis for the most part you always want to start with an mvp that is the minimum viable product today that means were going to start with a single data feed that is a single job board api feeding into our app and then finally were gonna have a super minimal simple front end were gonna do this in react and material ui on the front end were gonna use an express server redis for our data storage because were not writing or persisting any data that is not part of the job feed and then finally a node cron job to fetch these jobs and refresh them at a certain interval which are going to be filtered through an algorithm so lets draw this all out to get a better idea of our plan heres our front end what we basically want here is a list of jobs this is going to be pulling data from our api and th r tasks and i know already that were going to need the cron node library its just going to help us run simple cron jobs which is what i was saying before is the its the way you run a task on an interval basically forever if you want to opening up a new terminal tab going out to our main directory and within our main directory im just going to create a package json which is going to be accessible from all our different folders so you can see that was created here and then we just want to install cron as a dependency okay now inside a worker i just this is the way i pretty much start with every uh with every app you just copy kind of the basic   though that its really fast its kind of like an object in javascript you just if you have the key its constant time access you just pull it out of your redis store and then you can serve it up in our case jumping back over to these um these job uh json that we got from github you can see every job has a uuid which is a guaranteed unique id because it has so many characters and its random characters so itll be guaranteed unique every time every job has one of these ids so thats a natural candidate to use as a redis key im thinking within redis our key is going to be this id and our value is just going to be the whole job object so it would be  just to see the length and or rather see that the length matches our our length that we put in lets parse it and then lets do dot lake okay so its kind of a lot that we did without testing it lets restart our server do the same curl oh man okay 245 i dont remember if thats how many we put in were definitely getting a list of 245 which is a good sign now lets just try sending this back and see if we get that full uh stringified object thats exactly what we want and its that easy so thats already done so i dont know how long its been guys but with this simple of an api we can literally weve literally been able to create all this like in such a t put this whole thing below our uh jobs map and um lets see if by pasting it directly in we we need to do anything else just going to make sure thats formatted correctly saved it and um lets just take this out classes direction rtl okay lets see how theme is being used because this is kind of a um darn all right i dont know why that would change from left to right but um it might be a mobile implementation specific thing so lets just take this and hard code it as right and well hard code this one as left and see if we run in any problems okay save that and cant find module oh i forgot about this material ui icons is a separate library so we   you can buy a domain a ton of different places i just like google because the interface and its because where my uh other domains are so ive opened my domain i already bought it a normalcom domain is going to be about 14 a year and the first thing we need to do is use the digital ocean name servers so that domain can be directed over to our server so youll see that i have clicked on my domain ive opened the dns tab and then theres a name servers tab and ive clicked use custom name servers now im going to put that on pause and jump over to the digital ocean dashboard you can make a digitalocean account for free and itll give you this dashboar pi jobs now that means we also have to change our api route which shouldnt be a problem slash api slash jobs and we have to make one change in our package json and thats adding a proxy config which allows this to still work on local development this doesnt affect anything on production so um proxying all api routes to a target of localhost sorry need the double quotes there http localhost uh 3001 was our api server i believe and ill save that and again that just helps us you know still develop in the same way but we need to make one config change for the production server as well so that was our change in um in our files and as i mentioned im s thats it we basically built a whole production application in less than 100 minutes and we got it deployed and now its running on the public internet at entrylevelsoftwarejobscom so go check it out but um im thinking next theres a few critical things we have to do before were ready for like a full production launch so to speak this was just our base framework that were building more features off of but at minimum i think we need a few more data feeds and we need to make our algorithm a lot more robust prevent it from breaking on errors as well as filtering down those jobs a lot more because if we get in five feeds were just gonna have a huge amount of jobs and we really wanna make sure those are entry level jobs so im thinking that we parse through the description and look for like three to five years of experience and take those out i think anything less than three years would qualify as an entrylevel job so again were gonna have to keep working on the algorithm and then otherwise were gonna want to add a little bit of monitoring logging different things like that but that can all come later our mvp is done and our base of our application is done so thats pretty cool so anyway hope you learned something um let me know if you have any questions and i will talk to you guys soon 

hello guys welcome back to my channel today we are going to talk about mistral so as you know mistral is a new language model that came out a few months ago from mistal ai which is a one of the hottest startup right now in europe for language models it also became a unicorn recently and we will exploring both the models they released one is the 7 billion and one is the 8 by7 billion model so lets review the topics of today the first thing i will introduce you is the architectural differences between the vanilla transformer and the architecture of mistal later we will see what is the sliding window attention and how it is related to the concept of receptive field a concept that usually we find in convolutional neural networks i will briefly review the kv cache because i want to introduce the concept of rolling buffer cache and also how it is done with prefilling and chunking uh we will see what is sparse mixture of experts model sharding with a little with a very brief introduction with the pipeline parallelism and last but not least we will also go through the code of mistal because there is a lot of innovations in the code especially when they use the x forers library with the block attention so i want to guide you into understanding the code because it can be really hard for beginners to understand and find thems around there are some topics that are related to mistal but will not be covered in this current video because i already covered them in my previous video about lla e last two parameters you can see here are related to the sparse mixture of experts and we will see later uh how it works but we just remember that we have eight experts and for each token we use two experts but later i will clarify how it works lets proceed further so lets talk about the sliding window attention but before we talk about the sliding window attention i need to review a little bit of the self attention mechanism so what is self attention self attention is a mechanism that allows the model to relate tokens to each other so tokens that are in the same sentence are related with each other through the self attention mechanism this is why its called self attention because each token is watching other tokens of the of the same sent first output token will be an embedding that will only depend on itself the second token will only depend on the first two tokens the third output token will only depend on the first three tokens the fourth will depend on the token number two because the first token is not used the token number two the token number three and the token number four etc etc until the last here the last token will depend only on the last three tokens because the first three tokens are masked out and this is the importance of the mask that we apply in the self attention mechanism this concept that i show you now is very important to understand the rest of the video so please if you didnt understand it you can take a little pause you can try to do it by your by y  step three and this will become the new input which will produce love that can then we take the last token of the output and we append it to the input for the time step four so it will become the new output will become love that can quickly then we take this word quickly we append it to the input for the next time step and it will produce the next token as output etc etc until the last token until we see the end of sentence token as output then we know that the model has stopped uh um has stopped producing new tokens and we can stop the inference now at every step the inference we are only interested in the last token output by the model because we already have the previous one but of course we need to feed all the previous tokens to uh to cach we need to build up this kv cache so we need to add the tokens of our prompt to the kv cache that so that we can then exploit this kv cache to build new tokens future tokens now the prompt is known in advance right because because its the input of our user its what you ask to ch gpd for example right tell me a poem tell me write me a poem or tell me a joke this is our prompt so its known in advance so we dont we dont need to generate it okay so what we can do is we can prefill the kv cache using the tokens of the prompt but there are many ways to do it like we were doing before when i was teaching you about the k cach we work with one token at a time so one way to um to add the tokens to the k cach is to add one token at at a time but   range may change from model to model and usually its not a good idea to have the range of the output to change from one model to the next so to keep the range of the output stable they apply the soft marx after they have selected how many uh experts they want to work with and choosing the logits of the best two performing uh experts okay the next thing we are talking going to talk about is model sharding which is also implemented in the code of the mistal model so lets talk about it when we have a model that is too big to fit in a single gpu we can divide the model into groups of layers and place each group of layers in a single gpu for example in the case of mistal we have 32 layers of encoders you can see here one after another i didnt d e receive we take this mega sequence we run it through our llm ser llm model so it could be mistal or it could be llama this as i told you before uh and input sequence in a transformer will result in n output tokens in the output so we have uh here we have three  4 so 7 7  5 12 tokens as input it will produce 12 tokens as output to understand what is the next token for each prompt we need to check the the we need to check the embedding corresponding to the token number three for the first prompt to the token number seven for the second prompt and the last token for the third prompt so we take all these embeddings we run them through the linear layer then we apply the soft marks and then we understand what is the next uh token from our vocab o study the model was to run some random tensors through a model and i created basically a model with randomly initialized uh weights but with less number of layers so it could fit in my gpu and then i just run some random tensors to study all the shapes of the tensor and all the information passing so i dont know if the code works but i hope it will works i mean i didnt touch the logic i just add some comments uh anyway you can use the commented code by me to as um as a learning tool to complement with the official code of mistal so that you can understand uh more about the inner workings of this grd model i actually really enjoyed studying it i really enjoyed studying the code and i learned a lot of stuff you know um i think its very very good when you are doing something that is very complicated because it teaches you a lot because if something is simple then you dont learn much by the end of the day anyway guys thanks you for watching my video i hope you also enjoyed this journey with me even if it was very complicated i hope that you likeed this video and you will subscribe to my channel if you didnt please do it and the best way to support me guys is to share this video with all the people you know so share it on social media share it on linkedin on twitter etc because this is the best way to you can help me is to grow my channel and um please let me know if there is something that you dont understand i am always available to help and connect with me on linkedin byebye 

#####################
Shot: mixtral8x7b
#####################
#####################
Shot: full-stack
#####################
#####################
Target: mixtral8x7b
#####################
hello guys welcome back to my channel today we are going to talk about mistral so as you know mistral is a new language model that came out a few months ago from mistal ai which is a one of the hottest startup right now in europe for language models it also became a unicorn recently and we will exploring both the models they released one is the 7 billion and one is the 8 by7 billion model so lets review the topics of today the first thing i will introduce you is the architectural differences between the vanilla transformer and the architecture of mistal later we will see what is the sliding window attention and how it is related to the concept of receptive field a concept that usually we find in convolutional neural networks i will briefly review the kv cache because i want to introduce the concept of rolling buffer cache and also how it is done with prefilling and chunking uh we will see what is sparse mixture of experts model sharding with a little with a very brief introduction with the pipeline parallelism and last but not least we will also go through the code of mistal because there is a lot of innovations in the code especially when they use the x forers library with the block attention so i want to guide you into understanding the code because it can be really hard for be th is uh what is the context size of upon which it the model was trained upon uh and its much bigger for the 8x 7b the vocabulary size is the same for both and then the last two parameters you can see here are related to the sparse mixture of experts and we will see later uh how it works but we just remember that we have eight experts and for each token we use two experts but later i will clarify how it works lets proceed further so lets talk about the sliding window attention but before we talk about the sliding window attention i need to review a little bit of the self attention mechanism so what is self attention self attention is a mechan ding on the mask we have applied so our mask says that the first token can only watch itself so the first output token will be an embedding that will only depend on itself the second token will only depend on the first two tokens the third output token will only depend on the first three tokens the fourth will depend on the token number two because the first token is not used the token number two the token number three and the token number four etc etc until the last here the last token will depend only on the last three tokens because the first three tokens are masked out and this is the importance of the mask that we apply in the self atten pend it to the input for the temp step three and this will become the new input which will produce love that can then we take the last token of the output and we append it to the input for the time step four so it will become the new output will become love that can quickly then we take this word quickly we append it to the input for the next time step and it will produce the next token as output etc etc until the last token until we see the end of sentence token as output then we know that the model has stopped uh um has stopped producing new tokens and we can stop the inference now at every step the inference we are only interested in the l ache so we need to add the tokens of our prompt to the kv cache that so that we can then exploit this kv cache to build new tokens future tokens now the prompt is known in advance right because because its the input of our user its what you ask to ch gpd for example right tell me a poem tell me write me a poem or tell me a joke this is our prompt so its known in advance so we dont we dont need to generate it okay so what we can do is we can prefill the kv cache using the tokens of the prompt but there are many ways to do it like we were doing before when i was teaching you about the k cach we work with one token at a time so one way to um to   to change from one model to the next so to keep the range of the output stable they apply the soft marx after they have selected how many uh experts they want to work with and choosing the logits of the best two performing uh experts okay the next thing we are talking going to talk about is model sharding which is also implemented in the code of the mistal model so lets talk about it when we have a model that is too big to fit in a single gpu we can divide the model into groups of layers and place each group of layers in a single gpu for example in the case of mistal we have 32 layers of encoders you can see here one after another i didnt do in a transformer will result in n output tokens in the output so we have uh here we have three  4 so 7 7  5 12 tokens as input it will produce 12 tokens as output to understand what is the next token for each prompt we need to check the the we need to check the embedding corresponding to the token number three for the first prompt to the token number seven for the second prompt and the last token for the third prompt so we take all these embeddings we run them through the linear layer then we apply the soft marks and then we understand what is the next uh token from our vocabulary but you may be wondering how do we even produce an attention m i just run some random tensors to study all the shapes of the tensor and all the information passing so i dont know if the code works but i hope it will works i mean i didnt touch the logic i just add some comments uh anyway you can use the commented code by me to as um as a learning tool to complement with the official code of mistal so that you can understand uh more about the inner workings of this grd model i actually really enjoyed studying it i really enjoyed studying the code and i learned a lot of stuff you know um i think its very very good when you are doing something that is very complicated because it teaches you a lot because if something is simple then you dont learn much by the end of the day anyway guys thanks you for watching my video i hope you also enjoyed this journey with me even if it was very complicated i hope that you likeed this video and you will subscribe to my channel if you didnt please do it and the best way to support me guys is to share this video with all the people you know so share it on social media share it on linkedin on twitter etc because this is the best way to you can help me is to grow my channel and um please let me know if there is something that you dont understand i am always available to help and connect with me on linkedin byebye 

whats up guys back today with another longer video which is to build a job board app that could actually be a real startup that people use theres a lot of different places to find entry level or junior developer jobs on the internet for example github jobs stack overflow jobs you have angel list you have indeed but filtering through those especially because you kind of have to spam applications for your first job can take a long time so the good thing about all these job boards is they have public apis for the most part you always want to start with an mvp that is the minimum viable product today that means were going to start with a single data feed that is a single job board api feeding into our app and then finally were gonna have a super minimal simple front end were gonna do this in react and material ui on the front end were gonna use an express server redis for our data storage because were not writing or persisting any data that is not part of the job feed and then finally a node cron job to fetch these jobs and refresh them at a certain interval which are going to be filtered through an algorithm so lets draw this all out to get a better idea of our plan heres our front end what we basically want here is a list of jobs this is going to be pulling data from our api and th r tasks and i know already that were going to need the cron node library its just going to help us run simple cron jobs which is what i was saying before is the its the way you run a task on an interval basically forever if you want to opening up a new terminal tab going out to our main directory and within our main directory im just going to create a package json which is going to be accessible from all our different folders so you can see that was created here and then we just want to install cron as a dependency okay now inside a worker i just this is the way i pretty much start with every uh with every app you just copy kind of the basic   though that its really fast its kind of like an object in javascript you just if you have the key its constant time access you just pull it out of your redis store and then you can serve it up in our case jumping back over to these um these job uh json that we got from github you can see every job has a uuid which is a guaranteed unique id because it has so many characters and its random characters so itll be guaranteed unique every time every job has one of these ids so thats a natural candidate to use as a redis key im thinking within redis our key is going to be this id and our value is just going to be the whole job object so it would be  just to see the length and or rather see that the length matches our our length that we put in lets parse it and then lets do dot lake okay so its kind of a lot that we did without testing it lets restart our server do the same curl oh man okay 245 i dont remember if thats how many we put in were definitely getting a list of 245 which is a good sign now lets just try sending this back and see if we get that full uh stringified object thats exactly what we want and its that easy so thats already done so i dont know how long its been guys but with this simple of an api we can literally weve literally been able to create all this like in such a t put this whole thing below our uh jobs map and um lets see if by pasting it directly in we we need to do anything else just going to make sure thats formatted correctly saved it and um lets just take this out classes direction rtl okay lets see how theme is being used because this is kind of a um darn all right i dont know why that would change from left to right but um it might be a mobile implementation specific thing so lets just take this and hard code it as right and well hard code this one as left and see if we run in any problems okay save that and cant find module oh i forgot about this material ui icons is a separate library so we   you can buy a domain a ton of different places i just like google because the interface and its because where my uh other domains are so ive opened my domain i already bought it a normalcom domain is going to be about 14 a year and the first thing we need to do is use the digital ocean name servers so that domain can be directed over to our server so youll see that i have clicked on my domain ive opened the dns tab and then theres a name servers tab and ive clicked use custom name servers now im going to put that on pause and jump over to the digital ocean dashboard you can make a digitalocean account for free and itll give you this dashboar pi jobs now that means we also have to change our api route which shouldnt be a problem slash api slash jobs and we have to make one change in our package json and thats adding a proxy config which allows this to still work on local development this doesnt affect anything on production so um proxying all api routes to a target of localhost sorry need the double quotes there http localhost uh 3001 was our api server i believe and ill save that and again that just helps us you know still develop in the same way but we need to make one config change for the production server as well so that was our change in um in our files and as i mentioned im s thats it we basically built a whole production application in less than 100 minutes and we got it deployed and now its running on the public internet at entrylevelsoftwarejobscom so go check it out but um im thinking next theres a few critical things we have to do before were ready for like a full production launch so to speak this was just our base framework that were building more features off of but at minimum i think we need a few more data feeds and we need to make our algorithm a lot more robust prevent it from breaking on errors as well as filtering down those jobs a lot more because if we get in five feeds were just gonna have a huge amount of jobs and we really wanna make sure those are entry level jobs so im thinking that we parse through the description and look for like three to five years of experience and take those out i think anything less than three years would qualify as an entrylevel job so again were gonna have to keep working on the algorithm and then otherwise were gonna want to add a little bit of monitoring logging different things like that but that can all come later our mvp is done and our base of our application is done so thats pretty cool so anyway hope you learned something um let me know if you have any questions and i will talk to you guys soon 

hold up before we get into this next episode i want to tell you about our virtual conference thats coming up on february 15th and february 22nd we did it two thursdays in a row this year because we wanted to make sure that the maximum amount of people could come for each day since the lineup is just looking absolutely incredible as you know we do let me name a few of the guests that weve got coming because it is worth talking about weve got jason louie weve got shrea shanar weve got dro who is product applied ai at uber weve got cameron wolf whos got an incredible podcast and hes director of ai at reeby engine weve got lauren lockridge who is working at google also doing some product stuff oh why is there so many product people here funny you should ask that because weve got a whole ai product owner track along with an engineering track and then as we like to weve got some handson workshops too let me just tell you some of these other names just for a moment you know because weve got them coming and it is really cool i havent named any of the keynotes yet either by the way go and check them out on your own if you want just go to home ops community and youll see but weve got tunji whos the lead researcher on the deep speed project at microsoft weve got golden who is the open source engineer at netflix weve got kai whos leading the ai platform at uber you may have heard of it its called michelangelo oh my gosh weve got fison whos product manager at linkedin jerry louie who crea oon as i got there this girl was like i want nothing to do with you and so i was sitting there like heartbroken on the coastline of the bass country and it took me probably like a month to realize well theres theres much worse places i could be stuck and so i enjoyed it and i had the time in my life that year in bilbo and then i met my wife at the end of that year at this big music festival and uh so we were living in spain we ended up getting married like 5 years later had our first daughter like 8 years later and then we were living there until 2020 when co hit and when co hit the lockdown was really hard and we were in this small apartment in bilb and we were like lets get out of here lets go to the countryside and we had been coming to  have both of them working together in a single app application and youre absolutely right they dont want stuff like it saying stuff it shouldnt say uh giving we had one interesting case where someones like i dont want to say we support something in this policy because im reliable to it if someone asks a question um and so theres all sorts of especially if youre putting it external facing theres all sorts of more rigor that it goes through to make sure its its working and what llm as a judge can do is well we see people checking for is things like well did it hallucinate in the answer you know is it making up something like is it making up something that wasnt in the policy is it toxic in its response is it negative about you know like in th ack type of test you kind like that lost in the middle yeah and you know for those of you who havent seen it its basically um an awesome way to think about it which is you know it essentially checks you know on one axis you have how long is the context so the context can be one k to tokens all the way to you know for some of the smaller models its like 32k i think for some of the bigger ones um we tested uh pretty pretty significantly let me rouble check exactly what 120k i would imagine i think that it feels like anthropics goes all the way up to that or maybe its even more these days like 240 they just said it well double it yeah so some of them we checked yeah like definitely close to yeah 120k and but what we did was basically so thats   you can full see the full traces and spans of your application so kind kind of like the full stack traces how you can think about it so um youll see the breakdown of each calls and then which calls took longer which calls used the most tokens and then you can also evaluate at each step in the calls so kind of like we were just talking about where at the end of the application at the very end um when it generated response you can have a score of of how well was the response but then if the response lets say was hallucinated or was incorrect then theres a step above you can go in and look at the individual span level evals look at well how well did it retrieve and then within the retriever you know how lets evaluate each document that it ret e results of like the next best lum etc yeah i think were all wondering like did you just you know like you know did did have access to that training data set so i i wonder that all the time too well its pretty clear these days that uh as i did not coin this term but i like it and i will say it a lot benchmarks are and so all these benchmarks on hugging face or on twitter that youll see like oh this is soa this just came out it blew everything else out of the water by whatever 10 times or you make up a number there i dont even consider that to be valuable anymore its its really like what you were saying where these things i know you actually went and you did a rigorous study on it but its so funny because we are the rest of us are just goin  like the escape hatch almost not as step two it should be what you go to when you cant get anything else to work and try rigorously to get everything else to work because it is exactly like you said it is so much easier to just tweak the prompt then finetune it and and i didnt connect the dot on how similar the two are and like oh if were coming from the traditional ml space then its easier to jump there and be like oh well thats just because we need to finetune it and then itll do what we want it to do yeah totally um i i think theres just something very natural feeling about okay you know training is now fine tuning but its you know i think its one of those changes we all have to just just adapt with with the the space changing yeah a si ttlenecks are youll find where everything is messing up and unless you get into production you dont necessarily know that so each day or each minute that youre not in production youre not finding all of these problems and if you can use a model to make your life easier and get you into production faster then youre going to start seeing oh maybe its the prompts or oh maybe its you know whatever the case may be where youre falling behind and youre making mistakes or the system isnt designed properly yeah absolutely so i think uh maybe as we wrap up the podcast that thats really is get stuff out as fast as you can you know evaluate the outcomes i think thats you know lm ev vales is something that i think is pretty pretty got a lot of momentum around it in in the in folks who are deploying and in the community so evaluations is important and then um i think knowing how to set up the right evals knowing how to you know benchmark your own evals um customize it um what types of eval score versus classification theres just so much nuance in that whole eval space and so as we continue to drop more research or share more stuff were learning um we well share with the community excellent parta its been absolutely fascinating having you on as always i really appreciate it and look forward to having you back awesome thanks to me ch thanks and thanks mops community hey everyone my name is apara founder of arise and the best way to stay up to dat with mlops is by subscribing to this podcast 

#####################
Shot: mixtral8x7b
#####################
#####################
Shot: full-stack
#####################
#####################
Target: mlops_llm_eval
#####################
hello guys welcome back to my channel today we are going to talk about mistral so as you know mistral is a new language model that came out a few months ago from mistal ai which is a one of the hottest startup right now in europe for language models it also became a unicorn recently and we will exploring both the models they released one is the 7 billion and one is the 8 by7 billion model so lets review the topics of today the first thing i will introduce you is the architectural differences between the vanilla transformer and the architecture of mistal later we will see what is the sliding window attention and how it is related to the concept of receptive field a concept that usually we find in convolutional neural networks i will briefly review the kv cache because i want to introduce the concept of rolling buffer cache and also how it is done with prefilling and chunking uh we will see what is sparse mixture of experts model sharding with a little with a very brief introduction with the pipeline parallelism and last but not least we will also go through the code of mistal because there is a lot of innovations in the code especially when they use the x forers library with the block attention so i want to guide you into understanding the code because it can be really hard for be th is uh what is the context size of upon which it the model was trained upon uh and its much bigger for the 8x 7b the vocabulary size is the same for both and then the last two parameters you can see here are related to the sparse mixture of experts and we will see later uh how it works but we just remember that we have eight experts and for each token we use two experts but later i will clarify how it works lets proceed further so lets talk about the sliding window attention but before we talk about the sliding window attention i need to review a little bit of the self attention mechanism so what is self attention self attention is a mechan ding on the mask we have applied so our mask says that the first token can only watch itself so the first output token will be an embedding that will only depend on itself the second token will only depend on the first two tokens the third output token will only depend on the first three tokens the fourth will depend on the token number two because the first token is not used the token number two the token number three and the token number four etc etc until the last here the last token will depend only on the last three tokens because the first three tokens are masked out and this is the importance of the mask that we apply in the self atten pend it to the input for the temp step three and this will become the new input which will produce love that can then we take the last token of the output and we append it to the input for the time step four so it will become the new output will become love that can quickly then we take this word quickly we append it to the input for the next time step and it will produce the next token as output etc etc until the last token until we see the end of sentence token as output then we know that the model has stopped uh um has stopped producing new tokens and we can stop the inference now at every step the inference we are only interested in the l ache so we need to add the tokens of our prompt to the kv cache that so that we can then exploit this kv cache to build new tokens future tokens now the prompt is known in advance right because because its the input of our user its what you ask to ch gpd for example right tell me a poem tell me write me a poem or tell me a joke this is our prompt so its known in advance so we dont we dont need to generate it okay so what we can do is we can prefill the kv cache using the tokens of the prompt but there are many ways to do it like we were doing before when i was teaching you about the k cach we work with one token at a time so one way to um to   to change from one model to the next so to keep the range of the output stable they apply the soft marx after they have selected how many uh experts they want to work with and choosing the logits of the best two performing uh experts okay the next thing we are talking going to talk about is model sharding which is also implemented in the code of the mistal model so lets talk about it when we have a model that is too big to fit in a single gpu we can divide the model into groups of layers and place each group of layers in a single gpu for example in the case of mistal we have 32 layers of encoders you can see here one after another i didnt do in a transformer will result in n output tokens in the output so we have uh here we have three  4 so 7 7  5 12 tokens as input it will produce 12 tokens as output to understand what is the next token for each prompt we need to check the the we need to check the embedding corresponding to the token number three for the first prompt to the token number seven for the second prompt and the last token for the third prompt so we take all these embeddings we run them through the linear layer then we apply the soft marks and then we understand what is the next uh token from our vocabulary but you may be wondering how do we even produce an attention m i just run some random tensors to study all the shapes of the tensor and all the information passing so i dont know if the code works but i hope it will works i mean i didnt touch the logic i just add some comments uh anyway you can use the commented code by me to as um as a learning tool to complement with the official code of mistal so that you can understand uh more about the inner workings of this grd model i actually really enjoyed studying it i really enjoyed studying the code and i learned a lot of stuff you know um i think its very very good when you are doing something that is very complicated because it teaches you a lot because if something is simple then you dont learn much by the end of the day anyway guys thanks you for watching my video i hope you also enjoyed this journey with me even if it was very complicated i hope that you likeed this video and you will subscribe to my channel if you didnt please do it and the best way to support me guys is to share this video with all the people you know so share it on social media share it on linkedin on twitter etc because this is the best way to you can help me is to grow my channel and um please let me know if there is something that you dont understand i am always available to help and connect with me on linkedin byebye 

whats up guys back today with another longer video which is to build a job board app that could actually be a real startup that people use theres a lot of different places to find entry level or junior developer jobs on the internet for example github jobs stack overflow jobs you have angel list you have indeed but filtering through those especially because you kind of have to spam applications for your first job can take a long time so the good thing about all these job boards is they have public apis for the most part you always want to start with an mvp that is the minimum viable product today that means were going to start with a single data feed that is a single job board api feeding into our app and then finally were gonna have a super minimal simple front end were gonna do this in react and material ui on the front end were gonna use an express server redis for our data storage because were not writing or persisting any data that is not part of the job feed and then finally a node cron job to fetch these jobs and refresh them at a certain interval which are going to be filtered through an algorithm so lets draw this all out to get a better idea of our plan heres our front end what we basically want here is a list of jobs this is going to be pulling data from our api and th r tasks and i know already that were going to need the cron node library its just going to help us run simple cron jobs which is what i was saying before is the its the way you run a task on an interval basically forever if you want to opening up a new terminal tab going out to our main directory and within our main directory im just going to create a package json which is going to be accessible from all our different folders so you can see that was created here and then we just want to install cron as a dependency okay now inside a worker i just this is the way i pretty much start with every uh with every app you just copy kind of the basic   though that its really fast its kind of like an object in javascript you just if you have the key its constant time access you just pull it out of your redis store and then you can serve it up in our case jumping back over to these um these job uh json that we got from github you can see every job has a uuid which is a guaranteed unique id because it has so many characters and its random characters so itll be guaranteed unique every time every job has one of these ids so thats a natural candidate to use as a redis key im thinking within redis our key is going to be this id and our value is just going to be the whole job object so it would be  just to see the length and or rather see that the length matches our our length that we put in lets parse it and then lets do dot lake okay so its kind of a lot that we did without testing it lets restart our server do the same curl oh man okay 245 i dont remember if thats how many we put in were definitely getting a list of 245 which is a good sign now lets just try sending this back and see if we get that full uh stringified object thats exactly what we want and its that easy so thats already done so i dont know how long its been guys but with this simple of an api we can literally weve literally been able to create all this like in such a t put this whole thing below our uh jobs map and um lets see if by pasting it directly in we we need to do anything else just going to make sure thats formatted correctly saved it and um lets just take this out classes direction rtl okay lets see how theme is being used because this is kind of a um darn all right i dont know why that would change from left to right but um it might be a mobile implementation specific thing so lets just take this and hard code it as right and well hard code this one as left and see if we run in any problems okay save that and cant find module oh i forgot about this material ui icons is a separate library so we   you can buy a domain a ton of different places i just like google because the interface and its because where my uh other domains are so ive opened my domain i already bought it a normalcom domain is going to be about 14 a year and the first thing we need to do is use the digital ocean name servers so that domain can be directed over to our server so youll see that i have clicked on my domain ive opened the dns tab and then theres a name servers tab and ive clicked use custom name servers now im going to put that on pause and jump over to the digital ocean dashboard you can make a digitalocean account for free and itll give you this dashboar pi jobs now that means we also have to change our api route which shouldnt be a problem slash api slash jobs and we have to make one change in our package json and thats adding a proxy config which allows this to still work on local development this doesnt affect anything on production so um proxying all api routes to a target of localhost sorry need the double quotes there http localhost uh 3001 was our api server i believe and ill save that and again that just helps us you know still develop in the same way but we need to make one config change for the production server as well so that was our change in um in our files and as i mentioned im s thats it we basically built a whole production application in less than 100 minutes and we got it deployed and now its running on the public internet at entrylevelsoftwarejobscom so go check it out but um im thinking next theres a few critical things we have to do before were ready for like a full production launch so to speak this was just our base framework that were building more features off of but at minimum i think we need a few more data feeds and we need to make our algorithm a lot more robust prevent it from breaking on errors as well as filtering down those jobs a lot more because if we get in five feeds were just gonna have a huge amount of jobs and we really wanna make sure those are entry level jobs so im thinking that we parse through the description and look for like three to five years of experience and take those out i think anything less than three years would qualify as an entrylevel job so again were gonna have to keep working on the algorithm and then otherwise were gonna want to add a little bit of monitoring logging different things like that but that can all come later our mvp is done and our base of our application is done so thats pretty cool so anyway hope you learned something um let me know if you have any questions and i will talk to you guys soon 

#####################
Shot: mixtral8x7b
#####################
#####################
Shot: full-stack
#####################
#####################
Target: react
#####################
hello guys welcome back to my channel today we are going to talk about mistral so as you know mistral is a new language model that came out a few months ago from mistal ai which is a one of the hottest startup right now in europe for language models it also became a unicorn recently and we will exploring both the models they released one is the 7 billion and one is the 8 by7 billion model so lets review the topics of today the first thing i will introduce you is the architectural differences between the vanilla transformer and the architecture of mistal later we will see what is the sliding window attention and how it is related to the concept of receptive field a concept that usually we find in convolutional neural networks i will briefly review the kv cache because i want to introduce the concept of rolling buffer cache and also how it is done with prefilling and chunking uh we will see what is sparse mixture of experts model sharding with a little with a very brief introduction with the pipeline parallelism and last but not least we will also go through the code of mistal because there is a lot of innovations in the code especially when they use the x forers library with the block attention so i want to guide you into understanding the code because it can be really hard for be th is uh what is the context size of upon which it the model was trained upon uh and its much bigger for the 8x 7b the vocabulary size is the same for both and then the last two parameters you can see here are related to the sparse mixture of experts and we will see later uh how it works but we just remember that we have eight experts and for each token we use two experts but later i will clarify how it works lets proceed further so lets talk about the sliding window attention but before we talk about the sliding window attention i need to review a little bit of the self attention mechanism so what is self attention self attention is a mechan ding on the mask we have applied so our mask says that the first token can only watch itself so the first output token will be an embedding that will only depend on itself the second token will only depend on the first two tokens the third output token will only depend on the first three tokens the fourth will depend on the token number two because the first token is not used the token number two the token number three and the token number four etc etc until the last here the last token will depend only on the last three tokens because the first three tokens are masked out and this is the importance of the mask that we apply in the self atten pend it to the input for the temp step three and this will become the new input which will produce love that can then we take the last token of the output and we append it to the input for the time step four so it will become the new output will become love that can quickly then we take this word quickly we append it to the input for the next time step and it will produce the next token as output etc etc until the last token until we see the end of sentence token as output then we know that the model has stopped uh um has stopped producing new tokens and we can stop the inference now at every step the inference we are only interested in the l ache so we need to add the tokens of our prompt to the kv cache that so that we can then exploit this kv cache to build new tokens future tokens now the prompt is known in advance right because because its the input of our user its what you ask to ch gpd for example right tell me a poem tell me write me a poem or tell me a joke this is our prompt so its known in advance so we dont we dont need to generate it okay so what we can do is we can prefill the kv cache using the tokens of the prompt but there are many ways to do it like we were doing before when i was teaching you about the k cach we work with one token at a time so one way to um to   to change from one model to the next so to keep the range of the output stable they apply the soft marx after they have selected how many uh experts they want to work with and choosing the logits of the best two performing uh experts okay the next thing we are talking going to talk about is model sharding which is also implemented in the code of the mistal model so lets talk about it when we have a model that is too big to fit in a single gpu we can divide the model into groups of layers and place each group of layers in a single gpu for example in the case of mistal we have 32 layers of encoders you can see here one after another i didnt do in a transformer will result in n output tokens in the output so we have uh here we have three  4 so 7 7  5 12 tokens as input it will produce 12 tokens as output to understand what is the next token for each prompt we need to check the the we need to check the embedding corresponding to the token number three for the first prompt to the token number seven for the second prompt and the last token for the third prompt so we take all these embeddings we run them through the linear layer then we apply the soft marks and then we understand what is the next uh token from our vocabulary but you may be wondering how do we even produce an attention m i just run some random tensors to study all the shapes of the tensor and all the information passing so i dont know if the code works but i hope it will works i mean i didnt touch the logic i just add some comments uh anyway you can use the commented code by me to as um as a learning tool to complement with the official code of mistal so that you can understand uh more about the inner workings of this grd model i actually really enjoyed studying it i really enjoyed studying the code and i learned a lot of stuff you know um i think its very very good when you are doing something that is very complicated because it teaches you a lot because if something is simple then you dont learn much by the end of the day anyway guys thanks you for watching my video i hope you also enjoyed this journey with me even if it was very complicated i hope that you likeed this video and you will subscribe to my channel if you didnt please do it and the best way to support me guys is to share this video with all the people you know so share it on social media share it on linkedin on twitter etc because this is the best way to you can help me is to grow my channel and um please let me know if there is something that you dont understand i am always available to help and connect with me on linkedin byebye 

whats up guys back today with another longer video which is to build a job board app that could actually be a real startup that people use theres a lot of different places to find entry level or junior developer jobs on the internet for example github jobs stack overflow jobs you have angel list you have indeed but filtering through those especially because you kind of have to spam applications for your first job can take a long time so the good thing about all these job boards is they have public apis for the most part you always want to start with an mvp that is the minimum viable product today that means were going to start with a single data feed that is a single job board api feeding into our app and then finally were gonna have a super minimal simple front end were gonna do this in react and material ui on the front end were gonna use an express server redis for our data storage because were not writing or persisting any data that is not part of the job feed and then finally a node cron job to fetch these jobs and refresh them at a certain interval which are going to be filtered through an algorithm so lets draw this all out to get a better idea of our plan heres our front end what we basically want here is a list of jobs this is going to be pulling data from our api and th r tasks and i know already that were going to need the cron node library its just going to help us run simple cron jobs which is what i was saying before is the its the way you run a task on an interval basically forever if you want to opening up a new terminal tab going out to our main directory and within our main directory im just going to create a package json which is going to be accessible from all our different folders so you can see that was created here and then we just want to install cron as a dependency okay now inside a worker i just this is the way i pretty much start with every uh with every app you just copy kind of the basic   though that its really fast its kind of like an object in javascript you just if you have the key its constant time access you just pull it out of your redis store and then you can serve it up in our case jumping back over to these um these job uh json that we got from github you can see every job has a uuid which is a guaranteed unique id because it has so many characters and its random characters so itll be guaranteed unique every time every job has one of these ids so thats a natural candidate to use as a redis key im thinking within redis our key is going to be this id and our value is just going to be the whole job object so it would be  just to see the length and or rather see that the length matches our our length that we put in lets parse it and then lets do dot lake okay so its kind of a lot that we did without testing it lets restart our server do the same curl oh man okay 245 i dont remember if thats how many we put in were definitely getting a list of 245 which is a good sign now lets just try sending this back and see if we get that full uh stringified object thats exactly what we want and its that easy so thats already done so i dont know how long its been guys but with this simple of an api we can literally weve literally been able to create all this like in such a t put this whole thing below our uh jobs map and um lets see if by pasting it directly in we we need to do anything else just going to make sure thats formatted correctly saved it and um lets just take this out classes direction rtl okay lets see how theme is being used because this is kind of a um darn all right i dont know why that would change from left to right but um it might be a mobile implementation specific thing so lets just take this and hard code it as right and well hard code this one as left and see if we run in any problems okay save that and cant find module oh i forgot about this material ui icons is a separate library so we   you can buy a domain a ton of different places i just like google because the interface and its because where my uh other domains are so ive opened my domain i already bought it a normalcom domain is going to be about 14 a year and the first thing we need to do is use the digital ocean name servers so that domain can be directed over to our server so youll see that i have clicked on my domain ive opened the dns tab and then theres a name servers tab and ive clicked use custom name servers now im going to put that on pause and jump over to the digital ocean dashboard you can make a digitalocean account for free and itll give you this dashboar pi jobs now that means we also have to change our api route which shouldnt be a problem slash api slash jobs and we have to make one change in our package json and thats adding a proxy config which allows this to still work on local development this doesnt affect anything on production so um proxying all api routes to a target of localhost sorry need the double quotes there http localhost uh 3001 was our api server i believe and ill save that and again that just helps us you know still develop in the same way but we need to make one config change for the production server as well so that was our change in um in our files and as i mentioned im s thats it we basically built a whole production application in less than 100 minutes and we got it deployed and now its running on the public internet at entrylevelsoftwarejobscom so go check it out but um im thinking next theres a few critical things we have to do before were ready for like a full production launch so to speak this was just our base framework that were building more features off of but at minimum i think we need a few more data feeds and we need to make our algorithm a lot more robust prevent it from breaking on errors as well as filtering down those jobs a lot more because if we get in five feeds were just gonna have a huge amount of jobs and we really wanna make sure those are entry level jobs so im thinking that we parse through the description and look for like three to five years of experience and take those out i think anything less than three years would qualify as an entrylevel job so again were gonna have to keep working on the algorithm and then otherwise were gonna want to add a little bit of monitoring logging different things like that but that can all come later our mvp is done and our base of our application is done so thats pretty cool so anyway hope you learned something um let me know if you have any questions and i will talk to you guys soon 

#####################
Shot: mixtral8x7b
#####################
#####################
Shot: full-stack
#####################
#####################
Target: rust
#####################
hello guys welcome back to my channel today we are going to talk about mistral so as you know mistral is a new language model that came out a few months ago from mistal ai which is a one of the hottest startup right now in europe for language models it also became a unicorn recently and we will exploring both the models they released one is the 7 billion and one is the 8 by7 billion model so lets review the topics of today the first thing i will introduce you is the architectural differences between the vanilla transformer and the architecture of mistal later we will see what is the sliding window attention and how it is related to the concept of receptive field a concept that usually we find in convolutional neural networks i will briefly review the kv cache because i want to introduce the concept of rolling buffer cache and also how it is done with prefilling and chunking uh we will see what is sparse mixture of experts model sharding with a little with a very brief introduction with the pipeline parallelism and last but not least we will also go through the code of mistal because there is a lot of innovations in the code especially when they use the x forers library with the block attention so i want to guide you into understanding the code because it can be really hard for be th is uh what is the context size of upon which it the model was trained upon uh and its much bigger for the 8x 7b the vocabulary size is the same for both and then the last two parameters you can see here are related to the sparse mixture of experts and we will see later uh how it works but we just remember that we have eight experts and for each token we use two experts but later i will clarify how it works lets proceed further so lets talk about the sliding window attention but before we talk about the sliding window attention i need to review a little bit of the self attention mechanism so what is self attention self attention is a mechan ding on the mask we have applied so our mask says that the first token can only watch itself so the first output token will be an embedding that will only depend on itself the second token will only depend on the first two tokens the third output token will only depend on the first three tokens the fourth will depend on the token number two because the first token is not used the token number two the token number three and the token number four etc etc until the last here the last token will depend only on the last three tokens because the first three tokens are masked out and this is the importance of the mask that we apply in the self atten pend it to the input for the temp step three and this will become the new input which will produce love that can then we take the last token of the output and we append it to the input for the time step four so it will become the new output will become love that can quickly then we take this word quickly we append it to the input for the next time step and it will produce the next token as output etc etc until the last token until we see the end of sentence token as output then we know that the model has stopped uh um has stopped producing new tokens and we can stop the inference now at every step the inference we are only interested in the l ache so we need to add the tokens of our prompt to the kv cache that so that we can then exploit this kv cache to build new tokens future tokens now the prompt is known in advance right because because its the input of our user its what you ask to ch gpd for example right tell me a poem tell me write me a poem or tell me a joke this is our prompt so its known in advance so we dont we dont need to generate it okay so what we can do is we can prefill the kv cache using the tokens of the prompt but there are many ways to do it like we were doing before when i was teaching you about the k cach we work with one token at a time so one way to um to   to change from one model to the next so to keep the range of the output stable they apply the soft marx after they have selected how many uh experts they want to work with and choosing the logits of the best two performing uh experts okay the next thing we are talking going to talk about is model sharding which is also implemented in the code of the mistal model so lets talk about it when we have a model that is too big to fit in a single gpu we can divide the model into groups of layers and place each group of layers in a single gpu for example in the case of mistal we have 32 layers of encoders you can see here one after another i didnt do in a transformer will result in n output tokens in the output so we have uh here we have three  4 so 7 7  5 12 tokens as input it will produce 12 tokens as output to understand what is the next token for each prompt we need to check the the we need to check the embedding corresponding to the token number three for the first prompt to the token number seven for the second prompt and the last token for the third prompt so we take all these embeddings we run them through the linear layer then we apply the soft marks and then we understand what is the next uh token from our vocabulary but you may be wondering how do we even produce an attention m i just run some random tensors to study all the shapes of the tensor and all the information passing so i dont know if the code works but i hope it will works i mean i didnt touch the logic i just add some comments uh anyway you can use the commented code by me to as um as a learning tool to complement with the official code of mistal so that you can understand uh more about the inner workings of this grd model i actually really enjoyed studying it i really enjoyed studying the code and i learned a lot of stuff you know um i think its very very good when you are doing something that is very complicated because it teaches you a lot because if something is simple then you dont learn much by the end of the day anyway guys thanks you for watching my video i hope you also enjoyed this journey with me even if it was very complicated i hope that you likeed this video and you will subscribe to my channel if you didnt please do it and the best way to support me guys is to share this video with all the people you know so share it on social media share it on linkedin on twitter etc because this is the best way to you can help me is to grow my channel and um please let me know if there is something that you dont understand i am always available to help and connect with me on linkedin byebye 

whats up guys back today with another longer video which is to build a job board app that could actually be a real startup that people use theres a lot of different places to find entry level or junior developer jobs on the internet for example github jobs stack overflow jobs you have angel list you have indeed but filtering through those especially because you kind of have to spam applications for your first job can take a long time so the good thing about all these job boards is they have public apis for the most part you always want to start with an mvp that is the minimum viable product today that means were going to start with a single data feed that is a single job board api feeding into our app and then finally were gonna have a super minimal simple front end were gonna do this in react and material ui on the front end were gonna use an express server redis for our data storage because were not writing or persisting any data that is not part of the job feed and then finally a node cron job to fetch these jobs and refresh them at a certain interval which are going to be filtered through an algorithm so lets draw this all out to get a better idea of our plan heres our front end what we basically want here is a list of jobs this is going to be pulling data from our api and th r tasks and i know already that were going to need the cron node library its just going to help us run simple cron jobs which is what i was saying before is the its the way you run a task on an interval basically forever if you want to opening up a new terminal tab going out to our main directory and within our main directory im just going to create a package json which is going to be accessible from all our different folders so you can see that was created here and then we just want to install cron as a dependency okay now inside a worker i just this is the way i pretty much start with every uh with every app you just copy kind of the basic   though that its really fast its kind of like an object in javascript you just if you have the key its constant time access you just pull it out of your redis store and then you can serve it up in our case jumping back over to these um these job uh json that we got from github you can see every job has a uuid which is a guaranteed unique id because it has so many characters and its random characters so itll be guaranteed unique every time every job has one of these ids so thats a natural candidate to use as a redis key im thinking within redis our key is going to be this id and our value is just going to be the whole job object so it would be  just to see the length and or rather see that the length matches our our length that we put in lets parse it and then lets do dot lake okay so its kind of a lot that we did without testing it lets restart our server do the same curl oh man okay 245 i dont remember if thats how many we put in were definitely getting a list of 245 which is a good sign now lets just try sending this back and see if we get that full uh stringified object thats exactly what we want and its that easy so thats already done so i dont know how long its been guys but with this simple of an api we can literally weve literally been able to create all this like in such a t put this whole thing below our uh jobs map and um lets see if by pasting it directly in we we need to do anything else just going to make sure thats formatted correctly saved it and um lets just take this out classes direction rtl okay lets see how theme is being used because this is kind of a um darn all right i dont know why that would change from left to right but um it might be a mobile implementation specific thing so lets just take this and hard code it as right and well hard code this one as left and see if we run in any problems okay save that and cant find module oh i forgot about this material ui icons is a separate library so we   you can buy a domain a ton of different places i just like google because the interface and its because where my uh other domains are so ive opened my domain i already bought it a normalcom domain is going to be about 14 a year and the first thing we need to do is use the digital ocean name servers so that domain can be directed over to our server so youll see that i have clicked on my domain ive opened the dns tab and then theres a name servers tab and ive clicked use custom name servers now im going to put that on pause and jump over to the digital ocean dashboard you can make a digitalocean account for free and itll give you this dashboar pi jobs now that means we also have to change our api route which shouldnt be a problem slash api slash jobs and we have to make one change in our package json and thats adding a proxy config which allows this to still work on local development this doesnt affect anything on production so um proxying all api routes to a target of localhost sorry need the double quotes there http localhost uh 3001 was our api server i believe and ill save that and again that just helps us you know still develop in the same way but we need to make one config change for the production server as well so that was our change in um in our files and as i mentioned im s thats it we basically built a whole production application in less than 100 minutes and we got it deployed and now its running on the public internet at entrylevelsoftwarejobscom so go check it out but um im thinking next theres a few critical things we have to do before were ready for like a full production launch so to speak this was just our base framework that were building more features off of but at minimum i think we need a few more data feeds and we need to make our algorithm a lot more robust prevent it from breaking on errors as well as filtering down those jobs a lot more because if we get in five feeds were just gonna have a huge amount of jobs and we really wanna make sure those are entry level jobs so im thinking that we parse through the description and look for like three to five years of experience and take those out i think anything less than three years would qualify as an entrylevel job so again were gonna have to keep working on the algorithm and then otherwise were gonna want to add a little bit of monitoring logging different things like that but that can all come later our mvp is done and our base of our application is done so thats pretty cool so anyway hope you learned something um let me know if you have any questions and i will talk to you guys soon 

select star from table is a universal sql syntax that will basically return all columns in the table that youre selecting its been said that select star is slow and to avoid it like dont return on column because it is slow but i want to actually dive deep into the reasons of why select star is is slow some of these reasons you might already know hey were turning 50 columns is of course lower than returning one but i think some of these reasons you might not have think about because it really involves understanding the entire stack and the backend engineering fundamentals and specifically the network aspects of things as well you know and of course programming logic memory management how the os works all of this really affects the performance of your queries and selecting all the fields while convenient because you dont have to enumerate the fields you want its really it can impact the performance in general so i wrote up an article on medium that im gonna review in this video im going to add my comments and going through the reasons of all of these things how about we jump into it alright so all right so lets get started how slow is select star lets read this little bit of a paragraph and then start discussing this though in a row store database engine rows are stored in units called pages boy dont get me started now were already in the first sentence and i already like thinking about this stuff right after i ride this and then coming back and says wow there is just so much t  equal one lets say this is a student id right so assuming there is no index what the database will do is okay were going to do a full table scan so there is your table and the table is literally one file and it is organized as an array of these pages that we talked about this fixed size pages so what what the database will do is again i need to do a full table scan and what that means is i need to scan the pages one by one in the file so im gonna read page 0 from the file how do i get page zero remember when you read from disk you have very a certain operations when you want to read right you you read you specify the file descriptor where do you want to read from where the starting position is and how much bytes you want to read thats it a ere is a name theres a bunch of other stuff right so now i have the student who has an id that is a name theres a gray theres a bunch of other columns as well right so now as you might have a grade index an index on the great field so if i do a query says okay give me all the student ids im just interested in the ids that scored more than 90 right mark a mark of 90 or higher well if youre great index and assume lets assume this is my sequel right or sql server and i always i picked those two letters because they they store secondary indexes a little bit different than postgresway and were going to come to the boss guys its just its very similar there here so now because im doing a grid grid is greater than 90 definitely im going to use the  ve the id or will have anything else you want so you can get that beautiful index only scan so if you have such index and your frontend application on this case is actually is the backend server right that actually executes the query in this case it is a frontend to the database right well will not utilize this beautiful index on this castle so thats thats the first case index only scans you basically kiss them goodbye when you do a select star right you might say okay i dont care the random reads affecting from this is really bad okay lets talk about deserialization cost correct when you select star the columns live in the page but getting them out and into the protocol that will be eventually delivered to the app will require something ca l table right and and mysql has it poscus has its called toast right they have to have it theres no way out you have to have some external place to store your stuff right there are they cannot fit into the page and as a result if you think about it this actually what limits the number of columns why dont databases allow unlimited number of columns because of this reason right because at the end of the day you can have a nonvariable static type integer like the integer is not variable right its a fixed size its either four byte or eight okay 64 or 32 right if you have that then how many actually you cannot really put that outside it doesnt make sense right thats an integer right so so so what happens is you are limited by the whatever the nu vers closed and your database closer i think i think that was clever a clever way of saying it did i just call myself clever because kids kids these days will call me crunch so uh right network cost so now that we talked about okay you selected all the fields you took the hit you did you avoided the beautiful index on the scan you took the head of database uh data structure c deserialization from the page down to their finger and then you took uh uh uh what was that what else yes uh you you told me to get all these text fields and blobfish and jason fields so i had to go to a toastable an external table decompress them and and also put them in a data structure so the double double trouble and then now im ready to send it back across the net  you go through this youre sending that but eventually the client have to start acknowledging this it has to process this and it only the client only acknowledged something that actually was able to receive right so if there is a data loss guess what the client didnt receive it the server timeout will hit and then well retransmit it so all of this youll feel it then more network you have latency the more you will kind of feel it thats why its like i always feel like applications if you want to really test applications like when it comes to performance like just just put put the database and the back end in a very really you know uh far apart i know its a bad idea right to do that in production but but it will it will force you to optimize b  client deserialization and client building all these objects fetch has the same thing by the way right the fish api fetch api when you call it it will it will it will give you the headers only it will give you the response but itll give you the just the byte the raw body right you cannot actually do anything with the body until you call body dot json function so go ahead and actually took take the head to actually this realizer and the reason they do fish does it this way is because uh you might only lead the headers for some reason or you might only need the response code right the status code or content lag so this is the way such that the app the client will consume what it needs and when it actually is the content to the body it will do json or dot text to actually move it from binary down to the deserialization down to the data structure in this case its json because compared to json is expensive right now im assuming its the response is json in this case right and uh so so the decentralization is costly so if you can do it lazily thats even better but how about that if you can avoid sending data that you never use thats even better for the back end isnt it right so yeah guys thats thats all what i have for you today right so we talked about hawaii select star is really slow really really really slow i might have missed a reason or not let me know in the those comments down below hope you enjoyed this video im gonna see you on the next one you guys stay awesome goodbye 

#####################
Shot: mixtral8x7b
#####################
#####################
Shot: full-stack
#####################
#####################
Target: sql_backend
#####################
