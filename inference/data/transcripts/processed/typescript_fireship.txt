it is september 7th 2023 and you are watching the code report it many years ago in 2017 legendary javascript user kent c dodds said i dont use typescript so i dont ever plan on supporting it in 2019 he goes on to say you are impassioned love of typescript is sort of freaking me out and finally in 2023 comes capitulation typescript is one and its only a matter of time youre using it whether you like it or not but this is the sign of a good developer you have to be openminded and willing to adapt to new tools and sometimes tools you dont even like but the big question here is did typescript really win because recently the turns have started to table a bunch of big open source projects have decided to ditch typescript in favor of vanilla javascript to understand the shocking turn of events well need to go back to the very beginning in 2012 when typescript was first released by microsoft nobody really cared at first but then a few years later it was adopted by the angular 2 framework which everybody thought was crazy but heres the thing first they think youre crazy then they fight you then you change the world or you go to jail by the early 2020s typescript was everywhere where at which point most of its haters had been converted into true believers but now right as were about to reach the glorious climax of typescript saturation youve got big libraries like svelte drizzle and turbo deciding to ditch typescript from their code bases to be clear that just means that theyre not going to use typescript when developing these libraries but as an end user in a framework like svelt for example youre still able to use typescript just like normal but how could anyone possibly go back to vanilla js after using typescript did they not remember runtime errors like cannot read properties of undefined did they not remember how hard it is to refactor a code base where you have no idea what anything is well these people are a lot smarter than i am so lets first look at this article from dhh that creator of ruby on rails whos getting rid of typescript and turbo version 8 the main reason theyre getting rid of it is not because of the compile step but rather because it pollutes the code with quote type gymnastics and theres a lot of truth to that especially when developing a library im working on a library myself called svelt fire and as you can see in the code here i have to do my own type gymnastics with typescript just to get rid of some red squiggly lines in the ide now i could simply place this type with any and not get any type inference but then my boss would yell at me hes a total who will abuse me emotionally and physically if i dont code up to his standards its not easy being selfemployed furthermore i have the compiler in strict mode which means i have to use any anytime i dont want to use an explicit type and that results in code thats anything but beautiful lets head over to turbo on github and see how people are reacting to this change well its an absolute dumpster fire and a lot of developers are upset that their ts contributions are now dead on arrival but another huge project moving away from typescript is spelled and the reasoning is a bit different its purely practical and i recommend you read this post by rich harris spelled 5 which may come out later this year no longer uses typescript and spelled kit is already written in plain vanillajs and the main benefit is no compile step which is a huge boost in productivity for a large framework like this that may sound like total chaos for a large complex project but theyre actually still getting most of the benefits of typescript but doing so with js talk which is a standard comment format where you declare types and documentation with regular javascript comments that can then be used to generate rate types like a dts file and most importantly provide intellisense in your editor so you know what the hell everything does and can catch bugs early just like you can with typescript thats the main reason i use typescript in the first place so is it time to just ditch it all together well when it comes to building actual applications with a tool like spell kit or next js i dont see myself leaving typescript anytime soon those tools integrate ts seamlessly and trying to get the same results with js doc would be a total nightmare but one day i hope we see the end of this holy war theres currently a stage 1 ecmascript proposal that would add optional type annotations to javascript natively thus making typescripts nearly obsolete this has been the code report thanks for watching and i will see you in the next one 