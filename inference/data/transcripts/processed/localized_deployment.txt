and i dont just mean your code and its librariesall preconfigured to run as soon as you deploy it thats a container theyre lightning fastisolated environments that you can create in mere momentsand after this video youre going to wonder how you ever developed and deployed applications without them but thats just a vm nookayan osto spin upif there was a scale with vms on one side and normal native applications on the othervirtual machines are pretty much just tricked by the hosts hypervisor layer into thinking theyre actually running on real hardware containersemulate a minimal file systemthe hosts kernel the kernel is the noclose enough the kernel is the core of any operating system its the bridge between what the software asks for and what the hardware actually does its responsible for all sorts of critical lowlevel tasks like cpu and memory managementfile systemsdevelopers wellfingertipsenvironments at once without having to really compromise anything on our local machine for exampleusing the os and package dependencies it was originally built on top ofwhile also being able to use bleeding edge tech for our next multimillion dollar project without having to worry about any conflicts in doing so were also now able to put an end to the it works on my machine problemwhich is a pretty common phrase to hear in the tech industrybecause a container is essentially a full os at its coreyou can be sure that wherever it runs youre going to get the exact same environmentmachinenow weve got the basics out of the way lets see how we can make a container of our own the first thing were going to need is a container platform this will give us all the tools we need to create and run our containerjust because its the most well supported all containers run from a base file system and some metadataand the way container images work is kind of fascinatingbecause they are formed with overlapping layers heres a banana to kind of badly demonstrate this idea okayits sourcedifferences to the previous layerthe final system state its somewhat similar to how source control tracks changes in your code this concept is really powerful for containersany previous image or image layer theres loads of premade and officially supported base images out thererequirementsto do this in dockerfile called a dockerfile docker will execute each command in sequenceand then add each generated change to the final image as a new file system layerlike from a single image we can do this because when a container is first createdlayerthis means that we can make any runtime changes we likeother containers using that same image whats moreuntil we delete the containerwithout losing any data we can even enter our running containerslike we do with a vm with linux containerswe can start a shell prompt when executing itenvironment to explore and kind of just play around with as we please communication between containers is usually pretty simple as wellas most runtimes virtualize a network layer for you when our app is ready to be published into the worldtag it with something uniqueit again later we can then publish it to something called a container registrywarehouse for our images by defaultusing the official docker registry howeverif you wish to use another when it comes to deploymentcloud platforms have builtin support for deploying containers as standalone units alternativelycompatible container runtime on whatever machine you want to usepull your image from the registry you pushed to earlier it does require a few more steps doing it this wayvalue for money and quite a bit more control if you want to go even deeperkubernetes essentially allow you to create your own containerbased cloud you describe the desired state of your deployment declarativelyand let kubernetes handle the details of how to get there and thats it ohand with enough supportand ill see you next time 